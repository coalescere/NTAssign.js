{"version":3,"sources":["Energy.js","app.min.js","Assign.js","Plot.js","main.js"],"names":["_classCallCheck","instance","Constructor","TypeError","getRBMParameters","p","type","Param","a","b","this","Error","wRBM2Dt","wRBM","ab","dt2RBM","dt","getEnergyFromCos3Theta","cos3Theta","mod","r","isMetal","derivative","type0Params","c","sgE","extMod","Math","log10","type3Params","getCos3Theta","val","calc","parseFloat","toFixed","getAverage","splitting","pLesser","cos3ThetaMax","pLarger","err","message","delta","x","getList","li","nMin","nMax","n","m","seriesThreshold","dl","getEnergy","Dt","Theta","dh","push","Mod","getRBMArray","d","rbmLabel","rbm","wRBMMin","wRBMMax","rbmFreq","t","plus","minus","getPlotParams","inputParams","decimalDigits","split","length","isUnparsable","val1","val2","uncertainty","pow","E1R1","min","E2","p1","p2","p1ToP","cos","resultString","error","Assign","bluePoint","point","pToLesser","pointType","p1Lesser","p1ToLesser","pAnother","modAnother","p1Name","valAnother","_ref","_ref2","y","p_1","p_2","_ref3","_ref4","_ref5","average","params","setBounds","dxMin_","dxMax_","dyMin_","dyMax_","dxMin","dxMax","dyMin","dyMax","processOutput","result","query","orderBy","Dist_","toArray","i","round","arguments","undefined","Dist","x1","y1","x2","y2","sqrt","e","deltaX","maxY","minY","all","Enumerable","from","where","uc","ar","AssignResult","count","accurate","union","possible","tmp","impossible","yMax","xMin","xMax","s","rbmPos","between","xy","r1","r2","u","q","groupBy","key","group","value","select","map","ee","allLabel","resultLabel","yAxisLabel","p1Name_raw","xAxisLabel","drawPlot","placeholder","defaultRadius","yMin","font","size","lineHeight","family","options","xaxis","show","position","max","tickLength","tickColor","color","yaxis","series","hoverable","grid","borderColor","top","bottom","left","right","minBorderMargin","data","shadowSize","laser","laser_color","concat","id","toString","fillBetween","lines","fill","lineWidth","mod_i","points","radius","symbol","point_labels","fillColor","$placeholder","$","plot","previousPoint","bind","event","pos","item","dataIndex","remove","showTooltip","pageX","pageY","floor","o","pointOffset","axes","getAxes","append","mid","pMid","divMid","div","dA","c1","c2","c3","o1","contents","css","display","appendTo","fadeIn","clearTitle","find","removeAttr","validate","form","$hint","invokeError","msg","addClass","html","val1_","Val1","val2_","Val2","rbm_","parseInt","RBM","emptyNum","Number","isNaN","selectpicker","history","replaceState","join","changeEdit","p1_lesser","calculate","$calcHint","$calcResult","NCalc","MCalc","urlParams","$resultList","$plotList","generateRBMCalculationResult","calculatedEnergy","Array","validResultNumber","_loop","click","plotParams","plotId","$plot","MathJax","Hub","Queue","isAirSuspended","editRBM","rbmAS","rbmGeneral","typeName","PI","atan","isMetalP","isMetalNM","theta","timeLoad","performance","now","timeStartup","getScript","navigator","language","substr","toLowerCase","console","log","window","onpopstate","match","pl","search","decode","decodeURIComponent","replace","location","substring","exec","test","userAgent","$body","hasClass","$selectType","on","href","$selectP1","$selectP2","$selectP1P2","innerHTML","$dataTables","removeClass","threshold","every","valueBetween","index","each"],"mappings":"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","file":"app.min.js","sourcesContent":["\n'use strict';\n\n/**\n * @const max processable (2n + m) limit\n * @type int\n */\nconst seriesThreshold = 90;\n\nconst AssignResult = {\n  accurate : 0,\n  possible : 1,\n  impossible : 2,\n  error : 3\n};\n\n/**\n * @const names of environments\n * @type {string[]}\n */\nconst typeName = [\n  'Air-suspended SWNTs', 'SWNTs on \\\\(\\\\mathrm{SiO_2}/\\\\mathrm{Si}\\\\) substrates', 'SWNT arrays on quartz substrates',\n  '\"Super-growth\" SWNTs', 'SDS-dispersed SWNTs', 'ssDNA-dispersed SWNTs'\n];\n\n\n/**\n * @const parameters of air-suspended-like environments: (a, b, c)\n * @type {number[][]}\n */\nconst type0Params = [\n  [ 1.194, 0.179, 0.053 ],\n  [ 2.110, 0.388, 0.154 ],\n  [ 3.170, 0.764, 0.286 ], //M11\n  [ 4.286, 1.230, 0.412 ],\n  [ 5.380, 1.922, 0.644 ],\n  [ 6.508, 2.768, 0.928 ], //M22\n  [ 7.624, 3.768, 1.024 ], //S55\n  [ 8.734, 4.921, 1.479 ], //S66\n  [ 9.857, 6.228, 1.692 ]  //M33\n];\n\n/**\n * @const parameters of super-growth environments: (beta_mod1, beta_mod2) or (beta_-, beta_+)\n * @type {number[][]}\n */\nconst type3Params =[\n  [ 0.09, -0.07 ],\n  [ -0.18, 0.14 ],\n  [ -0.19, 0.29 ],\n  [ 0.49, -0.33 ],\n  [ -0.43, 0.59 ],\n  [ -0.6, 0.57 ]\n];\n\nconst p1Name = [\n  '\\\\(S_{11}\\\\)', '\\\\(S_{22}\\\\)', '\\\\(M_{11}^-\\\\)', '\\\\(M_{11}^+\\\\)', '\\\\(S_{33}\\\\)', '\\\\(S_{44}\\\\)',\n  '\\\\(M_{22}^-\\\\)', '\\\\(M_{22}^+\\\\)', '\\\\(S_{55}\\\\)', '\\\\(S_{66}\\\\)', '\\\\(M_{33}^-\\\\)', '\\\\(M_{33}^+\\\\)'\n];\n\n/**\n * @const name of p1 without delimiters\n * @type {string[]}\n */\nconst p1Name_raw = [\n  'S_{11}', 'S_{22}', 'M_{11}^-', 'M_{11}^+', 'S_{33}', 'S_{44}', 'M_{22}^-', 'M_{22}^+', 'S_{55}', 'S_{66}',\n  'M_{33}^-', 'M_{33}^+'\n];\n\n/**\n * converts p1 (p with + or - for metallic tubes) to correlated p.\n * @param {int} p1 - input p1\n * @returns {int} p\n */\nconst p1ToP = (p1) => [ 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8 ][p1];\n\n/**\n * converts p to its lesser value in a pair (S11 and S22 will be converted to S11, etc.).\n * @param {int} p - input p\n * @returns {int} lesser p\n */\nconst pToLesser = (p) => [ 0, 0, 2, 3, 3, 5, 6, 6, 9 ][p];\n\n/**\n * converts p1 to its lesser value in a pair (M11+ and M11- will be converted to M11-, etc.).\n * @param {int} p1 - input p1\n * @returns {int} lesser p1\n */\nconst p1ToLesser = (p1) => p1 % 2 === 0 ? p1 : p1 - 1;\n\n\nconst Dt = (n, m, type) => ((type !== 4) ? 0.142 : 0.144) * Math.sqrt(3 * (n * n + n * m + m * m)) / Math.PI;\nconst Theta = (n, m) => Math.atan(Math.sqrt(3) * m / (2 * n + m));\nconst Mod = (n, m) => (2 * n + m) % 3;\n\n/**\n * get if a p value or a pair of (n, m) value is associated to a metallic tube.\n * @returns {boolean} if it is metallic\n */\nconst isMetal = function () {\n  const isMetalP = (p) => (p + 1) % 3 === 0;\n  const isMetalNM = (n, m) => Mod(n, m) === 0;\n  return arguments.length === 2 ?\n    isMetalNM(arguments[0], arguments[1]) :\n    isMetalP(arguments[0]);\n};\n\n/**\n * get RBM parameters (A, B) in the formula wRBM = A / dt + B of specific p and type of environment.\n * @param {int} p - specific p\n * @param {int} type - specific type of environment\n * @returns {Object} object of {a: number, b: number}\n */\nfunction getRBMParameters(p, type) {\n  class Param {\n    constructor(a, b) { this.a = a; this.b = b; }\n  }\n  switch (type) {\n    case 0: switch (p) {\n      case 0: case 1: return new Param(204, 27);\n      case 2: return new Param(200, 26);\n      default: return new Param(228, 0);\n    }\n    case 1: return new Param(235.9, 5.5);\n    case 2: return new Param(217.8, 15.7);\n    case 3: return new Param(227.0, 0.3);\n    case 4: return new Param(223.5, 12.5);\n    case 5: return new Param(218, 18.3);\n    default: throw new Error('invalid type');\n  }\n}\n\nfunction wRBM2Dt(wRBM, p, type) {\n  let ab = getRBMParameters(p, type);\n  return ab.a / (wRBM - ab.b);\n}\n\nfunction dt2RBM(dt, p, type) {\n  let ab = getRBMParameters(p, type);\n  return ab.a / dt + ab.b;\n}\n\nconst getEnergy = (dt, theta, p, type, mod) => getEnergyFromCos3Theta(dt, Math.cos(3 * theta), p, type, mod);\n\n/**\n * inverse of getCos3Theta, calculates transition energy from tube diameter and Math.cos(3 * chiral_angle)\n * @param {number} dt - tube diameter\n * @param {number} cos3Theta - Math.cos(3 * chiral_angle)\n * @param {int} p - p of transition type\n * @param {int} type - code of environment\n * @param {int} mod - mod of the tube, -1/0 for metallic -/+, 1/2 for semiconducting MOD1/MOD2\n * @returns {number} transition energy\n */\nfunction getEnergyFromCos3Theta(dt, cos3Theta, p, type, mod) {\n  let r; // return value\n  if (isMetal(p) && mod > 0)\n    throw new Error('mod should be in accordance with p');\n  if (type <= 2) {\n\n    if (p >= 9)\n      throw new Error('higher than S66 not available');\n    let derivative = -type0Params[p][0] / (dt * dt) + 2 * type0Params[p][1] / (dt * dt * dt);\n    if (derivative > 0) // 1st derivative\n      throw new Error('dt');\n    if (isMetal(p))\n      r = type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) +\n        type0Params[p][2] / (dt * dt) * cos3Theta * (mod * 2 + 1);\n    // mod * 2 + 1 <==> mod === 0 ? 1 : -1\n    else\n      r = type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) +\n        type0Params[p][2] / (dt * dt) * cos3Theta * (((p % 3) === (mod % 2)) ? -1 : 1);\n    r -= (type === 1) ? 0.04 : ((type === 2) ? 0.1 : 0);\n\n  } else if (type === 3) {\n\n    if (p >= 6)\n      throw new Error('higher than M22 not available for Super-Growth');\n    let a = 1.074, b = 0.467, c = 0.812;\n    let sgE = (extMod) => a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt)))\n      + type3Params[p][extMod] / (dt * dt) * cos3Theta\n      + ((p > 2) ? 0.059 * (p + 1) / dt : 0); // extra for larger than M11; warning: p + 1\n    if (isMetal(p))\n      r = sgE(mod + 1); // 0(Mii+) -> 1, -1(Mii-) -> 0\n    else\n      r = sgE(mod - 1); // 1(MOD1) -> 0, 2(MOD2) -> 1\n\n  } else if (type === 4 || type === 5) {\n\n    if (p === 0)\n      r = 1 / (0.1270 + 0.8606 * dt) + ((mod === 1) ? 0.04575 : -0.08802) / (dt * dt) * cos3Theta;\n    else if (p === 1)\n      r = 1 / (0.1174 + 0.4644 * dt) + ((mod === 1) ? -0.1829 : 0.1705) / (dt * dt) * cos3Theta;\n    else\n      throw new Error('only S11 and S22 are available for SDS-dispersed or ssDNA dispersed');\n    r -= (type === 5) ? 0.02 : 0;\n\n  } else throw new Error('invalid type');\n\n  return r;\n}\n\n/**\n * inverse of getEnergyFromCos3Theta(), get Math.cos(3 * chiral_angle) from transition energy and tube diameter.\n * @param {number} dt - tube diameter\n * @param {number} val - transition energy\n * @param {int} p - p of transition type\n * @param {int} type - code of environment\n * @returns {number[]} cos3Theta as [val_MOD1, val_MOD2] or [val_-, val_+]\n */\nfunction getCos3Theta(val, dt, p, type) {\n\n  let r = [-1, -1];\n\n  if (type <= 2) {\n\n    if (p >= 9)\n      throw new Error('higher than S66 not available');\n    val += (type === 1) ? 0.04 : ((type === 2) ? 0.1 : 0);\n    if (isMetal(p)) {\n      r[0] = (type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val) / type0Params[p][2] * (dt * dt);\n      r[1] = (-(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val)) / type0Params[p][2] * (dt * dt);\n    } else {\n      r[0] = (-(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val))\n        / type0Params[p][2] * (dt * dt) * (((p % 3) === (1 % 2)) ? -1 : 1);\n      r[1] = (-(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val))\n        / type0Params[p][2] * (dt * dt) * (((p % 3) === (2 % 2)) ? -1 : 1);\n    }\n\n  } else if (type === 3) {\n\n    if (p >= 6)\n      throw new Error('higher than M22 not available for Super-Growth');\n    let a = 1.074, b = 0.467, c = 0.812;\n    let calc = (extMod) => (val - a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) -\n      ((p > 2) ? 0.059 * (p + 1) / dt : 0)) / type3Params[p][extMod] * (dt * dt);\n    r[0] = calc(0); //Mii- or MOD1\n    r[1] = calc(1);\n\n  } else if (type === 4 || type === 5) {\n\n    val += (type === 5) ? 0.02 : 0;\n    if (p === 0) {\n      r[0] = (val - 1 / (0.1270 + 0.8606 * dt)) / 0.04575 * (dt * dt); // MOD1\n      r[1] = (val - 1 / (0.1270 + 0.8606 * dt)) / (-0.08802) * (dt * dt);\n    } else if (p === 1) {\n      r[0] = (val - 1 / (0.1174 + 0.4644 * dt)) / (-0.1829) * (dt * dt); // MOD1\n      r[1] = (val - 1 / (0.1174 + 0.4644 * dt)) / 0.1705 * (dt * dt);\n    } else throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\n\n  } else throw new Error('invalid type');\n\n  r[0] = parseFloat(r[0].toFixed(4)); // 4 digits\n  r[1] = parseFloat(r[1].toFixed(4));\n  if (r[0] > 1 || r[0] < 0)\n    r[0] = -1;\n  if (r[1] > 1 || r[1] < 0)\n    r[1] = -1;\n  return r;\n\n}\n\n/**\n * get sum of paired transition energies from their splitting and RBM frequency.\n * @param {number} splitting - (S22 - S11) or (M11+ - M11-), or something similar\n * @param {number} wRBM - RBM frequency\n * @param {int} pLesser - the smaller one of the p value of the 2 transition energies\n * @param {int} type - environment\n * @returns {(number|null)} average or null if invalid\n */\nfunction getAverage(splitting, wRBM, pLesser, type) {\n\n  let cos3ThetaMax = 1.5;\n\n  let dt = wRBM2Dt(wRBM, pLesser, type);\n\n  if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one');\n  if (type <= 2) {\n    if (pLesser >= 9)\n      throw new Error('higher than S66 not available');\n\n    if (isMetal(pLesser)) {\n\n      let cos3Theta = dt * dt * splitting / 2 * type0Params[pLesser][2];\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax) return null;\n      try {\n        return (\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, -1) +\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, 0)\n        ) / 2;\n      } catch (err) {\n        if (err.message === 'dt')\n          return null;\n        else throw err;\n      }\n    } else {\n      let pLarger = pLesser + 1;\n      let delta = (x) => type0Params[pLarger][x] - type0Params[pLesser][x];\n      let mod = 1;\n      let cos3Theta = (splitting * dt * dt - delta(0) * dt + delta(1)) / (\n        type0Params[pLarger][2] * (((pLarger % 3) === (mod % 2)) ? -1 : 1) -\n        type0Params[pLesser][2] * (((pLesser % 3) === (mod % 2)) ? -1 : 1)\n      );\n      if (cos3Theta < 0) {\n        mod = 2;\n        cos3Theta = -cos3Theta;\n      }\n      if (cos3Theta > cos3ThetaMax) return null;\n      try {\n        return (\n          getEnergyFromCos3Theta(dt, cos3Theta, pLarger, type, mod) +\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, mod)\n        ) / 2;\n      } catch (err) {\n        if (err.message === 'dt')\n          return null;\n        else throw err;\n      }\n    }\n  } else if (type === 3) {\n    let a = 1.074, b = 0.467, c = 0.812;\n    let sgE = (p) => a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) +\n      ((p > 2) ? 0.059 * (p + 1) / dt : 0);\n\n    if (isMetal(pLesser)) {\n\n      let cos3Theta = (splitting) * dt * dt / (type3Params[pLesser][1] - type3Params[pLesser][0]);\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax)\n        return null;\n      return (\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, -1) +\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, 0)\n      ) / 2;\n\n    } else {\n\n      let pLarger = pLesser + 1;\n      let mod = 1;\n      if (pLesser >= 6)\n        throw new Error('higher than M22 not available for Super-Growth');\n      let cos3Theta = (splitting + sgE(pLesser) - sgE(pLarger)) * dt * dt / (\n        type3Params[pLarger][mod - 1] - type3Params[pLesser][mod - 1]\n      );\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax) {\n        mod = 2;\n        cos3Theta = (splitting + sgE(pLesser) - sgE(pLarger)) * dt * dt / (\n          type3Params[pLarger][mod - 1] - type3Params[pLesser][mod - 1]);\n      }\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax)\n        return null;\n      return (\n        getEnergyFromCos3Theta(dt, cos3Theta, pLarger, type, mod) +\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, mod)\n      ) / 2;\n    }\n\n  } else if (type === 4 || type === 5) {\n\n    if (pLesser !== 0)\n      throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\n    let mod = 1;\n    let cos3Theta = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt)))\n      * dt * dt / (-0.1829 - 0.04575);\n\n    if (cos3Theta > cos3ThetaMax || cos3Theta < 0) {\n      mod = 2;\n      cos3Theta = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt)))\n        * dt * dt / (0.1705 - -0.08802);\n    }\n    if (cos3Theta > cos3ThetaMax || cos3Theta < 0)\n      return null;\n\n    return (\n      getEnergyFromCos3Theta(dt, cos3Theta, 1, type, mod) +\n      getEnergyFromCos3Theta(dt, cos3Theta, 0, type, mod)\n    ) / 2;\n  }\n  else throw new Error('invalid type');\n}\n\n/**\n * get a list of standard dots in a plot of a certain p (the smaller in a pair) and type\n * @param {int} pLesser - the smaller p in a pair\n * @param {int} type - type of the environment\n * @returns {number[][]} array of [n, m, x, y] where (n, m) is the chiral index and (x, y) is the coordinates\n */\nfunction getList(pLesser, type) {\n\n  let li = [];\n  const nMin = 5, nMax = 50;\n\n  if (!isMetal(pLesser)) {\n    if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one, e.g. S11 rather than S22');\n    for (let n = nMin; n < nMax; n++)\n      for (let m = 0; m <= n; m++) {\n\n        if (2 * n + m > seriesThreshold) break;\n        try {\n          if (!isMetal(n, m)) {\n            let dl = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, Mod(n, m));\n            let dh = getEnergy(Dt(n, m, type), Theta(n, m), pLesser + 1, type, Mod(n, m));\n            li.push([ n, m, (dh + dl) / 2, (dh - dl) ]);\n          }\n        } catch (err) {\n          if (err.message !== 'dt') throw err;\n        }\n      }\n  } else {\n    for (let n = nMin; n < nMax; n++)\n      for (let m = 0; m <= n; m++) {\n\n        if (2 * n + m > seriesThreshold) break;\n        try {\n          if (isMetal(n, m)) {\n            let dl = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, -1);\n            let dh = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, 0);\n            li.push([ n, m, (dh + dl) / 2, (dh - dl) ]);\n          }\n        } catch (err) {\n          if (err.message !== 'dt') throw err;\n        }\n      }\n  }\n  return li;\n}\n\n/**\n * get an parameter array used to plot RBM contour lines\n * @param {int} pLesser - the smaller p in a pair\n * @param {int} type - type of the environment\n * @return {{rbmLabel: number[], rbm: number[][][]}} rbm: RBM points array, rbmLabel: associated RBM value array\n */\nfunction getRBMArray(pLesser, type) {\n\n  let d = { rbmLabel: [], rbm: [] }; // return\n\n  const cos3ThetaMax = 60;\n  const wRBMMin = 70, wRBMMax = 350;\n  if (!isMetal(pLesser) && isMetal(pLesser + 1))\n    throw new Error('p should be the smaller one, e.g. S11 rather than S22');\n\n  for (let rbmFreq = wRBMMin; rbmFreq <= wRBMMax; rbmFreq += 10) {\n\n    let dt = wRBM2Dt(rbmFreq, pLesser, type);\n    let t = [];\n    try {\n      if (isMetal(pLesser)) {\n        let plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 0);\n        let minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, -1);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        plus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, 0);\n        minus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, -1);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        d.rbmLabel.push(rbmFreq);\n        d.rbm.push(t);\n      } else {\n        let plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 1); //should it be higher?\n        let minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 1);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        plus = getEnergyFromCos3Theta(dt, 0, pLesser + 1, type, 2);\n        minus = getEnergyFromCos3Theta(dt, 0, pLesser, type, 2);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 2);\n        minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 2);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        d.rbmLabel.push(rbmFreq);\n        d.rbm.push(t);\n      }\n    }\n    catch (err)\n    {\n      if (err.message === 'dt') break;\n      else throw err;\n    }\n  }\n\n  return d;\n}\n","\n'use strict';\n\n/**\n               * @const max processable (2n + m) limit\n               * @type int\n               */function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\nvar seriesThreshold = 90;\n\nvar AssignResult = {\n  accurate: 0,\n  possible: 1,\n  impossible: 2,\n  error: 3 };\n\n\n/**\n               * @const names of environments\n               * @type {string[]}\n               */\nvar typeName = [\n'Air-suspended SWNTs', 'SWNTs on \\\\(\\\\mathrm{SiO_2}/\\\\mathrm{Si}\\\\) substrates', 'SWNT arrays on quartz substrates',\n'\"Super-growth\" SWNTs', 'SDS-dispersed SWNTs', 'ssDNA-dispersed SWNTs'];\n\n\n\n/**\n                                                                          * @const parameters of air-suspended-like environments: (a, b, c)\n                                                                          * @type {number[][]}\n                                                                          */\nvar type0Params = [\n[1.194, 0.179, 0.053],\n[2.110, 0.388, 0.154],\n[3.170, 0.764, 0.286], //M11\n[4.286, 1.230, 0.412],\n[5.380, 1.922, 0.644],\n[6.508, 2.768, 0.928], //M22\n[7.624, 3.768, 1.024], //S55\n[8.734, 4.921, 1.479], //S66\n[9.857, 6.228, 1.692] //M33\n];\n\n/**\n    * @const parameters of super-growth environments: (beta_mod1, beta_mod2) or (beta_-, beta_+)\n    * @type {number[][]}\n    */\nvar type3Params = [\n[0.09, -0.07],\n[-0.18, 0.14],\n[-0.19, 0.29],\n[0.49, -0.33],\n[-0.43, 0.59],\n[-0.6, 0.57]];\n\n\nvar p1Name = [\n'\\\\(S_{11}\\\\)', '\\\\(S_{22}\\\\)', '\\\\(M_{11}^-\\\\)', '\\\\(M_{11}^+\\\\)', '\\\\(S_{33}\\\\)', '\\\\(S_{44}\\\\)',\n'\\\\(M_{22}^-\\\\)', '\\\\(M_{22}^+\\\\)', '\\\\(S_{55}\\\\)', '\\\\(S_{66}\\\\)', '\\\\(M_{33}^-\\\\)', '\\\\(M_{33}^+\\\\)'];\n\n\n/**\n                                                                                                          * @const name of p1 without delimiters\n                                                                                                          * @type {string[]}\n                                                                                                          */\nvar p1Name_raw = [\n'S_{11}', 'S_{22}', 'M_{11}^-', 'M_{11}^+', 'S_{33}', 'S_{44}', 'M_{22}^-', 'M_{22}^+', 'S_{55}', 'S_{66}',\n'M_{33}^-', 'M_{33}^+'];\n\n\n/**\n                          * converts p1 (p with + or - for metallic tubes) to correlated p.\n                          * @param {int} p1 - input p1\n                          * @returns {int} p\n                          */\nvar p1ToP = function p1ToP(p1) {return [0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8][p1];};\n\n/**\n                                                                                    * converts p to its lesser value in a pair (S11 and S22 will be converted to S11, etc.).\n                                                                                    * @param {int} p - input p\n                                                                                    * @returns {int} lesser p\n                                                                                    */\nvar pToLesser = function pToLesser(p) {return [0, 0, 2, 3, 3, 5, 6, 6, 9][p];};\n\n/**\n                                                                                 * converts p1 to its lesser value in a pair (M11+ and M11- will be converted to M11-, etc.).\n                                                                                 * @param {int} p1 - input p1\n                                                                                 * @returns {int} lesser p1\n                                                                                 */\nvar p1ToLesser = function p1ToLesser(p1) {return p1 % 2 === 0 ? p1 : p1 - 1;};\n\n\nvar Dt = function Dt(n, m, type) {return (type !== 4 ? 0.142 : 0.144) * Math.sqrt(3 * (n * n + n * m + m * m)) / Math.PI;};\nvar Theta = function Theta(n, m) {return Math.atan(Math.sqrt(3) * m / (2 * n + m));};\nvar Mod = function Mod(n, m) {return (2 * n + m) % 3;};\n\n/**\n                                                         * get if a p value or a pair of (n, m) value is associated to a metallic tube.\n                                                         * @returns {boolean} if it is metallic\n                                                         */\nvar isMetal = function isMetal() {\n  var isMetalP = function isMetalP(p) {return (p + 1) % 3 === 0;};\n  var isMetalNM = function isMetalNM(n, m) {return Mod(n, m) === 0;};\n  return arguments.length === 2 ?\n  isMetalNM(arguments[0], arguments[1]) :\n  isMetalP(arguments[0]);\n};\n\n/**\n    * get RBM parameters (A, B) in the formula wRBM = A / dt + B of specific p and type of environment.\n    * @param {int} p - specific p\n    * @param {int} type - specific type of environment\n    * @returns {Object} object of {a: number, b: number}\n    */\nfunction getRBMParameters(p, type) {var\n  Param =\n  function Param(a, b) {_classCallCheck(this, Param);this.a = a;this.b = b;};\n\n  switch (type) {\n    case 0:switch (p) {\n        case 0:case 1:return new Param(204, 27);\n        case 2:return new Param(200, 26);\n        default:return new Param(228, 0);}\n\n    case 1:return new Param(235.9, 5.5);\n    case 2:return new Param(217.8, 15.7);\n    case 3:return new Param(227.0, 0.3);\n    case 4:return new Param(223.5, 12.5);\n    case 5:return new Param(218, 18.3);\n    default:throw new Error('invalid type');}\n\n}\n\nfunction wRBM2Dt(wRBM, p, type) {\n  var ab = getRBMParameters(p, type);\n  return ab.a / (wRBM - ab.b);\n}\n\nfunction dt2RBM(dt, p, type) {\n  var ab = getRBMParameters(p, type);\n  return ab.a / dt + ab.b;\n}\n\nvar getEnergy = function getEnergy(dt, theta, p, type, mod) {return getEnergyFromCos3Theta(dt, Math.cos(3 * theta), p, type, mod);};\n\n/**\n                                                                                                                                      * inverse of getCos3Theta, calculates transition energy from tube diameter and Math.cos(3 * chiral_angle)\n                                                                                                                                      * @param {number} dt - tube diameter\n                                                                                                                                      * @param {number} cos3Theta - Math.cos(3 * chiral_angle)\n                                                                                                                                      * @param {int} p - p of transition type\n                                                                                                                                      * @param {int} type - code of environment\n                                                                                                                                      * @param {int} mod - mod of the tube, -1/0 for metallic -/+, 1/2 for semiconducting MOD1/MOD2\n                                                                                                                                      * @returns {number} transition energy\n                                                                                                                                      */\nfunction getEnergyFromCos3Theta(dt, cos3Theta, p, type, mod) {\n  var r = void 0; // return value\n  if (isMetal(p) && mod > 0)\n  throw new Error('mod should be in accordance with p');\n  if (type <= 2) {\n\n    if (p >= 9)\n    throw new Error('higher than S66 not available');\n    var derivative = -type0Params[p][0] / (dt * dt) + 2 * type0Params[p][1] / (dt * dt * dt);\n    if (derivative > 0) // 1st derivative\n      throw new Error('dt');\n    if (isMetal(p))\n    r = type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) +\n    type0Params[p][2] / (dt * dt) * cos3Theta * (mod * 2 + 1);\n    // mod * 2 + 1 <==> mod === 0 ? 1 : -1\n    else\n      r = type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) +\n      type0Params[p][2] / (dt * dt) * cos3Theta * (p % 3 === mod % 2 ? -1 : 1);\n    r -= type === 1 ? 0.04 : type === 2 ? 0.1 : 0;\n\n  } else if (type === 3) {\n\n    if (p >= 6)\n    throw new Error('higher than M22 not available for Super-Growth');\n    var a = 1.074,b = 0.467,c = 0.812;\n    var sgE = function sgE(extMod) {return a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) +\n      type3Params[p][extMod] / (dt * dt) * cos3Theta + (\n      p > 2 ? 0.059 * (p + 1) / dt : 0);}; // extra for larger than M11; warning: p + 1\n    if (isMetal(p))\n    r = sgE(mod + 1); // 0(Mii+) -> 1, -1(Mii-) -> 0\n    else\n      r = sgE(mod - 1); // 1(MOD1) -> 0, 2(MOD2) -> 1\n\n  } else if (type === 4 || type === 5) {\n\n    if (p === 0)\n    r = 1 / (0.1270 + 0.8606 * dt) + (mod === 1 ? 0.04575 : -0.08802) / (dt * dt) * cos3Theta;else\n    if (p === 1)\n    r = 1 / (0.1174 + 0.4644 * dt) + (mod === 1 ? -0.1829 : 0.1705) / (dt * dt) * cos3Theta;else\n\n    throw new Error('only S11 and S22 are available for SDS-dispersed or ssDNA dispersed');\n    r -= type === 5 ? 0.02 : 0;\n\n  } else throw new Error('invalid type');\n\n  return r;\n}\n\n/**\n   * inverse of getEnergyFromCos3Theta(), get Math.cos(3 * chiral_angle) from transition energy and tube diameter.\n   * @param {number} dt - tube diameter\n   * @param {number} val - transition energy\n   * @param {int} p - p of transition type\n   * @param {int} type - code of environment\n   * @returns {number[]} cos3Theta as [val_MOD1, val_MOD2] or [val_-, val_+]\n   */\nfunction getCos3Theta(val, dt, p, type) {\n\n  var r = [-1, -1];\n\n  if (type <= 2) {\n\n    if (p >= 9)\n    throw new Error('higher than S66 not available');\n    val += type === 1 ? 0.04 : type === 2 ? 0.1 : 0;\n    if (isMetal(p)) {\n      r[0] = (type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val) / type0Params[p][2] * (dt * dt);\n      r[1] = -(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val) / type0Params[p][2] * (dt * dt);\n    } else {\n      r[0] = -(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val) /\n      type0Params[p][2] * (dt * dt) * (p % 3 === 1 % 2 ? -1 : 1);\n      r[1] = -(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val) /\n      type0Params[p][2] * (dt * dt) * (p % 3 === 2 % 2 ? -1 : 1);\n    }\n\n  } else if (type === 3) {\n\n    if (p >= 6)\n    throw new Error('higher than M22 not available for Super-Growth');\n    var a = 1.074,b = 0.467,c = 0.812;\n    var calc = function calc(extMod) {return (val - a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) - (\n      p > 2 ? 0.059 * (p + 1) / dt : 0)) / type3Params[p][extMod] * (dt * dt);};\n    r[0] = calc(0); //Mii- or MOD1\n    r[1] = calc(1);\n\n  } else if (type === 4 || type === 5) {\n\n    val += type === 5 ? 0.02 : 0;\n    if (p === 0) {\n      r[0] = (val - 1 / (0.1270 + 0.8606 * dt)) / 0.04575 * (dt * dt); // MOD1\n      r[1] = (val - 1 / (0.1270 + 0.8606 * dt)) / -0.08802 * (dt * dt);\n    } else if (p === 1) {\n      r[0] = (val - 1 / (0.1174 + 0.4644 * dt)) / -0.1829 * (dt * dt); // MOD1\n      r[1] = (val - 1 / (0.1174 + 0.4644 * dt)) / 0.1705 * (dt * dt);\n    } else throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\n\n  } else throw new Error('invalid type');\n\n  r[0] = parseFloat(r[0].toFixed(4)); // 4 digits\n  r[1] = parseFloat(r[1].toFixed(4));\n  if (r[0] > 1 || r[0] < 0)\n  r[0] = -1;\n  if (r[1] > 1 || r[1] < 0)\n  r[1] = -1;\n  return r;\n\n}\n\n/**\n   * get sum of paired transition energies from their splitting and RBM frequency.\n   * @param {number} splitting - (S22 - S11) or (M11+ - M11-), or something similar\n   * @param {number} wRBM - RBM frequency\n   * @param {int} pLesser - the smaller one of the p value of the 2 transition energies\n   * @param {int} type - environment\n   * @returns {(number|null)} average or null if invalid\n   */\nfunction getAverage(splitting, wRBM, pLesser, type) {\n\n  var cos3ThetaMax = 1.5;\n\n  var dt = wRBM2Dt(wRBM, pLesser, type);\n\n  if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one');\n  if (type <= 2) {\n    if (pLesser >= 9)\n    throw new Error('higher than S66 not available');\n\n    if (isMetal(pLesser)) {\n\n      var cos3Theta = dt * dt * splitting / 2 * type0Params[pLesser][2];\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax) return null;\n      try {\n        return (\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, -1) +\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, 0)) /\n        2;\n      } catch (err) {\n        if (err.message === 'dt')\n        return null;else\n        throw err;\n      }\n    } else {\n      var pLarger = pLesser + 1;\n      var delta = function delta(x) {return type0Params[pLarger][x] - type0Params[pLesser][x];};\n      var mod = 1;\n      var _cos3Theta = (splitting * dt * dt - delta(0) * dt + delta(1)) / (\n      type0Params[pLarger][2] * (pLarger % 3 === mod % 2 ? -1 : 1) -\n      type0Params[pLesser][2] * (pLesser % 3 === mod % 2 ? -1 : 1));\n\n      if (_cos3Theta < 0) {\n        mod = 2;\n        _cos3Theta = -_cos3Theta;\n      }\n      if (_cos3Theta > cos3ThetaMax) return null;\n      try {\n        return (\n        getEnergyFromCos3Theta(dt, _cos3Theta, pLarger, type, mod) +\n        getEnergyFromCos3Theta(dt, _cos3Theta, pLesser, type, mod)) /\n        2;\n      } catch (err) {\n        if (err.message === 'dt')\n        return null;else\n        throw err;\n      }\n    }\n  } else if (type === 3) {\n    var a = 1.074,b = 0.467,c = 0.812;\n    var sgE = function sgE(p) {return a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) + (\n      p > 2 ? 0.059 * (p + 1) / dt : 0);};\n\n    if (isMetal(pLesser)) {\n\n      var _cos3Theta2 = splitting * dt * dt / (type3Params[pLesser][1] - type3Params[pLesser][0]);\n      if (_cos3Theta2 < 0 || _cos3Theta2 > cos3ThetaMax)\n      return null;\n      return (\n      getEnergyFromCos3Theta(dt, _cos3Theta2, pLesser, type, -1) +\n      getEnergyFromCos3Theta(dt, _cos3Theta2, pLesser, type, 0)) /\n      2;\n\n    } else {\n\n      var _pLarger = pLesser + 1;\n      var _mod = 1;\n      if (pLesser >= 6)\n      throw new Error('higher than M22 not available for Super-Growth');\n      var _cos3Theta3 = (splitting + sgE(pLesser) - sgE(_pLarger)) * dt * dt / (\n      type3Params[_pLarger][_mod - 1] - type3Params[pLesser][_mod - 1]);\n\n      if (_cos3Theta3 < 0 || _cos3Theta3 > cos3ThetaMax) {\n        _mod = 2;\n        _cos3Theta3 = (splitting + sgE(pLesser) - sgE(_pLarger)) * dt * dt / (\n        type3Params[_pLarger][_mod - 1] - type3Params[pLesser][_mod - 1]);\n      }\n      if (_cos3Theta3 < 0 || _cos3Theta3 > cos3ThetaMax)\n      return null;\n      return (\n      getEnergyFromCos3Theta(dt, _cos3Theta3, _pLarger, type, _mod) +\n      getEnergyFromCos3Theta(dt, _cos3Theta3, pLesser, type, _mod)) /\n      2;\n    }\n\n  } else if (type === 4 || type === 5) {\n\n    if (pLesser !== 0)\n    throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\n    var _mod2 = 1;\n    var _cos3Theta4 = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt))) *\n    dt * dt / (-0.1829 - 0.04575);\n\n    if (_cos3Theta4 > cos3ThetaMax || _cos3Theta4 < 0) {\n      _mod2 = 2;\n      _cos3Theta4 = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt))) *\n      dt * dt / (0.1705 - -0.08802);\n    }\n    if (_cos3Theta4 > cos3ThetaMax || _cos3Theta4 < 0)\n    return null;\n\n    return (\n    getEnergyFromCos3Theta(dt, _cos3Theta4, 1, type, _mod2) +\n    getEnergyFromCos3Theta(dt, _cos3Theta4, 0, type, _mod2)) /\n    2;\n  } else\n  throw new Error('invalid type');\n}\n\n/**\n   * get a list of standard dots in a plot of a certain p (the smaller in a pair) and type\n   * @param {int} pLesser - the smaller p in a pair\n   * @param {int} type - type of the environment\n   * @returns {number[][]} array of [n, m, x, y] where (n, m) is the chiral index and (x, y) is the coordinates\n   */\nfunction getList(pLesser, type) {\n\n  var li = [];\n  var nMin = 5,nMax = 50;\n\n  if (!isMetal(pLesser)) {\n    if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one, e.g. S11 rather than S22');\n    for (var n = nMin; n < nMax; n++) {\n      for (var m = 0; m <= n; m++) {\n\n        if (2 * n + m > seriesThreshold) break;\n        try {\n          if (!isMetal(n, m)) {\n            var dl = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, Mod(n, m));\n            var dh = getEnergy(Dt(n, m, type), Theta(n, m), pLesser + 1, type, Mod(n, m));\n            li.push([n, m, (dh + dl) / 2, dh - dl]);\n          }\n        } catch (err) {\n          if (err.message !== 'dt') throw err;\n        }\n      }}\n  } else {\n    for (var _n = nMin; _n < nMax; _n++) {\n      for (var _m = 0; _m <= _n; _m++) {\n\n        if (2 * _n + _m > seriesThreshold) break;\n        try {\n          if (isMetal(_n, _m)) {\n            var _dl = getEnergy(Dt(_n, _m, type), Theta(_n, _m), pLesser, type, -1);\n            var _dh = getEnergy(Dt(_n, _m, type), Theta(_n, _m), pLesser, type, 0);\n            li.push([_n, _m, (_dh + _dl) / 2, _dh - _dl]);\n          }\n        } catch (err) {\n          if (err.message !== 'dt') throw err;\n        }\n      }}\n  }\n  return li;\n}\n\n/**\n   * get an parameter array used to plot RBM contour lines\n   * @param {int} pLesser - the smaller p in a pair\n   * @param {int} type - type of the environment\n   * @return {{rbmLabel: number[], rbm: number[][][]}} rbm: RBM points array, rbmLabel: associated RBM value array\n   */\nfunction getRBMArray(pLesser, type) {\n\n  var d = { rbmLabel: [], rbm: [] }; // return\n\n  var cos3ThetaMax = 60;\n  var wRBMMin = 70,wRBMMax = 350;\n  if (!isMetal(pLesser) && isMetal(pLesser + 1))\n  throw new Error('p should be the smaller one, e.g. S11 rather than S22');\n\n  for (var rbmFreq = wRBMMin; rbmFreq <= wRBMMax; rbmFreq += 10) {\n\n    var dt = wRBM2Dt(rbmFreq, pLesser, type);\n    var t = [];\n    try {\n      if (isMetal(pLesser)) {\n        var plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 0);\n        var minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, -1);\n        t.push([(plus + minus) / 2, plus - minus]);\n        plus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, 0);\n        minus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, -1);\n        t.push([(plus + minus) / 2, plus - minus]);\n        d.rbmLabel.push(rbmFreq);\n        d.rbm.push(t);\n      } else {\n        var _plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 1); //should it be higher?\n        var _minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 1);\n        t.push([(_plus + _minus) / 2, _plus - _minus]);\n        _plus = getEnergyFromCos3Theta(dt, 0, pLesser + 1, type, 2);\n        _minus = getEnergyFromCos3Theta(dt, 0, pLesser, type, 2);\n        t.push([(_plus + _minus) / 2, _plus - _minus]);\n        _plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 2);\n        _minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 2);\n        t.push([(_plus + _minus) / 2, _plus - _minus]);\n        d.rbmLabel.push(rbmFreq);\n        d.rbm.push(t);\n      }\n    }\n    catch (err)\n    {\n      if (err.message === 'dt') break;else\n      throw err;\n    }\n  }\n\n  return d;\n}\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n'use strict';\n\nvar isUnparsable = function isUnparsable(e) {return isNaN(parseFloat(e));};\n\n/**\n                                                                             * Get assigned results to be processed for plotting.\n                                                                             * @param {Object} inputParams - input parameters\n                                                                             * @param {int} inputParams.p1 - p denoting transition type associated with val1\n                                                                             * @param {(string|null)} inputParams.val1 - null-able or empty-able string of transition energy 1\n                                                                             * @param {int} inputParams.p2 - p denoting transition type associated with val2\n                                                                             * @param {(string|null)} inputParams.val2 - null-able or empty-able string of transition energy 2\n                                                                             * @param {(string|null)} inputParams.rbm - null-able or empty-able string of RBM frequency\n                                                                             * @param {int} inputParams.type - environment type\n                                                                             * @returns {Object} assigned results\n                                                                            */\nfunction getPlotParams(inputParams) {\n  var decimalDigits = function decimalDigits(d) {return d.split('.')[1].length;};\n\n  if (isUnparsable(inputParams.val1) && isUnparsable(inputParams.val2)) {\n    throw new Error('Unauthorized Access');\n  } else if (isUnparsable(inputParams.val1) || isUnparsable(inputParams.val2)) {\n    if (isUnparsable(inputParams.rbm)) throw new Error('Unauthorized Access');\n    inputParams.uncertainty = 2.0 / Math.pow(10,\n    decimalDigits(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1));\n    return E1R1(inputParams);\n  } else {\n    inputParams.uncertainty = 2.0 / Math.pow(10,\n    Math.min(decimalDigits(inputParams.val1), decimalDigits(inputParams.val2)));\n\n    return E2(inputParams);\n  }\n}\n\n/**\n   * Get assigned results of 1 energy 1 RBM frequency input.\n   * @param {Object} inputParams - input parameters\n   * @param {int} inputParams.p1 - p denoting transition type associated with val1\n   * @param {(string|null)} inputParams.val1 - null-able or empty-able string of transition energy 1\n   * @param {int} inputParams.p2 - p denoting transition type associated with val2\n   * @param {(string|null)} inputParams.val2 - null-able or empty-able string of transition energy 2\n   * @param {string} inputParams.rbm - parseable string (to float) of RBM frequency\n   * @param {int} inputParams.type - environment type\n   * @returns {Object} assigned results\n   */\nfunction E1R1(inputParams) {\n\n  var p1 = isUnparsable(inputParams.val1) ? inputParams.p2 : inputParams.p1,type = inputParams.type,p = p1ToP(p1);\n  var val = parseFloat(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1); // float\n  var wRBM = parseFloat(inputParams.rbm); // float, integrity checked in getPlotParam\n\n  var dt = wRBM2Dt(wRBM, p, type);\n  var cos = getCos3Theta(val, dt, p, type);\n  var resultString = '';\n  var error = function error() {return Assign({\n      bluePoint: null,\n      point: [val, 0.23],\n      pLesser: pToLesser(p),\n      type: type,\n      pointType: 'none',\n      p1Lesser: p1ToLesser(p1),\n      resultString: resultString,\n      uncertainty: 0.0002 });};\n\n\n  if (cos[0] === -1 && cos[1] === -1) {\n    resultString += 'Invalid input: out of range.';\n    return error();\n  }\n\n  var pAnother = void 0,modAnother = void 0;\n  if (isMetal(p)) {\n    if (p1 % 4 - 3 !== (cos[0] === -1 ? 0 : -1)) {\n      resultString += 'Invalid input: You may have mistaken ' + p1Name[p1 + 5 - p1 % 4 * 2] + ' for ' + p1Name[p1] + '.';\n      return error();\n    }\n    pAnother = p;\n    modAnother = cos[0] === -1 ? -1 : 0;\n  } else\n  {\n    pAnother = isMetal(p + 1) ? p - 1 : p + 1;\n    modAnother = cos[0] === -1 ? 2 : 1; // === mod1\n  }\n\n  var valAnother = void 0;\n  try {\n    valAnother = getEnergyFromCos3Theta(dt, cos[0] === -1 ? cos[1] : cos[0], pAnother, type, modAnother);\n  }\n  catch (err) {\n    if (err.message === 'dt') {\n      resultString += 'Invalid input: out of range, diameter too small.';\n      return error();\n    }\n    throw err;\n  }\n  if (isMetal(p) && modAnother === -1 || !isMetal(p) && p > pAnother) {var _ref =\n    [pAnother, p];p = _ref[0];pAnother = _ref[1];var _ref2 =\n    [valAnother, val];val = _ref2[0];valAnother = _ref2[1];\n  }\n  var x = (val + valAnother) / 2,y = valAnother - val;\n  return Assign({\n    bluePoint: null,\n    point: [x, y],\n    pLesser: p,\n    type: type,\n    pointType: 'green',\n    p1Lesser: p1ToLesser(p1),\n    resultString: resultString,\n    uncertainty: inputParams.uncertainty },\n  modAnother);\n\n}\n\n/**\n   * Get assigned results of 2 energy (with/without RBM frequency) input.\n   * @param {Object} inputParams - input parameters\n   * @param {int} inputParams.p1 - p denoting transition type associated with val1\n   * @param {string} inputParams.val1 - parseable string (to float) of transition energy 1\n   * @param {int} inputParams.p2 - p denoting transition type associated with val2\n   * @param {string} inputParams.val2 - parseable string (to float) of transition energy 2\n   * @param {(string|null)} inputParams.rbm - null-able or empty-able string of RBM frequency\n   * @param {int} inputParams.type - environment type\n   * @returns {Object} assigned results\n   */\nfunction E2(inputParams) {\n\n  var resultString = '';\n  var p1 = inputParams.p1,p2 = inputParams.p2,type = inputParams.type;\n  var val1 = parseFloat(inputParams.val1),val2 = parseFloat(inputParams.val2);\n  var p_1 = p1ToP(p1),p_2 = p1ToP(p2);\n  var rbm = inputParams.rbm; // string\n\n  // don't use 'with' block\n  if (p1 > p2) {var _ref3 =\n    [p_2, p_1];p_1 = _ref3[0];p_2 = _ref3[1];var _ref4 =\n    [val2, val1];val1 = _ref4[0];val2 = _ref4[1];var _ref5 =\n    [p2, p1];p1 = _ref5[0];p2 = _ref5[1];\n  }\n\n  if (isMetal(p_2) !== isMetal(p_1)) {\n    throw new Error('invalid form submission');\n  }\n\n  if (p2 - p1 === 1) {\n    var bluePoint = null;\n    if (!isUnparsable(rbm)) {\n      var average = getAverage(val2 - val1, parseFloat(rbm), p_1, type);\n      if (average !== null) {\n        bluePoint = [average, val2 - val1];\n      } else\n      {\n        resultString += 'Invalid input: RBM value out of range. Only transition energies are processed. <br/ >';\n      }\n    }\n    return Assign({\n      point: [(val1 + val2) / 2, val2 - val1],\n      pLesser: p_1,\n      type: type,\n      pointType: 'red',\n      bluePoint: bluePoint,\n      p1Lesser: p1,\n      resultString: resultString,\n      uncertainty: inputParams.uncertainty });\n\n  }\n\n}\n\n/**\n   * Get assigned results of pre-processed parameters.\n   * @param {Object} params - pre-processed parameters\n   * @param {int} mod=-1 - transferred pre-processed mod in E1R1()\n   * @param {array} params.point - point\n   * @param {string} params.pointType - type of the point, 'red' or 'green'\n   * @param {int} params.pLesser - smaller one of the p in the plot\n   * @param {int} params.p1Lesser - smaller one of the p1 in the plot\n   * @param {int} params.type - environment type\n   * @param {string} params.resultString - output result\n   * @param {(number[]|null)} params.bluePoint blue point if exists\n   * @param {number} params.uncertainty - uncertainty of the input\n   * @returns {Object} assigned results\n   */\nfunction Assign(params) {var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n  // params: plotParams\n  // x: average y: splitting\n\n  var uncertainty = params.uncertainty;\n  var dxMin = -1,dxMax = -1,dyMin = -1,dyMax = -1;\n  var Dist = function Dist(x1, y1, x2, y2) {return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) * 25);};\n  var Dist_ = function Dist_(e) {return Dist(e[2], e[3], params.point[0], params.point[1]);};\n  var deltaX = 0.6,\n  maxY = isMetal(params.pLesser) ? 0.6 : params.point[1] + 0.6,\n  minY = isMetal(params.pLesser) ? -0.1 : params.point[1] - 0.6;\n\n  function setBounds(dxMin_, dxMax_, dyMin_, dyMax_) {\n    dxMin = dxMin_;\n    dxMax = dxMax_;\n    dyMin = dyMin_;\n    dyMax = dyMax_;\n  }\n\n  // https://github.com/mihaifm/linq, many thanks to you!\n\n  params.all = Enumerable.from(getList(params.pLesser, params.type)).\n  where(function (e) {return e[2] >= params.point[0] - deltaX && e[2] <= params.point[0] + deltaX &&\n    e[3] <= maxY && e[3] >= minY;}).\n  toArray();\n\n  var query = Enumerable.from(params.all).\n  where(function (e) {return (\n      (mod === -1 || isMetal(params.pLesser) || mod === Mod(e[0], e[1])) &&\n      params.point[0] - e[2] >= dxMin && params.point[0] - e[2] <= dxMax &&\n      params.point[1] - e[3] >= dyMin && params.point[1] - e[3] <= dyMax);});\n\n\n  setBounds(-uncertainty, uncertainty, -uncertainty, uncertainty);\n  var uc = query.toArray(); // query once to get uncertainty range\n\n  function processOutput() {\n    params.result = query.orderBy(Dist_).toArray();\n    for (var i = 0; i < params.result.length; i++) {\n      params.resultString += '\\n        <b>(' +\n      Math.round(params.result[i][0]) + ',' + Math.round(params.result[i][1]) + ')</b>\\n        ' + (\n      i !== params.result.length - 1 ? ', ' : '');}\n    params.resultString += '</span>';\n  }\n\n  if (params.pointType === 'none') {\n    params.ar = AssignResult.error;\n    params.result = [];\n    return params;\n  }\n\n  if (uncertainty > 0.2) {\n    params.resultString = 'Input uncertainty too large. Please give more significant figures.';\n    params.ar = AssignResult.error;\n    params.result = [];\n    return params;\n  }\n\n  if (params.pointType === 'red') {\n    if (params.bluePoint != null) {\n      if (params.bluePoint[0] - params.point[0] < 0.02) setBounds(-0.008, 0.008, -0.015, 0.015);else\n      setBounds(-0.030, -0.005, -0.015, 0.015); // don't change at this moment\n    } else setBounds(-0.020, 0.008, -0.015, 0.015);\n\n    if (query.count() === 1 && uc.length <= 1) {\n      params.ar = AssignResult.accurate;\n      params.resultString += 'The assignment result is:<br /><span style=\"font-size: 28px;\">';\n      processOutput();\n      return params;\n    }\n    setBounds(-0.040, 0.0126, -0.030, 0.030);\n  } else setBounds(-0.070, 0.070, -0.040, 0.040);\n\n  query.union(uc);\n\n  if (query.count() > 0) {\n    params.ar = AssignResult.possible;\n    params.resultString += 'The likely assignments include:<br /><span style=\"font-size: 28px;\">';\n    processOutput();\n    return params;\n  }\n\n  /*\n    * use the green criteria and query again for no match.\n    * and it's easy to see that green point, if not returned in the previous step,\n    * will not give results in this step.\n    */\n\n  setBounds(-0.070, 0.070, -0.040, 0.040);\n  var tmp = Enumerable.from(params.all).orderBy(Dist_).toArray();\n  if (Dist_(tmp[0]) / Dist_(tmp[1]) <= 0.5 && query.count() !== 0) {\n    params.ar = AssignResult.impossible;\n    query = Enumerable.from([tmp[0]]);\n    params.resultString += 'No match. The most possible assignment result is:<br /><span style=\"font-size: 28px;\">';\n    processOutput();\n    return params;\n  }\n\n  params.ar = AssignResult.error;\n  params.resultString = 'Invalid input: out of range. Please check your input.';\n  params.result = [];\n  return params;\n}\n\nfunction processOutput(params) {\n\n  // process RBM\n\n  var yMax = isMetal(params.pLesser) ? 0.51 : params.point[1] + 0.4;\n  var xMin = params.point[0] - 0.5,xMax = params.point[0] + 0.5;\n  var s = getRBMArray(params.pLesser, params.type); // {rbm, rbmLabel}\n  var rbm = [];\n  var rbmLabel = [];\n  var rbmPos = [];\n  var between = function between(xy, r1, r2) {return xy >= r1 && xy <= r2 || xy >= r2 && xy <= r1;};\n  for (var i = 0; i < s.rbm.length; i++) {\n    var a = s.rbm[i];\n    var t = void 0;\n    if (a.length === 2)\n    t = (a[0][0] - a[1][0]) * (yMax - a[1][1]) / (a[0][1] - a[1][1]) + a[1][0];else\n    {\n      var u = void 0;\n      if (between(yMax, a[1][1], a[0][1]))\n      u = 0;else\n        // if between(a[1][1], a[2][1])\n        u = 2;\n      t = (a[u][0] - a[1][0]) * (yMax - a[1][1]) / (a[u][1] - a[1][1]) + a[1][0];\n    }\n    if (between(t, xMax, xMin)) {\n      rbm.push(s.rbm[i]);\n      rbmLabel.push(s.rbmLabel[i]);\n      rbmPos.push(t);\n    }\n  }\n  params.rbm = rbm;\n  params.rbmLabel = rbmLabel;\n  params.rbmPos = rbmPos;\n\n  // process all\n\n  var all = params.all; // you know, lazy evaluation\n  var q = Enumerable.from(all).\n  groupBy(\n  function (e) {return 2 * e[0] + e[1];}, // key\n  function (e) {return e;}, // group element\n  function (key, group) {return { key: key, value: group.orderBy(function (e) {return e[0];}).toArray() };});\n  // use default compare method\n\n  params.all = q.select(function (e) {return e.value.map(function (ee) {return [ee[2], ee[3]];});}).toArray();\n  params.allLabel = q.select(function (e) {return e.value.map(function (ee) {return [ee[0], ee[1]];});}).toArray();\n\n  // process result\n\n  var result = params.result;\n  params.result = result.map(function (e) {return [e[2], e[3]];});\n  params.resultLabel = result.map(function (e) {return [e[0], e[1]];});\n\n  params.isMetal = isMetal(params.pLesser);\n  params.yAxisLabel = '\\\\(' + p1Name_raw[params.p1Lesser + 1] + '-' + p1Name_raw[params.p1Lesser] + '\\\\ (\\\\mathrm{eV})\\\\)';\n  params.xAxisLabel = '\\\\((' + p1Name_raw[params.p1Lesser + 1] + '+' + p1Name_raw[params.p1Lesser] + ')/2\\\\ (\\\\mathrm{eV})\\\\)';\n\n\n  // select g.OrderBy(elem => elem[0]);\n  // note that average energy may not increase monotonously as n in (n,m) increases.\n  // thus elem => elem[2] is wrong.\n  // test: S11 = 1.420, S22 = 2.134 as (6,4), see branch 2n + m = 16\n\n\n  return params;\n}\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n'use strict';\n\nfunction drawPlot(placeholder, params) {\n\n  var defaultRadius = 4,xMin = params.point[0] - 0.5,xMax = params.point[0] + 0.5;\n  var yMin = params.isMetal ? -0.01 : params.point[1] - 0.4,yMax = params.isMetal ? 0.45 : params.point[1] + 0.4;\n  var font = {\n    size: 20,\n    lineHeight: 20,\n    family: 'serif' };\n\n  var options = {\n    xaxis: {\n      // aver\n      show: true,\n      position: 'bottom',\n      min: xMin,\n      max: xMax,\n      font: font,\n      tickLength: 10,\n      tickColor: 'rgb(255, 0, 0)',\n      color: 'rgb(255, 0, 0)' },\n\n    yaxis: {\n      show: true,\n      min: yMin,\n      max: yMax,\n      font: font,\n      tickLength: 10,\n      tickColor: 'rgb(0, 0, 0)',\n      color: 'rgb(0, 0, 0)' },\n\n    series: {\n      hoverable: true\n      // shadowSize: 0\n    },\n    grid: {\n      borderColor: {\n        top: 'rgb(0, 0, 255)',\n        bottom: 'rgb(255, 0, 0)',\n        left: 'rgb(0, 0, 0)',\n        right: 'rgb(0, 0, 0)' },\n\n      hoverable: true,\n      minBorderMargin: 0 } };\n\n\n\n  var series = [];\n  for (var i = 0; i < params.rbm.length; i++) {\n    series.push({\n      color: 'rgb(208, 208, 208)', // use the shadow\n      data: params.rbm[i],\n      shadowSize: 5,\n      hoverable: false });}\n\n  var laser = [1240 / 785, 1240 / 633, 1240 / 532];\n  var laser_color = ['rgb(136, 136, 136)', 'rgb(245, 0, 0)', 'rgb(12, 127, 15)'];\n\n  for (var _i = 0; _i < laser.length; _i++) {\n    series = series.concat([{\n      id: 'laser' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, 2 * (-10 - laser[_i])], [10, 2 * (10 - laser[_i])]],\n      shadowSize: 0 },\n    {\n      id: 'laser_minus' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, -2 * (-10 - laser[_i])], [10, -2 * (10 - laser[_i])]],\n      shadowSize: 0 },\n    {\n      fillBetween: 'laser' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, 2 * (-10 - (laser[_i] - 0.1))], [10, 2 * (10 - (laser[_i] - 0.1))]], // 100 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0 } },\n\n    {\n      fillBetween: 'laser_minus' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, -2 * (-10 - (laser[_i] - 0.1))], [10, -2 * (10 - (laser[_i] - 0.1))]], // 100 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0 } },\n\n    {\n      fillBetween: 'laser' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, 2 * (-10 - (laser[_i] + 0.1))], [10, 2 * (10 - (laser[_i] + 0.1))]], // 200 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0 } },\n\n    {\n      fillBetween: 'laser_minus' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, -2 * (-10 - (laser[_i] + 0.1))], [10, -2 * (10 - (laser[_i] + 0.1))]], // 200 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0 } }]);\n\n\n  }\n\n  for (var _i2 = 0; _i2 < params.all.length; _i2++) {\n    var mod_i = (params.allLabel[_i2][0][0] * 2 + params.allLabel[_i2][0][1]) % 3;\n    series.push({\n      color: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\n      data: params.all[_i2],\n      points: {\n        show: true,\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2 : defaultRadius, //15 meV\n        symbol: params.isMetal ? 'circle' : mod_i === 2 ? 'square' : 'triangle' },\n\n      lines: {\n        show: true },\n\n      point_labels: params.allLabel[_i2],\n      hoverable: true });\n\n  }\n  for (var _i3 = 0; _i3 < params.result.length; _i3++) {\n    var _mod_i = (params.resultLabel[_i3][0] * 2 + params.resultLabel[_i3][1]) % 3;\n    series.push({\n      color: params.isMetal || _mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\n      data: [params.result[_i3]],\n      points: {\n        show: true,\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2 : defaultRadius,\n        symbol: params.isMetal ? 'circle' : _mod_i === 2 ? 'square' : 'triangle',\n        fill: true,\n        fillColor: params.isMetal || _mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)' },\n\n      point_labels: [params.resultLabel[_i3]],\n      hoverable: true });\n\n  }\n\n\n  // blue point is diamond, otherwise square\n  if (params.pointType !== 'none') {\n    series.push({\n      color: params.pointType === 'green' ? 'rgb(12, 180, 15)' : 'rgb(255, 0, 0)',\n      data: [params.point],\n      points: {\n        show: true,\n        symbol: params.pointType === 'green' ? 'diamond' : 'square',\n        radius: defaultRadius,\n        fill: true,\n        fillColor: params.pointType === 'green' ? 'rgba(0, 0, 0, 0)' : 'rgb(255, 0, 0)' },\n\n      hoverable: false });\n\n  }\n  if (params.bluePoint !== null)\n  series.push({\n    color: 'rgb(0, 0, 255)',\n    data: [params.bluePoint],\n    points: {\n      show: true,\n      symbol: 'diamond',\n      radius: defaultRadius,\n      fill: true,\n      fillColor: 'rgba(0, 0, 0, 0)' },\n\n    hoverable: false,\n    shadowSize: 0 });\n\n\n  var $placeholder = $('#' + placeholder);\n  var plot = $.plot($placeholder, series, options);\n\n  var previousPoint = null;\n  $placeholder.bind('plothover', function (event, pos, item) {\n    if (item) {\n      if (previousPoint !== item.dataIndex) {\n        previousPoint = item.dataIndex;\n        $('#tooltip').remove();\n        showTooltip(item.pageX, item.pageY, '(' +\n        item.series.point_labels[item.dataIndex][0] + ', ' + item.series.point_labels[item.dataIndex][1] + ')');\n      }\n    } else {\n      $('#tooltip').remove();\n      previousPoint = null;\n    }\n  });\n\n  if (params.isMetal) {\n    for (var _i4 = 0; _i4 < params.all.length; _i4++) {\n      var s = Math.floor(params.all.length / 2);\n      var p = params.all[_i4][params.all[_i4].length - 1];\n      var p1 = params.allLabel[_i4][params.all[_i4].length - 1];\n      var o = plot.pointOffset({ x: p[0], y: p[1] });\n      var axes = plot.getAxes();\n      var xaxis = axes.xaxis,yaxis = axes.yaxis;\n      if (_i4 % 2 === s % 2 && p[0] <= xaxis.max && p[0] >= xaxis.min &&\n      p[1] <= yaxis.max - 0.05 && p[1] >= yaxis.min + 0.05)\n      $placeholder.append('\\n                    <div class=\"series_label\" style=\"left: ' + (\n      o.left - (_i4 === s ? 60 : 10)) + 'px; top: ' + (o.top - 30) + 'px;\">\\n                        <p>' + (\n      _i4 === s ? '2<i>n</i>+<i>m</i>=' : '') + (p1[0] * 2 + p1[1]) + '</p>\\n                    </div>\\n                ');\n\n\n    }\n  } else {\n    var mid = Math.round(params.all.length / 2);\n    var pMid = params.allLabel[mid][params.all[mid].length - 1];\n    var divMid = Math.floor((pMid[0] * 2 + pMid[1]) / 3); //use ceil, for right is scattered, left is dense\n\n    for (var _i5 = 0; _i5 < params.all.length; _i5++) {\n      var _p = params.all[_i5][params.all[_i5].length - 1];\n      var _p2 = params.allLabel[_i5][params.all[_i5].length - 1];\n      var _o = plot.pointOffset({ x: _p[0], y: _p[1] });\n      var _axes = plot.getAxes();\n      var _xaxis = _axes.xaxis,_yaxis = _axes.yaxis;\n      var div = Math.round((_p2[0] * 2 + _p2[1]) / 3);\n      var mod = (_p2[0] * 2 + _p2[1]) % 3;\n      if (divMid % 2 === div % 2) {\n        if (_p[0] <= _xaxis.max - 0.02 && _p[0] >= _xaxis.min + 0.02 && _p[1] <= _yaxis.max - 0.1 &&\n        _p[1] >= _yaxis.min + 0.1) {\n          var dA = {\n            color: mod === 1 ? '#FF0000' : '#000000',\n            left: _o.left - (divMid === div ? 60 : 10),\n            top: _o.top - (mod === 1 ? -15 :\n            divMid === div && _p[1] <= _yaxis.max - 0.15 && _p[1] >= _yaxis.min + 0.18 ? 60 : 30),\n\n\n            c1: divMid !== div ?\n            '' :\n            (mod === 2 && _p[1] <= _yaxis.max - 0.15 ?\n            '<b>MOD2</b><br/>' :\n            '') + '2<i>n</i>+<i>m</i>=',\n            c2: _p2[0] * 2 + _p2[1],\n            c3: divMid === div && mod === 1 && _p[1] >= _yaxis.min + 0.12 ?\n            '<br/><b>MOD1</b>' :\n            '' };\n\n          $placeholder.append('\\n                        <div class=\"series_label\" style=\"color:' +\n          dA.color + ';left:' + dA.left + 'px;top:' + (dA.top - 0) + 'px;\">\\n                            <p>' +\n          dA.c1 + dA.c2 + dA.c3 + '</p>\\n                        </div>\\n                    ');\n\n          // workaround to let editor know that dA.top is integer\n        }\n      }\n    }\n  }\n\n  for (var _i6 = 0; _i6 < params.rbm.length; _i6++) {\n    if (_i6 % 2 === 0 || params.rbm.length === 1) {\n      var o1 = plot.pointOffset({ x: params.rbmPos[_i6], y: yMax });\n      $placeholder.append('\\n                <div class=\"rbm_label\" style=\"left:' + (\n      o1.left - 15) + 'px;top:' + (o1.top - 30) + 'px;\">\\n                    <p>' +\n      params.rbmLabel[_i6] + '</p>\\n                </div>\\n            ');\n\n\n    }\n  }\n}\n\nfunction showTooltip(x, y, contents) {\n  $('\\n        <div id=\"tooltip\" class=\"tooltip right in\">\\n            <div class=\"tooltip-arrow\" style=\"top: 50%;\"></div>\\n            <div class=\"tooltip-inner\">' +\n\n\n  contents + '</div>\\n        </div>\\n    ').\n\n\n  css({\n    display: 'block',\n    top: y,\n    left: x }).\n  appendTo('body').fadeIn(200);\n}\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n'use strict';\n\nvar timeLoad = performance.now(); // before load\nvar timeStartup = void 0;\n\n$.getScript(navigator.language.substr(0, 2).toLowerCase() !== \"zh\" ?\n\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/MathJax.js\" :\n\"https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js\" +\n\"?config=TeX-AMS_SVG-full,Safe&locale=en\", function () {\n  timeStartup = performance.now();\n  console.log(\"MathJax load takes \" + (timeStartup - timeLoad).toFixed(2));\n});\n\nvar urlParams = {};\n(window.onpopstate = function () {\n  var match = void 0,\n  pl = /\\+/g, // Regex for replacing addition symbol with a space\n  search = /([^&=]+)=?([^&]*)/g,\n  decode = function decode(s) {return decodeURIComponent(s.replace(pl, \" \"));},\n  query = window.location.search.substring(1);\n\n  urlParams = {};\n  while (match = search.exec(query)) {\n    urlParams[decode(match[1])] = decode(match[2]);}\n})();\n\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {\n  $('.selectpicker').selectpicker('mobile');\n}\n\nvar $body = $(\"body\");\n\n/*\n                        * Step 1\n                        */\n\nif ($body.hasClass(\"Step1\")) {\n\n  var $selectType = $(\"#slType\");\n  for (var i = 0; i < typeName.length; i++) {\n    $selectType.append(\"<option value=\\\"\" + i + \"\\\">\" + typeName[i] + \"</option>\");}\n\n  $selectType.selectpicker('val', 0).\n  selectpicker('refresh').\n  on(\"loaded.bs.select\", clearTitle).\n  on('changed.bs.select', clearTitle);\n\n}\n\n/*\n   * Step 2\n   */\n\nif ($body.hasClass('Step2')) {\n\n  var type = parseInt(urlParams['Type']); // '', ' ' will be converted to NaN in this process.\n  if (isNaN(type) || type > 5 || type < 0)\n  location.href = 'Step1.html';\n\n  var $selectP1 = $('#slP1'),$selectP2 = $('#slP2'),_$selectType = $('#slType');\n  var $selectP1P2 = $('#slP1, #slP2');\n\n  $('#title')[0].innerHTML += ' <small>' + typeName[type] + '</small>';\n\n  var $dataTables = $('#dataTables');\n  $dataTables.find(\".type\" + type).removeClass('hidden');\n  for (var _i = 0; _i < 6; _i++) {\n    if (_i === type) continue;\n    $dataTables.find(\".type\" + _i + \".hidden\").remove(); // MathJax will process hidden elements if not removed\n  }\n\n  // generate options\n\n  for (var _i2 = 0; _i2 < p1Name.length; _i2++) {\n    if (type >= 3) {\n      var threshold = type === 3 ? 8 : 2;\n      if (_i2 >= threshold) break;\n    }\n    $selectP1P2.append(\"<option value=\\\"\" + _i2 + \"\\\">\" + p1Name[_i2] + \"</option>\");\n  }\n  for (var _i3 = 0; _i3 < typeName.length; _i3++) {\n    _$selectType.append(\"<option value=\\\"\" + _i3 + \"\\\">\" + typeName[_i3] + \"</option>\");}\n\n  // start recovering\n\n  if (['P1', 'P2', 'Val1', 'Val2', 'RBM'].every(function (e) {return urlParams[e] !== undefined;})) {\n\n    var params = {\n      p1: parseInt(urlParams['P1']), // int\n      p2: parseInt(urlParams['P2']), // int\n      val1: urlParams['Val1'], // empty-able str\n      val2: urlParams['Val2'], // empty-able str\n      rbm: urlParams['RBM'] // empty-able str\n    };\n\n    var valueBetween = function valueBetween(xy, a, b) {return xy >= a && xy <= b;};\n    var val1_ = parseFloat(params.val1),val2_ = parseFloat(params.val2),rbm_ = parseFloat(params.rbm);\n\n    var emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n    if (emptyNum >= 2 || isNaN(params.p1) || isNaN(params.p2) ||\n    !isNaN(val1_) && !valueBetween(val1_, 0, 4) || !isNaN(val2_) && !valueBetween(val2_, 0, 4) ||\n    !isNaN(rbm_) && !valueBetween(rbm_, 30, 500) ||\n    !valueBetween(params.p1, 0, 11) || !valueBetween(params.p2, 0, 11))\n\n    location.href = 'Step1.html';\n\n    $selectP1.selectpicker('val', params.p1);\n    $selectP2.selectpicker('val', params.p2);\n    $('#edVal1').val(params.val1);\n    $('#edVal2').val(params.val2);\n    $('#edRBM').val(params.rbm);\n\n\n  } else if (['P1', 'P2', 'Val1', 'Val2', 'RBM'].every(function (e) {return urlParams[e] !== undefined;}))\n  location.href = 'Step1.html';\n\n  // end validation and recovering\n\n  _$selectType.selectpicker('val', type);\n  $('.selectpicker').selectpicker('refresh');\n\n  $('select').on('loaded.bs.select', clearTitle);\n  $selectP1.on('changed.bs.select', function (e, index) {\n    var i = index - 1;\n    clearTitle(); // only when slP1 changes the title have to be cleared; only active select\n    $selectP2.find('option').each(function () {\n      var value = parseInt($(this).val());\n      if (i % 2 === 0 && value === i + 1 || i % 2 === 1 && value === i - 1)\n      $selectP2.selectpicker('val', value);\n    });\n  });\n\n}\n\n\n/*\n   * Step 3\n   */\n\nif ($body.hasClass('Step3')) {\n\n  // check integrity\n  if (!['Type', 'P1', 'P2', 'Val1', 'Val2', 'RBM'].every(function (e) {return urlParams[e] !== undefined;}))\n  location.href = 'Step1.html';\n\n  var inputParams = {\n    type: parseInt(urlParams['Type']), // int\n    p1: parseInt(urlParams['P1']), // int\n    p2: parseInt(urlParams['P2']), // int\n    val1: urlParams['Val1'], // empty-able str\n    val2: urlParams['Val2'], // empty-able str\n    rbm: urlParams['RBM'] // empty-able str\n  };\n\n  var _valueBetween = function _valueBetween(xy, a, b) {return xy >= a && xy <= b;};\n  var _val1_ = parseFloat(inputParams.val1),_val2_ = parseFloat(inputParams.val2),_rbm_ = parseFloat(inputParams.rbm);\n  // also, '' and ' ' will be converted to NaN in this process.\n\n  var _emptyNum = Number(isNaN(_val1_)) + Number(isNaN(_val2_)) + Number(isNaN(_rbm_));\n  if (_emptyNum >= 2 || isNaN(inputParams.type) || isNaN(inputParams.p1) || isNaN(inputParams.p2) ||\n  !isNaN(_val1_) && !_valueBetween(_val1_, 0, 4) || !isNaN(_val2_) && !_valueBetween(_val2_, 0, 4) ||\n  !isNaN(_rbm_) && !_valueBetween(_rbm_, 30, 500) || !_valueBetween(inputParams.type, 0, 5) ||\n  !_valueBetween(inputParams.p1, 0, 11) || !_valueBetween(inputParams.p2, 0, 11))\n\n  location.href = 'Step1.html';\n\n\n  $('#title')[0].innerHTML += ' <small>' + typeName[inputParams.type] + '</small>';\n\n  var plotParams = processOutput(getPlotParams(inputParams));\n\n  $('#resultDiv').\n  addClass(plotParams.ar !== AssignResult.error ? 'alert-success' : 'alert-danger').\n  html(plotParams.resultString);\n  $('#yAxisLabel').html(plotParams.yAxisLabel);\n  $('#xAxisLabel').html(plotParams.xAxisLabel);\n  $('#' + plotParams.pointType + 'Legend').css('display', '');\n  if (plotParams.bluePoint !== null)\n  $('#blueLegend').css('display', '');\n\n  $(drawPlot('plot-placeholder', plotParams));\n\n}\n\n// functions\n\nfunction clearTitle() {// used in Step1 and Step2\n\n  $('.bootstrap-select').find('button').removeAttr('title');\n}\n\nfunction validate(form) {// used in Step2\n\n  var $hint = $('#hint');\n  var invokeError = function invokeError(msg) {\n    $hint.addClass('alert-danger').\n    html(\"<span class=\\\"glyphicon glyphicon-exclamation-sign\\\" aria-hidden=\\\"true\\\"></span> \" + msg);\n    return false;\n  };\n  var val1_ = parseFloat(form.Val1.value);\n  var val2_ = parseFloat(form.Val2.value);\n  var rbm_ = parseInt(form.RBM.value);\n  var emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n  if (emptyNum >= 2) return invokeError('At least 2 values are required.');else\n  {\n    if (!isNaN(val1_) && (val1_ < 0 || val1_ > 4) ||\n    !isNaN(val2_) && (val2_ < 0 || val2_ > 4) ||\n    !isNaN(rbm_) && (rbm_ < 30 || rbm_ > 500))\n    return invokeError('Please input valid value.');\n    if ($(\"#slP1\").selectpicker('val') === '')\n    return invokeError('Please select the type of transition energy.');\n\n    $(\".selectpicker\").removeAttr('disabled');\n\n    history.replaceState(null, null,\n    'Step2.html?' + ['Type', 'P1', 'Val1', 'P2', 'Val2', 'RBM'].map(function (e) {return e + '=' + form[e].value;}).join('&'));\n    return true;\n  }\n}\n\nfunction changeEdit(p1_lesser, val1, val2) {// used in Step2\n  $(\"#slP1\").selectpicker('val', p1_lesser);\n  $(\"#slP2\").selectpicker('val', p1_lesser + 1);\n  $(\"#edVal1\").val(val1);\n  $(\"#edVal2\").val(val2);\n}\n\nfunction calculate(form) {// used in Step2\n\n  var $calcHint = $('#calculatorHint');\n  var $calcResult = $('#calcResult');\n\n  var invokeError = function invokeError() {\n    $calcHint.html(\"\\n      <div class=\\\"alert-danger hint\\\">\\n        <span class=\\\"glyphicon glyphicon-exclamation-sign\\\" aria-hidden=\\\"true\\\"></span>\\n        No valid result.\\n      </div>\\n    \");\n\n\n\n\n\n    $calcResult.html('');\n  };\n\n  var n = parseInt(form.NCalc.value),m = parseInt(form.MCalc.value),t = parseInt(urlParams['Type']);\n  if (n < m) {;var _ref = [m, n];n = _ref[0];m = _ref[1];}\n  if (isNaN(n) || isNaN(m) || n <= 6 || m <= 0 || 2 * n + m > seriesThreshold) {\n    invokeError();\n    return false;\n  }\n\n  $calcHint.html('');\n  var $resultList = $(\"<tbody></tbody>\");\n  var $plotList = $('<div></div>'); // empty wrapper\n  $calcResult.html('').\n  append($('<table class=\"table table-striped math\" id=\"calcResultList\"></table>').append($resultList)).\n  append($plotList);\n\n  $resultList.append(\"<tr><td>\\\\(d_t\\\\)</td><td>\\\\( \" + Dt(n, m, t).toFixed(3).toString() + \" \\\\ \\\\mathrm{nm}\\\\)</td></tr>\");\n\n  // generate d_t and RBM information\n\n  generateRBMCalculationResult(n, m, t, $resultList);\n\n  // do energy calculation\n\n  var calculatedEnergy = new Array(12);\n  for (var p1 = 0; p1 < 12; p1++) {\n    if (isMetal(p1ToP(p1)) !== isMetal(n, m)) {\n      calculatedEnergy[p1] = -1;\n      continue;\n    }\n    try {\n      calculatedEnergy[p1] = getEnergy(Dt(n, m, t), Theta(n, m), p1ToP(p1), t, isMetal(n, m) ? p1 % 2 - 1 : Mod(n, m)).\n      toFixed(3).toString();\n    }\n    catch (err) {\n      calculatedEnergy[p1] = -1;\n    }\n  }\n\n  // apply results to plot\n\n  var validResultNumber = 0;var _loop = function _loop(\n\n  _p) {\n\n    // assert that there are results for both P1 = 2k and (2k + 1).\n    // note that for (9,7) the S66 doesn't work due to too small d_t which\n    // caused 1st derivative issue, but S55 is valid.\n\n    if (calculatedEnergy[_p] === -1 || calculatedEnergy[_p + 1] === -1)\n      return \"continue\";\n\n    validResultNumber++;\n\n    $resultList.append(\n    $(\"<tr><td>\" + p1Name[_p] + \"</td><td>\\\\(\" + calculatedEnergy[_p] + \"\\\\ \\\\mathrm{eV}\\\\)</td></tr>\").\n    click(function () {return changeEdit(_p, calculatedEnergy[_p], calculatedEnergy[_p + 1]);}).\n    css('cursor', 'pointer')).\n    append(\n    $(\"<tr><td>\" + p1Name[_p + 1] + \"</td><td>\\\\(\" + calculatedEnergy[_p + 1] + \"\\\\ \\\\mathrm{eV}\\\\)</td></tr>\").\n    click(function () {return changeEdit(_p, calculatedEnergy[_p], calculatedEnergy[_p + 1]);}).\n    css('cursor', 'pointer'));\n\n\n    var inputParams = {\n      type: t, // int\n      p1: _p, // int\n      p2: _p + 1, // int\n      val1: calculatedEnergy[_p], // empty-able str\n      val2: calculatedEnergy[_p + 1], // empty-able str\n      rbm: '' // empty-able str\n    };\n\n    var plotParams = processOutput(getPlotParams(inputParams));\n    var plotId = \"calcPlot\" + Math.round(_p / 2);\n\n    var $plot = $(\"\\n      <div class=\\\"math calc-plot-container\\\" \\n           oncontextmenu=\\\"return false\\\" onmousedown=\\\"return false\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-lg-offset-2 col-md-offset-6 rbmAxisLabel\\\">\\n            \\\\(\\\\omega_{\\\\mathrm{RBM}}\\\\ (\\\\mathrm{cm^{-1}})\\\\)\\n          </div>\\n        </div>\\n        <br />\\n        <div class=\\\"row\\\" style=\\\"position: relative;\\\">\\n          <div class=\\\"yAxisLabel\\\">\" +\n\n\n\n\n\n\n\n\n\n    plotParams.yAxisLabel + \"</div>\\n          <div id=\\\"\" +\n    plotId + \"\\\" style=\\\"width: 400px; height: 290px; font-family: 'Times New Roman', serif;\\\"\\n               class=\\\"col-md-offset-1 col-xs-offset-1\\\"></div>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-lg-offset-2 col-md-offset-5 xAxisLabel\\\">\\n               \" +\n\n\n\n\n    plotParams.xAxisLabel + \"\\n          </div>\\n        </div>\\n      </div>\\n    \");\n\n\n\n\n\n    $plotList.append($plot);\n    drawPlot(plotId, plotParams);};for (var _p = 0; _p < 12; _p += 2) {var _ret = _loop(_p);if (_ret === \"continue\") continue;\n  }\n\n  if (validResultNumber === 0) {\n    invokeError();\n  }\n\n  MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\n  return false;\n}\n\nfunction generateRBMCalculationResult(n, m, t, $resultList) {// separated function to reduce complexity\n\n  var isAirSuspended = t === 0;\n  var editRBM = function editRBM(e) {return $('#edRBM').val(e);};\n  if (isAirSuspended) {\n    var rbmAS = dt2RBM(Dt(n, m, t), isMetal(n, m) ? 2 : 0, t).toFixed(1).toString();\n    $resultList.append(\n    $(\"\\n        <tr>\\n            <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ \" + (\n\n    isMetal(n, m) ? \"(p=3)\" : \"(p=1,2)\") + \" \\\\)</td>\\n            <td>\\\\( \" +\n    rbmAS + \" \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\\n        </tr>\\n      \").\n\n\n    click(function () {return editRBM(rbmAS);}).\n    css('cursor', 'pointer'));\n\n  }\n\n  var rbmGeneral = dt2RBM(Dt(n, m, t), isAirSuspended ? 3 : 0, t).toFixed(1).toString();\n  $resultList.append(\n  $(\"\\n      <tr>\\n          <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ \" + (\n\n  isAirSuspended ? \"(p>3)\" : \"\") + \" \\\\)</td>\\n          <td>\\\\( \" +\n  rbmGeneral + \" \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\\n      </tr>\\n    \").\n\n\n  click(function () {return editRBM(rbmGeneral);}).\n  css('cursor', 'pointer'));\n\n}\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","\n'use strict';\n\nlet isUnparsable = e => isNaN(parseFloat(e));\n\n/**\n * Get assigned results to be processed for plotting.\n * @param {Object} inputParams - input parameters\n * @param {int} inputParams.p1 - p denoting transition type associated with val1\n * @param {(string|null)} inputParams.val1 - null-able or empty-able string of transition energy 1\n * @param {int} inputParams.p2 - p denoting transition type associated with val2\n * @param {(string|null)} inputParams.val2 - null-able or empty-able string of transition energy 2\n * @param {(string|null)} inputParams.rbm - null-able or empty-able string of RBM frequency\n * @param {int} inputParams.type - environment type\n * @returns {Object} assigned results\n*/\nfunction getPlotParams(inputParams) {\n  let decimalDigits = (d) => d.split('.')[1].length;\n\n  if (isUnparsable(inputParams.val1) && isUnparsable(inputParams.val2)) {\n    throw new Error('Unauthorized Access');\n  } else if (isUnparsable(inputParams.val1) || isUnparsable(inputParams.val2)) {\n    if (isUnparsable(inputParams.rbm)) throw new Error('Unauthorized Access');\n    inputParams.uncertainty = 2.0 / Math.pow(10,\n      decimalDigits(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1 ));\n    return E1R1(inputParams);\n  } else {\n    inputParams.uncertainty = 2.0 / Math.pow(10,\n      Math.min(decimalDigits(inputParams.val1), decimalDigits(inputParams.val2))\n    );\n    return E2(inputParams);\n  }\n}\n\n/**\n * Get assigned results of 1 energy 1 RBM frequency input.\n * @param {Object} inputParams - input parameters\n * @param {int} inputParams.p1 - p denoting transition type associated with val1\n * @param {(string|null)} inputParams.val1 - null-able or empty-able string of transition energy 1\n * @param {int} inputParams.p2 - p denoting transition type associated with val2\n * @param {(string|null)} inputParams.val2 - null-able or empty-able string of transition energy 2\n * @param {string} inputParams.rbm - parseable string (to float) of RBM frequency\n * @param {int} inputParams.type - environment type\n * @returns {Object} assigned results\n */\nfunction E1R1(inputParams) {\n\n  let p1 = (isUnparsable(inputParams.val1) ? inputParams.p2 : inputParams.p1), type = inputParams.type, p = p1ToP(p1);\n  let val = parseFloat(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1); // float\n  let wRBM = parseFloat(inputParams.rbm); // float, integrity checked in getPlotParam\n\n  let dt = wRBM2Dt(wRBM, p, type);\n  let cos = getCos3Theta(val, dt, p, type);\n  let resultString = '';\n  let error = () => Assign({\n    bluePoint: null,\n    point: [ val, 0.23 ],\n    pLesser: pToLesser(p),\n    type: type,\n    pointType: 'none',\n    p1Lesser: p1ToLesser(p1),\n    resultString: resultString,\n    uncertainty: 0.0002\n  });\n\n  if (cos[0] === -1 && cos[1] === -1) {\n    resultString += 'Invalid input: out of range.';\n    return error();\n  }\n\n  let pAnother, modAnother;\n  if (isMetal(p)) {\n    if (p1 % 4 - 3 !== (cos[0] === -1 ? 0 : -1)) {\n      resultString += `Invalid input: You may have mistaken ${p1Name[p1 + 5 - (p1 % 4) * 2]} for ${p1Name[p1]}.`;\n      return error();\n    }\n    pAnother = p;\n    modAnother = cos[0] === -1 ? -1 : 0;\n  }\n  else {\n    pAnother = isMetal(p + 1) ? p - 1 : p + 1;\n    modAnother = cos[0] === -1 ? 2 : 1; // === mod1\n  }\n\n  let valAnother;\n  try {\n    valAnother = getEnergyFromCos3Theta(dt, cos[0] === -1 ? cos[1] : cos[0], pAnother, type, modAnother);\n  }\n  catch (err) {\n    if (err.message === 'dt') {\n      resultString += 'Invalid input: out of range, diameter too small.';\n      return error();\n    }\n    throw err;\n  }\n  if ((isMetal(p) && (modAnother === -1)) || (!isMetal(p) && (p > pAnother))) {\n    [p, pAnother] = [pAnother, p];\n    [val, valAnother] = [valAnother, val];\n  }\n  let x = (val + valAnother) / 2, y = valAnother - val;\n  return Assign({\n    bluePoint: null,\n    point: [x, y],\n    pLesser: p,\n    type: type,\n    pointType: 'green',\n    p1Lesser: p1ToLesser(p1),\n    resultString: resultString,\n    uncertainty: inputParams.uncertainty\n  }, modAnother);\n\n}\n\n/**\n * Get assigned results of 2 energy (with/without RBM frequency) input.\n * @param {Object} inputParams - input parameters\n * @param {int} inputParams.p1 - p denoting transition type associated with val1\n * @param {string} inputParams.val1 - parseable string (to float) of transition energy 1\n * @param {int} inputParams.p2 - p denoting transition type associated with val2\n * @param {string} inputParams.val2 - parseable string (to float) of transition energy 2\n * @param {(string|null)} inputParams.rbm - null-able or empty-able string of RBM frequency\n * @param {int} inputParams.type - environment type\n * @returns {Object} assigned results\n */\nfunction E2(inputParams) {\n\n  let resultString = '';\n  let p1 = inputParams.p1, p2 = inputParams.p2, type = inputParams.type;\n  let val1 = parseFloat(inputParams.val1), val2 = parseFloat(inputParams.val2);\n  let p_1 = p1ToP(p1), p_2 = p1ToP(p2);\n  let rbm = inputParams.rbm; // string\n\n  // don't use 'with' block\n  if (p1 > p2) {\n    [p_1, p_2] = [p_2, p_1];\n    [val1, val2] = [val2, val1];\n    [p1, p2] = [p2, p1];\n  }\n\n  if (isMetal(p_2) !== isMetal(p_1)) {\n    throw new Error('invalid form submission');\n  }\n\n  if (p2 - p1 === 1) {\n    let bluePoint = null;\n    if (!isUnparsable(rbm)) {\n      let average = getAverage(val2 - val1, parseFloat(rbm), p_1, type);\n      if (average !== null) {\n        bluePoint = [average, val2 - val1];\n      }\n      else {\n        resultString += 'Invalid input: RBM value out of range. Only transition energies are processed. <br/ >';\n      }\n    }\n    return Assign({\n      point: [ (val1 + val2) / 2, val2 - val1 ],\n      pLesser: p_1,\n      type: type,\n      pointType: 'red',\n      bluePoint: bluePoint,\n      p1Lesser: p1,\n      resultString: resultString,\n      uncertainty: inputParams.uncertainty\n    });\n  }\n\n}\n\n/**\n * Get assigned results of pre-processed parameters.\n * @param {Object} params - pre-processed parameters\n * @param {int} mod=-1 - transferred pre-processed mod in E1R1()\n * @param {array} params.point - point\n * @param {string} params.pointType - type of the point, 'red' or 'green'\n * @param {int} params.pLesser - smaller one of the p in the plot\n * @param {int} params.p1Lesser - smaller one of the p1 in the plot\n * @param {int} params.type - environment type\n * @param {string} params.resultString - output result\n * @param {(number[]|null)} params.bluePoint blue point if exists\n * @param {number} params.uncertainty - uncertainty of the input\n * @returns {Object} assigned results\n */\nfunction Assign(params, mod = -1) {\n\n  // params: plotParams\n  // x: average y: splitting\n\n  let uncertainty = params.uncertainty;\n  let dxMin = -1, dxMax = -1, dyMin = -1, dyMax = -1;\n  let Dist = (x1, y1, x2, y2) => Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) * 25);\n  let Dist_ = (e) => Dist(e[2], e[3], params.point[0], params.point[1]);\n  let deltaX = 0.6,\n    maxY = isMetal(params.pLesser) ? 0.6 : params.point[1] + 0.6,\n    minY = isMetal(params.pLesser) ? -0.1 : params.point[1] - 0.6;\n\n  function setBounds(dxMin_, dxMax_, dyMin_, dyMax_) {\n    dxMin = dxMin_;\n    dxMax = dxMax_;\n    dyMin = dyMin_;\n    dyMax = dyMax_;\n  }\n\n  // https://github.com/mihaifm/linq, many thanks to you!\n\n  params.all = Enumerable.from(getList(params.pLesser, params.type))\n    .where(e => (e[2] >= params.point[0] - deltaX && e[2] <= params.point[0] + deltaX &&\n      e[3] <= maxY && e[3] >= minY))\n    .toArray();\n\n  let query = Enumerable.from(params.all)\n    .where(e => (\n      (mod === -1 || isMetal(params.pLesser) || mod === Mod(e[0], e[1])) &&\n      params.point[0] - e[2] >= dxMin && params.point[0] - e[2] <= dxMax &&\n      params.point[1] - e[3] >= dyMin && params.point[1] - e[3] <= dyMax\n    ));\n\n  setBounds(-uncertainty, uncertainty, -uncertainty, uncertainty);\n  let uc = query.toArray(); // query once to get uncertainty range\n\n  function processOutput() {\n    params.result = query.orderBy(Dist_).toArray();\n    for (let i = 0; i < params.result.length; i++)\n      params.resultString += `\n        <b>(${Math.round(params.result[i][0])},${Math.round(params.result[i][1])})</b>\n        ${i !== params.result.length - 1 ? ', ' : ''}`;\n    params.resultString += '</span>';\n  }\n\n  if (params.pointType === 'none') {\n    params.ar = AssignResult.error;\n    params.result = [];\n    return params;\n  }\n\n  if (uncertainty > 0.2) {\n    params.resultString = 'Input uncertainty too large. Please give more significant figures.';\n    params.ar = AssignResult.error;\n    params.result = [];\n    return params;\n  }\n\n  if (params.pointType === 'red') {\n    if (params.bluePoint != null) {\n      if (params.bluePoint[0] - params.point[0] < 0.02) setBounds(-0.008, 0.008, -0.015, 0.015);\n      else setBounds(-0.030, -0.005, -0.015, 0.015); // don't change at this moment\n    } else setBounds(-0.020, 0.008, -0.015, 0.015);\n\n    if (query.count() === 1 && uc.length <= 1) {\n      params.ar = AssignResult.accurate;\n      params.resultString += 'The assignment result is:<br /><span style=\"font-size: 28px;\">';\n      processOutput();\n      return params;\n    }\n    setBounds(-0.040, 0.0126, -0.030, 0.030);\n  } else setBounds(-0.070, 0.070, -0.040, 0.040);\n\n  query.union(uc);\n\n  if (query.count() > 0) {\n    params.ar = AssignResult.possible;\n    params.resultString += 'The likely assignments include:<br /><span style=\"font-size: 28px;\">';\n    processOutput();\n    return params;\n  }\n\n  /*\n  * use the green criteria and query again for no match.\n  * and it's easy to see that green point, if not returned in the previous step,\n  * will not give results in this step.\n  */\n\n  setBounds(-0.070, 0.070, -0.040, 0.040);\n  let tmp = Enumerable.from(params.all).orderBy(Dist_).toArray();\n  if (Dist_(tmp[0]) / Dist_(tmp[1]) <= 0.5 && query.count() !== 0) {\n    params.ar = AssignResult.impossible;\n    query = Enumerable.from([ tmp[0] ]);\n    params.resultString += 'No match. The most possible assignment result is:<br /><span style=\"font-size: 28px;\">';\n    processOutput();\n    return params;\n  }\n\n  params.ar = AssignResult.error;\n  params.resultString = 'Invalid input: out of range. Please check your input.';\n  params.result = [];\n  return params;\n}\n\nfunction processOutput(params) {\n\n  // process RBM\n\n  const yMax = isMetal(params.pLesser) ? 0.51 : params.point[1] + 0.4;\n  const xMin = params.point[0] - 0.5, xMax = params.point[0] + 0.5;\n  let s = getRBMArray(params.pLesser, params.type); // {rbm, rbmLabel}\n  let rbm = [];\n  let rbmLabel = [];\n  let rbmPos = [];\n  let between = (xy, r1, r2) => (xy >= r1 && xy <= r2) || (xy >= r2 && xy <= r1);\n  for (let i = 0 ; i < s.rbm.length; i++) {\n    let a = s.rbm[i];\n    let t;\n    if (a.length === 2)\n      t = (a[0][0] - a[1][0]) * (yMax - a[1][1]) / (a[0][1] - a[1][1]) + a[1][0];\n    else {\n      let u;\n      if (between(yMax, a[1][1], a[0][1]))\n        u = 0;\n      else // if between(a[1][1], a[2][1])\n        u = 2;\n      t = (a[u][0] - a[1][0]) * (yMax - a[1][1]) / (a[u][1] - a[1][1]) + a[1][0];\n    }\n    if (between(t, xMax, xMin)) {\n      rbm.push(s.rbm[i]);\n      rbmLabel.push(s.rbmLabel[i]);\n      rbmPos.push(t);\n    }\n  }\n  params.rbm = rbm;\n  params.rbmLabel = rbmLabel;\n  params.rbmPos = rbmPos;\n\n  // process all\n\n  let all = params.all; // you know, lazy evaluation\n  let q = Enumerable.from(all)\n    .groupBy(\n      e => 2 * e[0] + e[1], // key\n      e => e, // group element\n      (key, group) => ({ key: key, value: group.orderBy(e => e[0]).toArray() })\n    ); // use default compare method\n\n  params.all = q.select(e => e.value.map(ee => [ee[2], ee[3]])).toArray();\n  params.allLabel = q.select(e => e.value.map(ee => [ee[0], ee[1]])).toArray();\n\n  // process result\n\n  let result = params.result;\n  params.result = result.map(e => [e[2], e[3]]);\n  params.resultLabel = result.map(e => [e[0], e[1]]);\n\n  params.isMetal = isMetal(params.pLesser);\n  params.yAxisLabel = `\\\\(${p1Name_raw[params.p1Lesser + 1]}-${p1Name_raw[params.p1Lesser]}\\\\ (\\\\mathrm{eV})\\\\)`;\n  params.xAxisLabel = `\\\\((${p1Name_raw[params.p1Lesser + 1]}+${p1Name_raw[params.p1Lesser]})/2\\\\ (\\\\mathrm{eV})\\\\)`;\n\n\n  // select g.OrderBy(elem => elem[0]);\n  // note that average energy may not increase monotonously as n in (n,m) increases.\n  // thus elem => elem[2] is wrong.\n  // test: S11 = 1.420, S22 = 2.134 as (6,4), see branch 2n + m = 16\n\n\n  return params;\n}\n","\n'use strict';\n\nfunction drawPlot(placeholder, params) {\n\n  let defaultRadius = 4, xMin = params.point[0] - 0.5, xMax = params.point[0] + 0.5;\n  let yMin = params.isMetal ? -0.01 : params.point[1] - 0.4, yMax = params.isMetal ? 0.45 : params.point[1] + 0.4;\n  let font = {\n    size: 20,\n    lineHeight: 20,\n    family: 'serif'\n  };\n  let options = {\n    xaxis: {\n      // aver\n      show: true,\n      position: 'bottom',\n      min: xMin,\n      max: xMax,\n      font: font,\n      tickLength: 10,\n      tickColor: 'rgb(255, 0, 0)',\n      color: 'rgb(255, 0, 0)'\n    },\n    yaxis: {\n      show: true,\n      min: yMin,\n      max: yMax,\n      font: font,\n      tickLength: 10,\n      tickColor: 'rgb(0, 0, 0)',\n      color: 'rgb(0, 0, 0)'\n    },\n    series: {\n      hoverable: true\n      // shadowSize: 0\n    },\n    grid: {\n      borderColor: {\n        top: 'rgb(0, 0, 255)',\n        bottom: 'rgb(255, 0, 0)',\n        left: 'rgb(0, 0, 0)',\n        right: 'rgb(0, 0, 0)'\n      },\n      hoverable: true,\n      minBorderMargin: 0\n    }\n  };\n\n  let series = [];\n  for (let i = 0; i < params.rbm.length; i++)\n    series.push({\n      color: 'rgb(208, 208, 208)', // use the shadow\n      data: params.rbm[i],\n      shadowSize: 5,\n      hoverable: false\n    });\n  let laser = [1240 / 785, 1240 / 633, 1240 / 532];\n  let laser_color = ['rgb(136, 136, 136)', 'rgb(245, 0, 0)', 'rgb(12, 127, 15)'];\n\n  for (let i = 0; i < laser.length; i++) {\n    series = series.concat([{\n      id: `laser${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, 2 * (-10 - laser[i])], [10, 2 * (10 - laser[i])]],\n      shadowSize: 0\n    }, {\n      id: `laser_minus${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, -2 * (-10 - laser[i])], [10, -2 * (10 - laser[i])]],\n      shadowSize: 0\n    }, {\n      fillBetween: `laser${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, 2 * (-10 - (laser[i] - 0.1))], [10, 2 * (10 - (laser[i] - 0.1))]], // 100 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0\n      }\n    }, {\n      fillBetween: `laser_minus${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, -2 * (-10 - (laser[i] - 0.1))], [10, -2 * (10 - (laser[i] - 0.1))]], // 100 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0\n      }\n    }, {\n      fillBetween: `laser${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, 2 * (-10 - (laser[i] + 0.1))], [10, 2 * (10 - (laser[i] + 0.1))]], // 200 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0\n      }\n    }, {\n      fillBetween: `laser_minus${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, -2 * (-10 - (laser[i] + 0.1))], [10, -2 * (10 - (laser[i] + 0.1))]], // 200 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0\n      }\n    }]);\n  }\n\n  for (let i = 0; i < params.all.length; i++) {\n    let mod_i = (params.allLabel[i][0][0] * 2 + params.allLabel[i][0][1]) % 3;\n    series.push({\n      color: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\n      data: params.all[i],\n      points: {\n        show: true,\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2  : defaultRadius, //15 meV\n        symbol: params.isMetal ? 'circle' : mod_i === 2 ? 'square' : 'triangle'\n      },\n      lines: {\n        show: true\n      },\n      point_labels: params.allLabel[i],\n      hoverable: true\n    });\n  }\n  for (let i = 0; i < params.result.length; i++) {\n    let mod_i = (params.resultLabel[i][0] * 2 + params.resultLabel[i][1]) % 3;\n    series.push({\n      color: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\n      data: [params.result[i]],\n      points: {\n        show: true,\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2 : defaultRadius,\n        symbol: params.isMetal ? 'circle' : mod_i === 2 ? 'square' : 'triangle',\n        fill: true,\n        fillColor: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)'\n      },\n      point_labels: [params.resultLabel[i]],\n      hoverable: true\n    });\n  }\n\n\n  // blue point is diamond, otherwise square\n  if (params.pointType !== 'none') {\n    series.push({\n      color: params.pointType === 'green' ? 'rgb(12, 180, 15)' : 'rgb(255, 0, 0)',\n      data: [params.point],\n      points: {\n        show: true,\n        symbol: params.pointType === 'green' ? 'diamond' : 'square',\n        radius: defaultRadius,\n        fill: true,\n        fillColor: params.pointType === 'green' ? 'rgba(0, 0, 0, 0)' : 'rgb(255, 0, 0)'\n      },\n      hoverable: false\n    });\n  }\n  if (params.bluePoint !== null)\n    series.push({\n      color: 'rgb(0, 0, 255)',\n      data: [params.bluePoint],\n      points: {\n        show: true,\n        symbol: 'diamond',\n        radius: defaultRadius,\n        fill: true,\n        fillColor: 'rgba(0, 0, 0, 0)'\n      },\n      hoverable: false,\n      shadowSize: 0\n    });\n\n  let $placeholder = $(`#${placeholder}`);\n  let plot = $.plot($placeholder, series, options);\n\n  let previousPoint = null;\n  $placeholder.bind('plothover', function(event, pos, item) {\n    if (item) {\n      if (previousPoint !== item.dataIndex) {\n        previousPoint = item.dataIndex;\n        $('#tooltip').remove();\n        showTooltip(item.pageX, item.pageY,\n          `(${item.series.point_labels[item.dataIndex][0]}, ${item.series.point_labels[item.dataIndex][1]})`);\n      }\n    } else {\n      $('#tooltip').remove();\n      previousPoint = null;\n    }\n  });\n\n  if (params.isMetal) {\n    for (let i = 0; i < params.all.length; i++) {\n      let s = Math.floor(params.all.length / 2);\n      let p = params.all[i][params.all[i].length - 1];\n      let p1 = params.allLabel[i][params.all[i].length - 1];\n      let o = plot.pointOffset({ x: p[0], y: p[1] });\n      let axes = plot.getAxes();\n      let xaxis = axes.xaxis, yaxis = axes.yaxis;\n      if (i % 2 === s % 2 && p[0] <= xaxis.max && p[0] >= xaxis.min &&\n        p[1] <= yaxis.max - 0.05 && p[1] >= yaxis.min + 0.05)\n        $placeholder.append(`\n                    <div class=\"series_label\" style=\"left: ${o.left - (i === s ? 60 : 10)}px; top: ${o.top - 30}px;\">\n                        <p>${i === s ? '2<i>n</i>+<i>m</i>=' : ''}${p1[0] * 2 + p1[1]}</p>\n                    </div>\n                `);\n    }\n  } else {\n    let mid = Math.round(params.all.length / 2);\n    let pMid = params.allLabel[mid][params.all[mid].length - 1];\n    let divMid = Math.floor((pMid[0] * 2 + pMid[1]) / 3); //use ceil, for right is scattered, left is dense\n\n    for (let i = 0; i < params.all.length; i++) {\n      let p = params.all[i][params.all[i].length - 1];\n      let p1 = params.allLabel[i][params.all[i].length - 1];\n      let o = plot.pointOffset({ x: p[0], y: p[1] });\n      let axes = plot.getAxes();\n      let xaxis = axes.xaxis, yaxis = axes.yaxis;\n      let div = Math.round((p1[0] * 2 + p1[1]) / 3);\n      let mod = (p1[0] * 2 + p1[1]) % 3;\n      if (divMid % 2 === div % 2) {\n        if (p[0] <= xaxis.max - 0.02 && p[0] >= xaxis.min + 0.02 && p[1] <= yaxis.max - 0.1 &&\n          p[1] >= yaxis.min + 0.1) {\n          let dA = {\n            color: mod === 1 ? '#FF0000' : '#000000',\n            left: o.left - (divMid === div ? 60 : 10),\n            top: o.top - (mod === 1 ? -15 : (\n                divMid === div && p[1] <= yaxis.max - 0.15 && p[1] >= yaxis.min + 0.18 ? 60 : 30\n              )\n            ),\n            c1: divMid !== div\n              ? ''\n              : ((mod === 2 && p[1] <= yaxis.max - 0.15\n                ? '<b>MOD2</b><br/>'\n                : '') + '2<i>n</i>+<i>m</i>='),\n            c2: p1[0] * 2 + p1[1],\n            c3: divMid === div && mod === 1 && p[1] >= yaxis.min + 0.12\n              ? '<br/><b>MOD1</b>'\n              : ''\n          };\n          $placeholder.append(`\n                        <div class=\"series_label\" style=\"color:${dA.color};left:${dA.left}px;top:${dA.top - 0}px;\">\n                            <p>${dA.c1}${dA.c2}${dA.c3}</p>\n                        </div>\n                    `); // workaround to let editor know that dA.top is integer\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < params.rbm.length; i++) {\n    if (i % 2 === 0 || params.rbm.length === 1) {\n      let o1 = plot.pointOffset({ x: params.rbmPos[i], y: yMax });\n      $placeholder.append(`\n                <div class=\"rbm_label\" style=\"left:${o1.left - 15}px;top:${o1.top - 30}px;\">\n                    <p>${params.rbmLabel[i]}</p>\n                </div>\n            `);\n    }\n  }\n}\n\nfunction showTooltip(x, y, contents) {\n  $(`\n        <div id=\"tooltip\" class=\"tooltip right in\">\n            <div class=\"tooltip-arrow\" style=\"top: 50%;\"></div>\n            <div class=\"tooltip-inner\">${contents}</div>\n        </div>\n    `)\n    .css({\n      display: 'block',\n      top: y,\n      left: x\n    }).appendTo('body').fadeIn(200);\n}\n\n","\n'use strict';\n\nlet timeLoad = performance.now(); // before load\nlet timeStartup;\n\n$.getScript(navigator.language.substr(0, 2).toLowerCase() !== \"zh\"\n  ? \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/MathJax.js\"\n  : \"https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js\"\n  + \"?config=TeX-AMS_SVG-full,Safe&locale=en\", function () {\n  timeStartup = performance.now();\n  console.log(\"MathJax load takes \" + (timeStartup - timeLoad).toFixed(2));\n});\n\nlet urlParams = {};\n(window.onpopstate = function () {\n  let match,\n    pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n    search = /([^&=]+)=?([^&]*)/g,\n    decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n    query  = window.location.search.substring(1);\n\n  urlParams = {};\n  while (match = search.exec(query))\n    urlParams[decode(match[1])] = decode(match[2]);\n})();\n\nif( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {\n  $('.selectpicker').selectpicker('mobile');\n}\n\nlet $body = $(\"body\");\n\n/*\n * Step 1\n */\n\nif ($body.hasClass(\"Step1\")) {\n\n  let $selectType = $(\"#slType\");\n  for (let i = 0; i < typeName.length; i++)\n    $selectType.append(`<option value=\"${i}\">${typeName[i]}</option>`);\n\n  $selectType.selectpicker('val', 0)\n    .selectpicker('refresh')\n    .on(\"loaded.bs.select\", clearTitle)\n    .on('changed.bs.select', clearTitle);\n\n}\n\n/*\n * Step 2\n */\n\nif ($body.hasClass('Step2')) {\n\n  let type = parseInt(urlParams['Type']); // '', ' ' will be converted to NaN in this process.\n  if (isNaN(type) || type > 5 || type < 0)\n    location.href = 'Step1.html';\n\n  let $selectP1 = $('#slP1'), $selectP2 = $('#slP2'), $selectType = $('#slType');\n  let $selectP1P2 = $('#slP1, #slP2');\n\n  $('#title')[0].innerHTML += ' <small>' + typeName[type] + '</small>';\n\n  let $dataTables = $('#dataTables');\n  $dataTables.find(`.type${type}`).removeClass('hidden');\n  for (let i = 0; i < 6; i++) {\n    if (i === type) continue;\n    $dataTables.find(`.type${i}.hidden`).remove(); // MathJax will process hidden elements if not removed\n  }\n\n  // generate options\n\n  for (let i = 0; i < p1Name.length; i++) {\n    if (type >= 3) {\n      let threshold = (type === 3 ? 8 : 2);\n      if (i >= threshold) break;\n    }\n    $selectP1P2.append(`<option value=\"${i}\">${p1Name[i]}</option>`);\n  }\n  for (let i = 0; i < typeName.length; i++)\n    $selectType.append(`<option value=\"${i}\">${typeName[i]}</option>`);\n\n  // start recovering\n\n  if ((['P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined ))) {\n\n    let params = {\n      p1: parseInt(urlParams['P1']), // int\n      p2: parseInt(urlParams['P2']), // int\n      val1: urlParams['Val1'], // empty-able str\n      val2: urlParams['Val2'], // empty-able str\n      rbm: urlParams['RBM'] // empty-able str\n    };\n\n    let valueBetween = (xy, a, b) => (xy >= a && xy <= b);\n    let val1_ = parseFloat(params.val1), val2_ = parseFloat(params.val2), rbm_ = parseFloat(params.rbm);\n\n    let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n    if (emptyNum >= 2 || isNaN(params.p1) || isNaN(params.p2) ||\n      !isNaN(val1_) && !valueBetween(val1_, 0, 4) || !isNaN(val2_) && !valueBetween(val2_, 0, 4) ||\n      !isNaN(rbm_) && !valueBetween(rbm_, 30, 500) ||\n      !valueBetween(params.p1, 0, 11) || !valueBetween(params.p2, 0, 11)\n    )\n      location.href = 'Step1.html';\n\n    $selectP1.selectpicker('val', params.p1);\n    $selectP2.selectpicker('val', params.p2);\n    $('#edVal1').val(params.val1);\n    $('#edVal2').val(params.val2);\n    $('#edRBM').val(params.rbm);\n\n\n  } else if ((['P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined )))\n    location.href = 'Step1.html';\n\n  // end validation and recovering\n\n  $selectType.selectpicker('val', type);\n  $('.selectpicker').selectpicker('refresh');\n\n  $('select').on('loaded.bs.select', clearTitle);\n  $selectP1.on('changed.bs.select', function (e, index) {\n    let i = index - 1;\n    clearTitle(); // only when slP1 changes the title have to be cleared; only active select\n    $selectP2.find('option').each(function () {\n      let value = parseInt($(this).val());\n      if (i % 2 === 0 && value === i + 1 || i % 2 === 1 && value === i - 1)\n        $selectP2.selectpicker('val', value);\n    });\n  });\n\n}\n\n\n/*\n * Step 3\n */\n\nif ($body.hasClass('Step3')) {\n\n  // check integrity\n  if (!(['Type', 'P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined )))\n    location.href = 'Step1.html';\n\n  let inputParams = {\n    type: parseInt(urlParams['Type']), // int\n    p1: parseInt(urlParams['P1']), // int\n    p2: parseInt(urlParams['P2']), // int\n    val1: urlParams['Val1'], // empty-able str\n    val2: urlParams['Val2'], // empty-able str\n    rbm: urlParams['RBM'] // empty-able str\n  };\n\n  let valueBetween = (xy, a, b) => (xy >= a && xy <= b);\n  let val1_ = parseFloat(inputParams.val1), val2_ = parseFloat(inputParams.val2), rbm_ = parseFloat(inputParams.rbm);\n  // also, '' and ' ' will be converted to NaN in this process.\n\n  let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n  if (emptyNum >= 2 || isNaN(inputParams.type) || isNaN(inputParams.p1) || isNaN(inputParams.p2) ||\n    !isNaN(val1_) && !valueBetween(val1_, 0, 4) || !isNaN(val2_) && !valueBetween(val2_, 0, 4) ||\n    !isNaN(rbm_) && !valueBetween(rbm_, 30, 500) || !valueBetween(inputParams.type, 0, 5) ||\n    !valueBetween(inputParams.p1, 0, 11) || !valueBetween(inputParams.p2, 0, 11)\n  )\n    location.href = 'Step1.html';\n\n\n  $('#title')[0].innerHTML += ' <small>' + typeName[inputParams.type] + '</small>';\n\n  let plotParams = processOutput(getPlotParams(inputParams));\n\n  $('#resultDiv')\n    .addClass(plotParams.ar !== AssignResult.error ? 'alert-success' : 'alert-danger')\n    .html(plotParams.resultString);\n  $('#yAxisLabel').html(plotParams.yAxisLabel);\n  $('#xAxisLabel').html(plotParams.xAxisLabel);\n  $('#' + plotParams.pointType + 'Legend').css('display', '');\n  if (plotParams.bluePoint !== null)\n    $('#blueLegend').css('display', '');\n\n  $(drawPlot('plot-placeholder', plotParams));\n\n}\n\n// functions\n\nfunction clearTitle() { // used in Step1 and Step2\n\n  $('.bootstrap-select').find('button').removeAttr('title');\n}\n\nfunction validate(form) { // used in Step2\n\n  let $hint = $('#hint');\n  let invokeError = (msg) => {\n    $hint.addClass('alert-danger')\n      .html(`<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span> ${msg}`);\n    return false;\n  };\n  let val1_ = parseFloat(form.Val1.value);\n  let val2_ = parseFloat(form.Val2.value);\n  let rbm_ = parseInt(form.RBM.value);\n  let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n  if (emptyNum >= 2) return invokeError('At least 2 values are required.');\n  else {\n    if (!isNaN(val1_) && (val1_ < 0 || val1_ > 4) ||\n      !isNaN(val2_) && (val2_ < 0 || val2_ > 4) ||\n      !isNaN(rbm_) && (rbm_ < 30 || rbm_ > 500))\n      return invokeError('Please input valid value.');\n    if ($(\"#slP1\").selectpicker('val') === '')\n      return invokeError('Please select the type of transition energy.');\n\n    $(\".selectpicker\").removeAttr('disabled');\n\n    history.replaceState(null, null,\n      'Step2.html?' + ['Type', 'P1', 'Val1', 'P2', 'Val2', 'RBM'].map((e) => e + '=' + form[e].value).join('&'));\n    return true;\n  }\n}\n\nfunction changeEdit(p1_lesser, val1, val2) { // used in Step2\n  $(\"#slP1\").selectpicker('val', p1_lesser);\n  $(\"#slP2\").selectpicker('val', p1_lesser + 1);\n  $(\"#edVal1\").val(val1);\n  $(\"#edVal2\").val(val2);\n}\n\nfunction calculate(form) { // used in Step2\n\n  let $calcHint = $('#calculatorHint');\n  let $calcResult = $('#calcResult');\n\n  let invokeError = () => {\n    $calcHint.html(`\n      <div class=\"alert-danger hint\">\n        <span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n        No valid result.\n      </div>\n    `);\n    $calcResult.html('');\n  };\n\n  let n = parseInt(form.NCalc.value), m = parseInt(form.MCalc.value), t = parseInt(urlParams['Type']);\n  if (n < m) [n, m] = [m, n];\n  if (isNaN(n) || isNaN(m) || n <= 6 || m <= 0 || 2 * n + m > seriesThreshold) {\n    invokeError();\n    return false;\n  }\n\n  $calcHint.html('');\n  let $resultList = $(`<tbody></tbody>`);\n  let $plotList = $('<div></div>'); // empty wrapper\n  $calcResult.html('')\n    .append($('<table class=\"table table-striped math\" id=\"calcResultList\"></table>').append($resultList))\n    .append($plotList);\n\n  $resultList.append(`<tr><td>\\\\(d_t\\\\)</td><td>\\\\( ${Dt(n, m, t).toFixed(3).toString()} \\\\ \\\\mathrm{nm}\\\\)</td></tr>`);\n\n  // generate d_t and RBM information\n\n  generateRBMCalculationResult(n, m, t, $resultList);\n\n  // do energy calculation\n\n  let calculatedEnergy = new Array(12);\n  for (let p1 = 0; p1 < 12; p1++) {\n    if (isMetal(p1ToP(p1)) !== isMetal(n, m)) {\n      calculatedEnergy[p1] = -1;\n      continue;\n    }\n    try {\n      calculatedEnergy[p1] = getEnergy(Dt(n, m, t), Theta(n, m), p1ToP(p1), t, isMetal(n, m) ? p1 % 2 - 1 : Mod(n, m))\n        .toFixed(3).toString();\n    }\n    catch (err) {\n      calculatedEnergy[p1] = -1;\n    }\n  }\n\n  // apply results to plot\n\n  let validResultNumber = 0;\n\n  for (let p1 = 0; p1 < 12; p1 += 2) {\n\n    // assert that there are results for both P1 = 2k and (2k + 1).\n    // note that for (9,7) the S66 doesn't work due to too small d_t which\n    // caused 1st derivative issue, but S55 is valid.\n\n    if (calculatedEnergy[p1] === -1 || calculatedEnergy[p1 + 1] === -1)\n      continue;\n\n    validResultNumber++;\n\n    $resultList.append(\n      $(`<tr><td>${p1Name[p1]}</td><td>\\\\(${calculatedEnergy[p1]}\\\\ \\\\mathrm{eV}\\\\)</td></tr>`)\n        .click(() => changeEdit(p1, calculatedEnergy[p1], calculatedEnergy[p1 + 1]))\n        .css('cursor', 'pointer')\n    ).append(\n      $(`<tr><td>${p1Name[p1 + 1]}</td><td>\\\\(${calculatedEnergy[p1 + 1]}\\\\ \\\\mathrm{eV}\\\\)</td></tr>`)\n        .click(() => changeEdit(p1, calculatedEnergy[p1], calculatedEnergy[p1 + 1]))\n        .css('cursor', 'pointer')\n    );\n\n    let inputParams = {\n      type: t, // int\n      p1: p1, // int\n      p2: p1 + 1, // int\n      val1: calculatedEnergy[p1], // empty-able str\n      val2: calculatedEnergy[p1 + 1], // empty-able str\n      rbm: '' // empty-able str\n    };\n\n    let plotParams = processOutput(getPlotParams(inputParams));\n    let plotId = `calcPlot${Math.round(p1 / 2)}`;\n\n    let $plot = $(`\n      <div class=\"math calc-plot-container\" \n           oncontextmenu=\"return false\" onmousedown=\"return false\">\n        <div class=\"row\">\n          <div class=\"col-lg-offset-2 col-md-offset-6 rbmAxisLabel\">\n            \\\\(\\\\omega_{\\\\mathrm{RBM}}\\\\ (\\\\mathrm{cm^{-1}})\\\\)\n          </div>\n        </div>\n        <br />\n        <div class=\"row\" style=\"position: relative;\">\n          <div class=\"yAxisLabel\">${plotParams.yAxisLabel}</div>\n          <div id=\"${plotId}\" style=\"width: 400px; height: 290px; font-family: 'Times New Roman', serif;\"\n               class=\"col-md-offset-1 col-xs-offset-1\"></div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-lg-offset-2 col-md-offset-5 xAxisLabel\">\n               ${plotParams.xAxisLabel}\n          </div>\n        </div>\n      </div>\n    `);\n\n    $plotList.append($plot);\n    drawPlot(plotId, plotParams);\n  }\n\n  if (validResultNumber === 0) {\n    invokeError();\n  }\n\n  MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\n  return false;\n}\n\nfunction generateRBMCalculationResult(n, m, t, $resultList) { // separated function to reduce complexity\n\n  let isAirSuspended = (t === 0);\n  let editRBM = (e) => $('#edRBM').val(e);\n  if (isAirSuspended) {\n    let rbmAS = dt2RBM(Dt(n, m, t), isMetal(n, m) ? 2 : 0, t).toFixed(1).toString();\n    $resultList.append(\n      $(`\n        <tr>\n            <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ ${isMetal(n, m) ? \"(p=3)\" : \"(p=1,2)\"} \\\\)</td>\n            <td>\\\\( ${rbmAS} \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\n        </tr>\n      `)\n        .click(() => editRBM(rbmAS))\n        .css('cursor', 'pointer')\n    );\n  }\n\n  let rbmGeneral = dt2RBM(Dt(n, m, t), isAirSuspended ? 3 : 0, t).toFixed(1).toString();\n  $resultList.append(\n    $(`\n      <tr>\n          <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ ${isAirSuspended ? \"(p>3)\" : \"\"} \\\\)</td>\n          <td>\\\\( ${rbmGeneral} \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\n      </tr>\n    `)\n      .click(() => editRBM(rbmGeneral))\n      .css('cursor', 'pointer')\n  );\n}\n"]}