{"version":3,"sources":["Energy.js","Assign.js","Plot.js","main.js"],"names":["seriesThreshold","AssignResult","accurate","possible","impossible","error","typeName","type0Params","type3Params","p1Name","p1Name_raw","p1ToP","p1","pToLesser","p","p1ToLesser","Dt","n","m","type","Math","sqrt","PI","Theta","atan","Mod","isMetal","arguments","length","getRBMParameters","Param","a","b","_classCallCheck","this","Error","wRBM2Dt","wRBM","ab","dt2RBM","dt","getEnergy","theta","mod","getEnergyFromCos3Theta","cos","cos3Theta","r","sgE","extMod","log10","getCos3Theta","val","calc","parseFloat","toFixed","getAverage","splitting","pLesser","pLarger","err","message","delta","x","getList","li","dl","dh","push","getRBMArray","d","rbmLabel","rbm","rbmFreq","t","plus","minus","isUnparsable","e","isNaN","getPlotParams","inputParams","decimalDigits","split","val1","val2","uncertainty","pow","E1R1","min","E2","p2","resultString","Assign","bluePoint","point","pointType","p1Lesser","pAnother","modAnother","valAnother","_ref","_ref2","p_1","p_2","_ref3","_ref4","_ref5","average","params","undefined","dxMin","dxMax","dyMin","dyMax","Dist_","x1","y1","x2","y2","maxY","minY","setBounds","dxMin_","dxMax_","dyMin_","dyMax_","all","Enumerable","from","where","toArray","query","uc","processOutput","result","orderBy","i","round","ar","count","union","tmp","yMax","xMin","xMax","s","rbmPos","between","xy","r1","r2","u","q","groupBy","key","group","value","select","map","ee","allLabel","resultLabel","yAxisLabel","xAxisLabel","drawPlot","placeholder","yMin","font","size","lineHeight","family","options","xaxis","show","position","max","tickLength","tickColor","color","yaxis","series","hoverable","grid","borderColor","top","bottom","left","right","minBorderMargin","data","shadowSize","laser","laser_color","concat","id","toString","fillBetween","lines","fill","lineWidth","mod_i","points","radius","symbol","point_labels","fillColor","$placeholder","$","plot","previousPoint","bind","event","pos","item","dataIndex","remove","showTooltip","pageX","pageY","floor","o","pointOffset","y","axes","getAxes","append","mid","pMid","divMid","div","dA","o1","contents","css","display","appendTo","fadeIn","timeLoad","performance","now","timeStartup","getScript","console","log","urlParams","window","onpopstate","match","pl","search","decode","decodeURIComponent","replace","location","substring","exec","$body","hasClass","$selectType","selectpicker","on","clearTitle","parseInt","href","$selectP1","$selectP2","$selectP1P2","innerHTML","$dataTables","find","removeClass","threshold","every","valueBetween","val1_","val2_","rbm_","emptyNum","Number","index","each","plotParams","addClass","html","removeAttr","validate","form","$hint","invokeError","msg","Val1","Val2","RBM","history","replaceState","join","changeEdit","p1_lesser","calculate","$calcHint","$calcResult","NCalc","MCalc","$resultList","$plotList","generateRBMCalculationResult","calculatedEnergy","Array","validResultNumber","_loop","click","plotId","$plot","MathJax","Hub","Queue","isAirSuspended","editRBM","rbmAS","rbmGeneral"],"mappings":"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","file":"app.min.js","sourcesContent":["\r\n'use strict';\r\n\r\n/**\r\n * @const max processable (2n + m) limit\r\n * @type int\r\n */\r\nconst seriesThreshold = 90;\r\n\r\nconst AssignResult = {\r\n  accurate : 0,\r\n  possible : 1,\r\n  impossible : 2,\r\n  error : 3\r\n};\r\n\r\n/**\r\n * @const names of environments\r\n * @type {string[]}\r\n */\r\nconst typeName = [\r\n  'Air-suspended SWNTs', 'SWNTs on \\\\(\\\\mathrm{SiO_2}/\\\\mathrm{Si}\\\\) substrates', 'SWNT arrays on quartz substrates',\r\n  '\"Super-growth\" SWNTs', 'SDS-dispersed SWNTs', 'ssDNA-dispersed SWNTs'\r\n];\r\n\r\n\r\n/**\r\n * @const parameters of air-suspended-like environments: (a, b, c)\r\n * @type {number[][]}\r\n */\r\nconst type0Params = [\r\n  [ 1.194, 0.179, 0.053 ],\r\n  [ 2.110, 0.388, 0.154 ],\r\n  [ 3.170, 0.764, 0.286 ], //M11\r\n  [ 4.286, 1.230, 0.412 ],\r\n  [ 5.380, 1.922, 0.644 ],\r\n  [ 6.508, 2.768, 0.928 ], //M22\r\n  [ 7.624, 3.768, 1.024 ], //S55\r\n  [ 8.734, 4.921, 1.479 ], //S66\r\n  [ 9.857, 6.228, 1.692 ]  //M33\r\n];\r\n\r\n/**\r\n * @const parameters of super-growth environments: (beta_mod1, beta_mod2) or (beta_-, beta_+)\r\n * @type {number[][]}\r\n */\r\nconst type3Params =[\r\n  [ 0.09, -0.07 ],\r\n  [ -0.18, 0.14 ],\r\n  [ -0.19, 0.29 ],\r\n  [ 0.49, -0.33 ],\r\n  [ -0.43, 0.59 ],\r\n  [ -0.6, 0.57 ]\r\n];\r\n\r\nconst p1Name = [\r\n  '\\\\(S_{11}\\\\)', '\\\\(S_{22}\\\\)', '\\\\(M_{11}^-\\\\)', '\\\\(M_{11}^+\\\\)', '\\\\(S_{33}\\\\)', '\\\\(S_{44}\\\\)',\r\n  '\\\\(M_{22}^-\\\\)', '\\\\(M_{22}^+\\\\)', '\\\\(S_{55}\\\\)', '\\\\(S_{66}\\\\)', '\\\\(M_{33}^-\\\\)', '\\\\(M_{33}^+\\\\)'\r\n];\r\n\r\n/**\r\n * @const name of p1 without delimiters\r\n * @type {string[]}\r\n */\r\nconst p1Name_raw = [\r\n  'S_{11}', 'S_{22}', 'M_{11}^-', 'M_{11}^+', 'S_{33}', 'S_{44}', 'M_{22}^-', 'M_{22}^+', 'S_{55}', 'S_{66}',\r\n  'M_{33}^-', 'M_{33}^+'\r\n];\r\n\r\n/**\r\n * converts p1 (p with + or - for metallic tubes) to correlated p.\r\n * @param {int} p1 - input p1\r\n * @returns {int} p\r\n */\r\nconst p1ToP = (p1) => [ 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8 ][p1];\r\n\r\n/**\r\n * converts p to its lesser value in a pair (S11 and S22 will be converted to S11, etc.).\r\n * @param {int} p - input p\r\n * @returns {int} lesser p\r\n */\r\nconst pToLesser = (p) => [ 0, 0, 2, 3, 3, 5, 6, 6, 9 ][p];\r\n\r\n/**\r\n * converts p1 to its lesser value in a pair (M11+ and M11- will be converted to M11-, etc.).\r\n * @param {int} p1 - input p1\r\n * @returns {int} lesser p1\r\n */\r\nconst p1ToLesser = (p1) => p1 % 2 === 0 ? p1 : p1 - 1;\r\n\r\n\r\nconst Dt = (n, m, type) => ((type !== 4) ? 0.142 : 0.144) * Math.sqrt(3 * (n * n + n * m + m * m)) / Math.PI;\r\nconst Theta = (n, m) => Math.atan(Math.sqrt(3) * m / (2 * n + m));\r\nconst Mod = (n, m) => (2 * n + m) % 3;\r\n\r\n/**\r\n * get if a p value or a pair of (n, m) value is associated to a metallic tube.\r\n * @returns {boolean} if it is metallic\r\n */\r\nconst isMetal = function () {\r\n  const isMetalP = (p) => (p + 1) % 3 === 0;\r\n  const isMetalNM = (n, m) => Mod(n, m) === 0;\r\n  return arguments.length === 2 ?\r\n    isMetalNM(arguments[0], arguments[1]) :\r\n    isMetalP(arguments[0]);\r\n};\r\n\r\n/**\r\n * get RBM parameters (A, B) in the formula wRBM = A / dt + B of specific p and type of environment.\r\n * @param {int} p - specific p\r\n * @param {int} type - specific type of environment\r\n * @returns {Object} object of {a: number, b: number}\r\n */\r\nfunction getRBMParameters(p, type) {\r\n  class Param {\r\n    constructor(a, b) { this.a = a; this.b = b; }\r\n  }\r\n  switch (type) {\r\n    case 0: switch (p) {\r\n      case 0: case 1: return new Param(204, 27);\r\n      case 2: return new Param(200, 26);\r\n      default: return new Param(228, 0);\r\n    }\r\n    case 1: return new Param(235.9, 5.5);\r\n    case 2: return new Param(217.8, 15.7);\r\n    case 3: return new Param(227.0, 0.3);\r\n    case 4: return new Param(223.5, 12.5);\r\n    case 5: return new Param(218, 18.3);\r\n    default: throw new Error('invalid type');\r\n  }\r\n}\r\n\r\nfunction wRBM2Dt(wRBM, p, type) {\r\n  let ab = getRBMParameters(p, type);\r\n  return ab.a / (wRBM - ab.b);\r\n}\r\n\r\nfunction dt2RBM(dt, p, type) {\r\n  let ab = getRBMParameters(p, type);\r\n  return ab.a / dt + ab.b;\r\n}\r\n\r\nconst getEnergy = (dt, theta, p, type, mod) => getEnergyFromCos3Theta(dt, Math.cos(3 * theta), p, type, mod);\r\n\r\n/**\r\n * inverse of getCos3Theta, calculates transition energy from tube diameter and Math.cos(3 * chiral_angle)\r\n * @param {number} dt - tube diameter\r\n * @param {number} cos3Theta - Math.cos(3 * chiral_angle)\r\n * @param {int} p - p of transition type\r\n * @param {int} type - code of environment\r\n * @param {int} mod - mod of the tube, -1/0 for metallic -/+, 1/2 for semiconducting MOD1/MOD2\r\n * @returns {number} transition energy\r\n */\r\nfunction getEnergyFromCos3Theta(dt, cos3Theta, p, type, mod) {\r\n  let r; // return value\r\n  if (isMetal(p) && mod > 0)\r\n    throw new Error('mod should be in accordance with p');\r\n  if (type <= 2) {\r\n\r\n    if (p >= 9)\r\n      throw new Error('higher than S66 not available');\r\n    let derivative = -type0Params[p][0] / (dt * dt) + 2 * type0Params[p][1] / (dt * dt * dt);\r\n    if (derivative > 0) // 1st derivative\r\n      throw new Error('dt');\r\n    if (isMetal(p))\r\n      r = type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) +\r\n        type0Params[p][2] / (dt * dt) * cos3Theta * (mod * 2 + 1);\r\n    // mod * 2 + 1 <==> mod === 0 ? 1 : -1\r\n    else\r\n      r = type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) +\r\n        type0Params[p][2] / (dt * dt) * cos3Theta * (((p % 3) === (mod % 2)) ? -1 : 1);\r\n    r -= (type === 1) ? 0.04 : ((type === 2) ? 0.1 : 0);\r\n\r\n  } else if (type === 3) {\r\n\r\n    if (p >= 6)\r\n      throw new Error('higher than M22 not available for Super-Growth');\r\n    let a = 1.074, b = 0.467, c = 0.812;\r\n    let sgE = (extMod) => a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt)))\r\n      + type3Params[p][extMod] / (dt * dt) * cos3Theta\r\n      + ((p > 2) ? 0.059 * (p + 1) / dt : 0); // extra for larger than M11; warning: p + 1\r\n    if (isMetal(p))\r\n      r = sgE(mod + 1); // 0(Mii+) -> 1, -1(Mii-) -> 0\r\n    else\r\n      r = sgE(mod - 1); // 1(MOD1) -> 0, 2(MOD2) -> 1\r\n\r\n  } else if (type === 4 || type === 5) {\r\n\r\n    if (p === 0)\r\n      r = 1 / (0.1270 + 0.8606 * dt) + ((mod === 1) ? 0.04575 : -0.08802) / (dt * dt) * cos3Theta;\r\n    else if (p === 1)\r\n      r = 1 / (0.1174 + 0.4644 * dt) + ((mod === 1) ? -0.1829 : 0.1705) / (dt * dt) * cos3Theta;\r\n    else\r\n      throw new Error('only S11 and S22 are available for SDS-dispersed or ssDNA dispersed');\r\n    r -= (type === 5) ? 0.02 : 0;\r\n\r\n  } else throw new Error('invalid type');\r\n\r\n  return r;\r\n}\r\n\r\n/**\r\n * inverse of getEnergyFromCos3Theta(), get Math.cos(3 * chiral_angle) from transition energy and tube diameter.\r\n * @param {number} dt - tube diameter\r\n * @param {number} val - transition energy\r\n * @param {int} p - p of transition type\r\n * @param {int} type - code of environment\r\n * @returns {number[]} cos3Theta as [val_MOD1, val_MOD2] or [val_-, val_+]\r\n */\r\nfunction getCos3Theta(val, dt, p, type) {\r\n\r\n  let r = [-1, -1];\r\n\r\n  if (type <= 2) {\r\n\r\n    if (p >= 9)\r\n      throw new Error('higher than S66 not available');\r\n    val += (type === 1) ? 0.04 : ((type === 2) ? 0.1 : 0);\r\n    if (isMetal(p)) {\r\n      r[0] = (type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val) / type0Params[p][2] * (dt * dt);\r\n      r[1] = (-(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val)) / type0Params[p][2] * (dt * dt);\r\n    } else {\r\n      r[0] = (-(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val))\r\n        / type0Params[p][2] * (dt * dt) * (((p % 3) === (1 % 2)) ? -1 : 1);\r\n      r[1] = (-(type0Params[p][0] / dt - type0Params[p][1] / (dt * dt) - val))\r\n        / type0Params[p][2] * (dt * dt) * (((p % 3) === (2 % 2)) ? -1 : 1);\r\n    }\r\n\r\n  } else if (type === 3) {\r\n\r\n    if (p >= 6)\r\n      throw new Error('higher than M22 not available for Super-Growth');\r\n    let a = 1.074, b = 0.467, c = 0.812;\r\n    let calc = (extMod) => (val - a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) -\r\n      ((p > 2) ? 0.059 * (p + 1) / dt : 0)) / type3Params[p][extMod] * (dt * dt);\r\n    r[0] = calc(0); //Mii- or MOD1\r\n    r[1] = calc(1);\r\n\r\n  } else if (type === 4 || type === 5) {\r\n\r\n    val += (type === 5) ? 0.02 : 0;\r\n    if (p === 0) {\r\n      r[0] = (val - 1 / (0.1270 + 0.8606 * dt)) / 0.04575 * (dt * dt); // MOD1\r\n      r[1] = (val - 1 / (0.1270 + 0.8606 * dt)) / (-0.08802) * (dt * dt);\r\n    } else if (p === 1) {\r\n      r[0] = (val - 1 / (0.1174 + 0.4644 * dt)) / (-0.1829) * (dt * dt); // MOD1\r\n      r[1] = (val - 1 / (0.1174 + 0.4644 * dt)) / 0.1705 * (dt * dt);\r\n    } else throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\r\n\r\n  } else throw new Error('invalid type');\r\n\r\n  r[0] = parseFloat(r[0].toFixed(4)); // 4 digits\r\n  r[1] = parseFloat(r[1].toFixed(4));\r\n  if (r[0] > 1 || r[0] < 0)\r\n    r[0] = -1;\r\n  if (r[1] > 1 || r[1] < 0)\r\n    r[1] = -1;\r\n  return r;\r\n\r\n}\r\n\r\n/**\r\n * get sum of paired transition energies from their splitting and RBM frequency.\r\n * @param {number} splitting - (S22 - S11) or (M11+ - M11-), or something similar\r\n * @param {number} wRBM - RBM frequency\r\n * @param {int} pLesser - the smaller one of the p value of the 2 transition energies\r\n * @param {int} type - environment\r\n * @returns {(number|null)} average or null if invalid\r\n */\r\nfunction getAverage(splitting, wRBM, pLesser, type) {\r\n\r\n  let cos3ThetaMax = 1.5;\r\n\r\n  let dt = wRBM2Dt(wRBM, pLesser, type);\r\n\r\n  if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one');\r\n  if (type <= 2) {\r\n    if (pLesser >= 9)\r\n      throw new Error('higher than S66 not available');\r\n\r\n    if (isMetal(pLesser)) {\r\n\r\n      let cos3Theta = dt * dt * splitting / 2 * type0Params[pLesser][2];\r\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax) return null;\r\n      try {\r\n        return (\r\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, -1) +\r\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, 0)\r\n        ) / 2;\r\n      } catch (err) {\r\n        if (err.message === 'dt')\r\n          return null;\r\n        else throw err;\r\n      }\r\n    } else {\r\n      let pLarger = pLesser + 1;\r\n      let delta = (x) => type0Params[pLarger][x] - type0Params[pLesser][x];\r\n      let mod = 1;\r\n      let cos3Theta = (splitting * dt * dt - delta(0) * dt + delta(1)) / (\r\n        type0Params[pLarger][2] * (((pLarger % 3) === (mod % 2)) ? -1 : 1) -\r\n        type0Params[pLesser][2] * (((pLesser % 3) === (mod % 2)) ? -1 : 1)\r\n      );\r\n      if (cos3Theta < 0) {\r\n        mod = 2;\r\n        cos3Theta = -cos3Theta;\r\n      }\r\n      if (cos3Theta > cos3ThetaMax) return null;\r\n      try {\r\n        return (\r\n          getEnergyFromCos3Theta(dt, cos3Theta, pLarger, type, mod) +\r\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, mod)\r\n        ) / 2;\r\n      } catch (err) {\r\n        if (err.message === 'dt')\r\n          return null;\r\n        else throw err;\r\n      }\r\n    }\r\n  } else if (type === 3) {\r\n    let a = 1.074, b = 0.467, c = 0.812;\r\n    let sgE = (p) => a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) +\r\n      ((p > 2) ? 0.059 * (p + 1) / dt : 0);\r\n\r\n    if (isMetal(pLesser)) {\r\n\r\n      let cos3Theta = (splitting) * dt * dt / (type3Params[pLesser][1] - type3Params[pLesser][0]);\r\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax)\r\n        return null;\r\n      return (\r\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, -1) +\r\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, 0)\r\n      ) / 2;\r\n\r\n    } else {\r\n\r\n      let pLarger = pLesser + 1;\r\n      let mod = 1;\r\n      if (pLesser >= 6)\r\n        throw new Error('higher than M22 not available for Super-Growth');\r\n      let cos3Theta = (splitting + sgE(pLesser) - sgE(pLarger)) * dt * dt / (\r\n        type3Params[pLarger][mod - 1] - type3Params[pLesser][mod - 1]\r\n      );\r\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax) {\r\n        mod = 2;\r\n        cos3Theta = (splitting + sgE(pLesser) - sgE(pLarger)) * dt * dt / (\r\n          type3Params[pLarger][mod - 1] - type3Params[pLesser][mod - 1]);\r\n      }\r\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax)\r\n        return null;\r\n      return (\r\n        getEnergyFromCos3Theta(dt, cos3Theta, pLarger, type, mod) +\r\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, mod)\r\n      ) / 2;\r\n    }\r\n\r\n  } else if (type === 4 || type === 5) {\r\n\r\n    if (pLesser !== 0)\r\n      throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\r\n    let mod = 1;\r\n    let cos3Theta = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt)))\r\n      * dt * dt / (-0.1829 - 0.04575);\r\n\r\n    if (cos3Theta > cos3ThetaMax || cos3Theta < 0) {\r\n      mod = 2;\r\n      cos3Theta = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt)))\r\n        * dt * dt / (0.1705 - -0.08802);\r\n    }\r\n    if (cos3Theta > cos3ThetaMax || cos3Theta < 0)\r\n      return null;\r\n\r\n    return (\r\n      getEnergyFromCos3Theta(dt, cos3Theta, 1, type, mod) +\r\n      getEnergyFromCos3Theta(dt, cos3Theta, 0, type, mod)\r\n    ) / 2;\r\n  }\r\n  else throw new Error('invalid type');\r\n}\r\n\r\n/**\r\n * get a list of standard dots in a plot of a certain p (the smaller in a pair) and type\r\n * @param {int} pLesser - the smaller p in a pair\r\n * @param {int} type - type of the environment\r\n * @returns {number[][]} array of [n, m, x, y] where (n, m) is the chiral index and (x, y) is the coordinates\r\n */\r\nfunction getList(pLesser, type) {\r\n\r\n  let li = [];\r\n  const nMin = 5, nMax = 50;\r\n\r\n  if (!isMetal(pLesser)) {\r\n    if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one, e.g. S11 rather than S22');\r\n    for (let n = nMin; n < nMax; n++)\r\n      for (let m = 0; m <= n; m++) {\r\n\r\n        if (2 * n + m > seriesThreshold) break;\r\n        try {\r\n          if (!isMetal(n, m)) {\r\n            let dl = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, Mod(n, m));\r\n            let dh = getEnergy(Dt(n, m, type), Theta(n, m), pLesser + 1, type, Mod(n, m));\r\n            li.push([ n, m, (dh + dl) / 2, (dh - dl) ]);\r\n          }\r\n        } catch (err) {\r\n          if (err.message !== 'dt') throw err;\r\n        }\r\n      }\r\n  } else {\r\n    for (let n = nMin; n < nMax; n++)\r\n      for (let m = 0; m <= n; m++) {\r\n\r\n        if (2 * n + m > seriesThreshold) break;\r\n        try {\r\n          if (isMetal(n, m)) {\r\n            let dl = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, -1);\r\n            let dh = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, 0);\r\n            li.push([ n, m, (dh + dl) / 2, (dh - dl) ]);\r\n          }\r\n        } catch (err) {\r\n          if (err.message !== 'dt') throw err;\r\n        }\r\n      }\r\n  }\r\n  return li;\r\n}\r\n\r\n/**\r\n * get an parameter array used to plot RBM contour lines\r\n * @param {int} pLesser - the smaller p in a pair\r\n * @param {int} type - type of the environment\r\n * @return {{rbmLabel: number[], rbm: number[][][]}} rbm: RBM points array, rbmLabel: associated RBM value array\r\n */\r\nfunction getRBMArray(pLesser, type) {\r\n\r\n  let d = { rbmLabel: [], rbm: [] }; // return\r\n\r\n  const cos3ThetaMax = 60;\r\n  const wRBMMin = 70, wRBMMax = 350;\r\n  if (!isMetal(pLesser) && isMetal(pLesser + 1))\r\n    throw new Error('p should be the smaller one, e.g. S11 rather than S22');\r\n\r\n  for (let rbmFreq = wRBMMin; rbmFreq <= wRBMMax; rbmFreq += 10) {\r\n\r\n    let dt = wRBM2Dt(rbmFreq, pLesser, type);\r\n    let t = [];\r\n    try {\r\n      if (isMetal(pLesser)) {\r\n        let plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 0);\r\n        let minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, -1);\r\n        t.push([ (plus + minus) / 2, plus - minus ]);\r\n        plus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, 0);\r\n        minus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, -1);\r\n        t.push([ (plus + minus) / 2, plus - minus ]);\r\n        d.rbmLabel.push(rbmFreq);\r\n        d.rbm.push(t);\r\n      } else {\r\n        let plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 1); //should it be higher?\r\n        let minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 1);\r\n        t.push([ (plus + minus) / 2, plus - minus ]);\r\n        plus = getEnergyFromCos3Theta(dt, 0, pLesser + 1, type, 2);\r\n        minus = getEnergyFromCos3Theta(dt, 0, pLesser, type, 2);\r\n        t.push([ (plus + minus) / 2, plus - minus ]);\r\n        plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 2);\r\n        minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 2);\r\n        t.push([ (plus + minus) / 2, plus - minus ]);\r\n        d.rbmLabel.push(rbmFreq);\r\n        d.rbm.push(t);\r\n      }\r\n    }\r\n    catch (err)\r\n    {\r\n      if (err.message === 'dt') break;\r\n      else throw err;\r\n    }\r\n  }\r\n\r\n  return d;\r\n}\r\n","\r\n'use strict';\r\n\r\nlet isUnparsable = e => isNaN(parseFloat(e));\r\n\r\n/**\r\n * Get assigned results to be processed for plotting.\r\n * @param {Object} inputParams - input parameters\r\n * @param {int} inputParams.p1 - p denoting transition type associated with val1\r\n * @param {(string|null)} inputParams.val1 - null-able or empty-able string of transition energy 1\r\n * @param {int} inputParams.p2 - p denoting transition type associated with val2\r\n * @param {(string|null)} inputParams.val2 - null-able or empty-able string of transition energy 2\r\n * @param {(string|null)} inputParams.rbm - null-able or empty-able string of RBM frequency\r\n * @param {int} inputParams.type - environment type\r\n * @returns {Object} assigned results\r\n*/\r\nfunction getPlotParams(inputParams) {\r\n  let decimalDigits = (d) => d.split('.')[1].length;\r\n\r\n  if (isUnparsable(inputParams.val1) && isUnparsable(inputParams.val2)) {\r\n    throw new Error('Unauthorized Access');\r\n  } else if (isUnparsable(inputParams.val1) || isUnparsable(inputParams.val2)) {\r\n    if (isUnparsable(inputParams.rbm)) throw new Error('Unauthorized Access');\r\n    inputParams.uncertainty = 2.0 / Math.pow(10,\r\n      decimalDigits(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1 ));\r\n    return E1R1(inputParams);\r\n  } else {\r\n    inputParams.uncertainty = 2.0 / Math.pow(10,\r\n      Math.min(decimalDigits(inputParams.val1), decimalDigits(inputParams.val2))\r\n    );\r\n    return E2(inputParams);\r\n  }\r\n}\r\n\r\n/**\r\n * Get assigned results of 1 energy 1 RBM frequency input.\r\n * @param {Object} inputParams - input parameters\r\n * @param {int} inputParams.p1 - p denoting transition type associated with val1\r\n * @param {(string|null)} inputParams.val1 - null-able or empty-able string of transition energy 1\r\n * @param {int} inputParams.p2 - p denoting transition type associated with val2\r\n * @param {(string|null)} inputParams.val2 - null-able or empty-able string of transition energy 2\r\n * @param {string} inputParams.rbm - parseable string (to float) of RBM frequency\r\n * @param {int} inputParams.type - environment type\r\n * @returns {Object} assigned results\r\n */\r\nfunction E1R1(inputParams) {\r\n\r\n  let p1 = (isUnparsable(inputParams.val1) ? inputParams.p2 : inputParams.p1), type = inputParams.type, p = p1ToP(p1);\r\n  let val = parseFloat(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1); // float\r\n  let wRBM = parseFloat(inputParams.rbm); // float, integrity checked in getPlotParam\r\n\r\n  let dt = wRBM2Dt(wRBM, p, type);\r\n  let cos = getCos3Theta(val, dt, p, type);\r\n  let resultString = '';\r\n  let error = () => Assign({\r\n    bluePoint: null,\r\n    point: [ val, 0.23 ],\r\n    pLesser: pToLesser(p),\r\n    type: type,\r\n    pointType: 'none',\r\n    p1Lesser: p1ToLesser(p1),\r\n    resultString: resultString,\r\n    uncertainty: 0.0002\r\n  });\r\n\r\n  if (cos[0] === -1 && cos[1] === -1) {\r\n    resultString += 'Invalid input: out of range.';\r\n    return error();\r\n  }\r\n\r\n  let pAnother, modAnother;\r\n  if (isMetal(p)) {\r\n    if (p1 % 4 - 3 !== (cos[0] === -1 ? 0 : -1)) {\r\n      resultString += `Invalid input: You may have mistaken ${p1Name[p1 + 5 - (p1 % 4) * 2]} for ${p1Name[p1]}.`;\r\n      return error();\r\n    }\r\n    pAnother = p;\r\n    modAnother = cos[0] === -1 ? -1 : 0;\r\n  }\r\n  else {\r\n    pAnother = isMetal(p + 1) ? p - 1 : p + 1;\r\n    modAnother = cos[0] === -1 ? 2 : 1; // === mod1\r\n  }\r\n\r\n  let valAnother;\r\n  try {\r\n    valAnother = getEnergyFromCos3Theta(dt, cos[0] === -1 ? cos[1] : cos[0], pAnother, type, modAnother);\r\n  }\r\n  catch (err) {\r\n    if (err.message === 'dt') {\r\n      resultString += 'Invalid input: out of range, diameter too small.';\r\n      return error();\r\n    }\r\n    throw err;\r\n  }\r\n  if ((isMetal(p) && (modAnother === -1)) || (!isMetal(p) && (p > pAnother))) {\r\n    [p, pAnother] = [pAnother, p];\r\n    [val, valAnother] = [valAnother, val];\r\n  }\r\n  let x = (val + valAnother) / 2, y = valAnother - val;\r\n  return Assign({\r\n    bluePoint: null,\r\n    point: [x, y],\r\n    pLesser: p,\r\n    type: type,\r\n    pointType: 'green',\r\n    p1Lesser: p1ToLesser(p1),\r\n    resultString: resultString,\r\n    uncertainty: inputParams.uncertainty\r\n  }, modAnother);\r\n\r\n}\r\n\r\n/**\r\n * Get assigned results of 2 energy (with/without RBM frequency) input.\r\n * @param {Object} inputParams - input parameters\r\n * @param {int} inputParams.p1 - p denoting transition type associated with val1\r\n * @param {string} inputParams.val1 - parseable string (to float) of transition energy 1\r\n * @param {int} inputParams.p2 - p denoting transition type associated with val2\r\n * @param {string} inputParams.val2 - parseable string (to float) of transition energy 2\r\n * @param {(string|null)} inputParams.rbm - null-able or empty-able string of RBM frequency\r\n * @param {int} inputParams.type - environment type\r\n * @returns {Object} assigned results\r\n */\r\nfunction E2(inputParams) {\r\n\r\n  let resultString = '';\r\n  let p1 = inputParams.p1, p2 = inputParams.p2, type = inputParams.type;\r\n  let val1 = parseFloat(inputParams.val1), val2 = parseFloat(inputParams.val2);\r\n  let p_1 = p1ToP(p1), p_2 = p1ToP(p2);\r\n  let rbm = inputParams.rbm; // string\r\n\r\n  // don't use 'with' block\r\n  if (p1 > p2) {\r\n    [p_1, p_2] = [p_2, p_1];\r\n    [val1, val2] = [val2, val1];\r\n    [p1, p2] = [p2, p1];\r\n  }\r\n\r\n  if (isMetal(p_2) !== isMetal(p_1)) {\r\n    throw new Error('invalid form submission');\r\n  }\r\n\r\n  if (p2 - p1 === 1) {\r\n    let bluePoint = null;\r\n    if (!isUnparsable(rbm)) {\r\n      let average = getAverage(val2 - val1, parseFloat(rbm), p_1, type);\r\n      if (average !== null) {\r\n        bluePoint = [average, val2 - val1];\r\n      }\r\n      else {\r\n        resultString += 'Invalid input: RBM value out of range. Only transition energies are processed. <br/ >';\r\n      }\r\n    }\r\n    return Assign({\r\n      point: [ (val1 + val2) / 2, val2 - val1 ],\r\n      pLesser: p_1,\r\n      type: type,\r\n      pointType: 'red',\r\n      bluePoint: bluePoint,\r\n      p1Lesser: p1,\r\n      resultString: resultString,\r\n      uncertainty: inputParams.uncertainty\r\n    });\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * Get assigned results of pre-processed parameters.\r\n * @param {Object} params - pre-processed parameters\r\n * @param {int} mod=-1 - transferred pre-processed mod in E1R1()\r\n * @param {array} params.point - point\r\n * @param {string} params.pointType - type of the point, 'red' or 'green'\r\n * @param {int} params.pLesser - smaller one of the p in the plot\r\n * @param {int} params.p1Lesser - smaller one of the p1 in the plot\r\n * @param {int} params.type - environment type\r\n * @param {string} params.resultString - output result\r\n * @param {(number[]|null)} params.bluePoint - blue point if exists\r\n * @param {number} params.uncertainty - uncertainty of the input\r\n * @returns {Object} assigned results\r\n */\r\nfunction Assign(params, mod = -1) {\r\n\r\n  // params: plotParams\r\n  // x: average y: splitting\r\n\r\n  let uncertainty = params.uncertainty;\r\n  let dxMin = -1, dxMax = -1, dyMin = -1, dyMax = -1;\r\n  let Dist = (x1, y1, x2, y2) => Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) * 25);\r\n  let Dist_ = (e) => Dist(e[2], e[3], params.point[0], params.point[1]);\r\n  let deltaX = 0.6,\r\n    maxY = isMetal(params.pLesser) ? 0.6 : params.point[1] + 0.6,\r\n    minY = isMetal(params.pLesser) ? -0.1 : params.point[1] - 0.6;\r\n\r\n  function setBounds(dxMin_, dxMax_, dyMin_, dyMax_) {\r\n    dxMin = dxMin_;\r\n    dxMax = dxMax_;\r\n    dyMin = dyMin_;\r\n    dyMax = dyMax_;\r\n  }\r\n\r\n  // https://github.com/mihaifm/linq, many thanks to you!\r\n\r\n  params.all = Enumerable.from(getList(params.pLesser, params.type))\r\n    .where(e => (e[2] >= params.point[0] - deltaX && e[2] <= params.point[0] + deltaX &&\r\n      e[3] <= maxY && e[3] >= minY))\r\n    .toArray();\r\n\r\n  let query = Enumerable.from(params.all)\r\n    .where(e => (\r\n      (mod === -1 || isMetal(params.pLesser) || mod === Mod(e[0], e[1])) &&\r\n      params.point[0] - e[2] >= dxMin && params.point[0] - e[2] <= dxMax &&\r\n      params.point[1] - e[3] >= dyMin && params.point[1] - e[3] <= dyMax\r\n    ));\r\n\r\n  setBounds(-uncertainty, uncertainty, -uncertainty, uncertainty);\r\n  let uc = query.toArray(); // query once to get uncertainty range\r\n\r\n  function processOutput() {\r\n    params.result = query.orderBy(Dist_).toArray();\r\n    for (let i = 0; i < params.result.length; i++)\r\n      params.resultString += `\r\n        <b>(${Math.round(params.result[i][0])},${Math.round(params.result[i][1])})</b>\r\n        ${i !== params.result.length - 1 ? ', ' : ''}`;\r\n    params.resultString += '</span>';\r\n  }\r\n\r\n  if (params.pointType === 'none') {\r\n    params.ar = AssignResult.error;\r\n    params.result = [];\r\n    return params;\r\n  }\r\n\r\n  if (uncertainty > 0.2) {\r\n    params.resultString = 'Input uncertainty too large. Please give more significant figures.';\r\n    params.ar = AssignResult.error;\r\n    params.result = [];\r\n    return params;\r\n  }\r\n\r\n  if (params.pointType === 'red') {\r\n    if (params.bluePoint != null) {\r\n      if (params.bluePoint[0] - params.point[0] < 0.02) setBounds(-0.008, 0.008, -0.015, 0.015);\r\n      else setBounds(-0.030, -0.005, -0.015, 0.015); // don't change at this moment\r\n    } else setBounds(-0.020, 0.008, -0.015, 0.015);\r\n\r\n    if (query.count() === 1 && uc.length <= 1) {\r\n      params.ar = AssignResult.accurate;\r\n      params.resultString += 'The assignment result is:<br /><span style=\"font-size: 28px;\">';\r\n      processOutput();\r\n      return params;\r\n    }\r\n    setBounds(-0.040, 0.0126, -0.030, 0.030);\r\n  } else setBounds(-0.070, 0.070, -0.040, 0.040);\r\n\r\n  query.union(uc);\r\n\r\n  if (query.count() > 0) {\r\n    params.ar = AssignResult.possible;\r\n    params.resultString += 'The likely assignments include:<br /><span style=\"font-size: 28px;\">';\r\n    processOutput();\r\n    return params;\r\n  }\r\n\r\n  /*\r\n  * use the green criteria and query again for no match.\r\n  * and it's easy to see that green point, if not returned in the previous step,\r\n  * will not give results in this step.\r\n  */\r\n\r\n  setBounds(-0.070, 0.070, -0.040, 0.040);\r\n  let tmp = Enumerable.from(params.all).orderBy(Dist_).toArray();\r\n  if (Dist_(tmp[0]) / Dist_(tmp[1]) <= 0.5 && query.count() !== 0) {\r\n    params.ar = AssignResult.impossible;\r\n    query = Enumerable.from([ tmp[0] ]);\r\n    params.resultString += 'No match. The most possible assignment result is:<br /><span style=\"font-size: 28px;\">';\r\n    processOutput();\r\n    return params;\r\n  }\r\n\r\n  params.ar = AssignResult.error;\r\n  params.resultString = 'Invalid input: out of range. Please check your input.';\r\n  params.result = [];\r\n  return params;\r\n}\r\n\r\nfunction processOutput(params) {\r\n\r\n  // process RBM\r\n\r\n  const yMax = isMetal(params.pLesser) ? 0.51 : params.point[1] + 0.4;\r\n  const xMin = params.point[0] - 0.5, xMax = params.point[0] + 0.5;\r\n  let s = getRBMArray(params.pLesser, params.type); // {rbm, rbmLabel}\r\n  let rbm = [];\r\n  let rbmLabel = [];\r\n  let rbmPos = [];\r\n  let between = (xy, r1, r2) => (xy >= r1 && xy <= r2) || (xy >= r2 && xy <= r1);\r\n  for (let i = 0 ; i < s.rbm.length; i++) {\r\n    let a = s.rbm[i];\r\n    let t;\r\n    if (a.length === 2)\r\n      t = (a[0][0] - a[1][0]) * (yMax - a[1][1]) / (a[0][1] - a[1][1]) + a[1][0];\r\n    else {\r\n      let u;\r\n      if (between(yMax, a[1][1], a[0][1]))\r\n        u = 0;\r\n      else // if between(a[1][1], a[2][1])\r\n        u = 2;\r\n      t = (a[u][0] - a[1][0]) * (yMax - a[1][1]) / (a[u][1] - a[1][1]) + a[1][0];\r\n    }\r\n    if (between(t, xMax, xMin)) {\r\n      rbm.push(s.rbm[i]);\r\n      rbmLabel.push(s.rbmLabel[i]);\r\n      rbmPos.push(t);\r\n    }\r\n  }\r\n  params.rbm = rbm;\r\n  params.rbmLabel = rbmLabel;\r\n  params.rbmPos = rbmPos;\r\n\r\n  // process all\r\n\r\n  let all = params.all; // you know, lazy evaluation\r\n  let q = Enumerable.from(all)\r\n    .groupBy(\r\n      e => 2 * e[0] + e[1], // key\r\n      e => e, // group element\r\n      (key, group) => ({ key: key, value: group.orderBy(e => e[0]).toArray() })\r\n    ); // use default compare method\r\n\r\n  params.all = q.select(e => e.value.map(ee => [ee[2], ee[3]])).toArray();\r\n  params.allLabel = q.select(e => e.value.map(ee => [ee[0], ee[1]])).toArray();\r\n\r\n  // process result\r\n\r\n  let result = params.result;\r\n  params.result = result.map(e => [e[2], e[3]]);\r\n  params.resultLabel = result.map(e => [e[0], e[1]]);\r\n\r\n  params.isMetal = isMetal(params.pLesser);\r\n  params.yAxisLabel = `\\\\(${p1Name_raw[params.p1Lesser + 1]}-${p1Name_raw[params.p1Lesser]}\\\\ (\\\\mathrm{eV})\\\\)`;\r\n  params.xAxisLabel = `\\\\((${p1Name_raw[params.p1Lesser + 1]}+${p1Name_raw[params.p1Lesser]})/2\\\\ (\\\\mathrm{eV})\\\\)`;\r\n\r\n\r\n  // select g.OrderBy(elem => elem[0]);\r\n  // note that average energy may not increase monotonously as n in (n,m) increases.\r\n  // thus elem => elem[2] is wrong.\r\n  // test: S11 = 1.420, S22 = 2.134 as (6,4), see branch 2n + m = 16\r\n\r\n\r\n  return params;\r\n}\r\n","\r\n'use strict';\r\n\r\nfunction drawPlot(placeholder, params) {\r\n\r\n  let defaultRadius = 4, xMin = params.point[0] - 0.5, xMax = params.point[0] + 0.5;\r\n  let yMin = params.isMetal ? -0.01 : params.point[1] - 0.4, yMax = params.isMetal ? 0.45 : params.point[1] + 0.4;\r\n  let font = {\r\n    size: 20,\r\n    lineHeight: 20,\r\n    family: 'serif'\r\n  };\r\n  let options = {\r\n    xaxis: {\r\n      // aver\r\n      show: true,\r\n      position: 'bottom',\r\n      min: xMin,\r\n      max: xMax,\r\n      font: font,\r\n      tickLength: 10,\r\n      tickColor: 'rgb(255, 0, 0)',\r\n      color: 'rgb(255, 0, 0)'\r\n    },\r\n    yaxis: {\r\n      show: true,\r\n      min: yMin,\r\n      max: yMax,\r\n      font: font,\r\n      tickLength: 10,\r\n      tickColor: 'rgb(0, 0, 0)',\r\n      color: 'rgb(0, 0, 0)'\r\n    },\r\n    series: {\r\n      hoverable: true\r\n      // shadowSize: 0\r\n    },\r\n    grid: {\r\n      borderColor: {\r\n        top: 'rgb(0, 0, 255)',\r\n        bottom: 'rgb(255, 0, 0)',\r\n        left: 'rgb(0, 0, 0)',\r\n        right: 'rgb(0, 0, 0)'\r\n      },\r\n      hoverable: true,\r\n      minBorderMargin: 0\r\n    }\r\n  };\r\n\r\n  let series = [];\r\n  for (let i = 0; i < params.rbm.length; i++)\r\n    series.push({\r\n      color: 'rgb(208, 208, 208)', // use the shadow\r\n      data: params.rbm[i],\r\n      shadowSize: 5,\r\n      hoverable: false\r\n    });\r\n  let laser = [1240 / 785, 1240 / 633, 1240 / 532];\r\n  let laser_color = ['rgb(136, 136, 136)', 'rgb(245, 0, 0)', 'rgb(12, 127, 15)'];\r\n\r\n  for (let i = 0; i < laser.length; i++) {\r\n    series = series.concat([{\r\n      id: `laser${i.toString()}`,\r\n      color: laser_color[i],\r\n      data: [[-10, 2 * (-10 - laser[i])], [10, 2 * (10 - laser[i])]],\r\n      shadowSize: 0\r\n    }, {\r\n      id: `laser_minus${i.toString()}`,\r\n      color: laser_color[i],\r\n      data: [[-10, -2 * (-10 - laser[i])], [10, -2 * (10 - laser[i])]],\r\n      shadowSize: 0\r\n    }, {\r\n      fillBetween: `laser${i.toString()}`,\r\n      color: laser_color[i],\r\n      data: [[-10, 2 * (-10 - (laser[i] - 0.1))], [10, 2 * (10 - (laser[i] - 0.1))]], // 100 meV\r\n      lines: {\r\n        fill: 0.3,\r\n        lineWidth: 0\r\n      }\r\n    }, {\r\n      fillBetween: `laser_minus${i.toString()}`,\r\n      color: laser_color[i],\r\n      data: [[-10, -2 * (-10 - (laser[i] - 0.1))], [10, -2 * (10 - (laser[i] - 0.1))]], // 100 meV\r\n      lines: {\r\n        fill: 0.3,\r\n        lineWidth: 0\r\n      }\r\n    }, {\r\n      fillBetween: `laser${i.toString()}`,\r\n      color: laser_color[i],\r\n      data: [[-10, 2 * (-10 - (laser[i] + 0.1))], [10, 2 * (10 - (laser[i] + 0.1))]], // 200 meV\r\n      lines: {\r\n        fill: 0.3,\r\n        lineWidth: 0\r\n      }\r\n    }, {\r\n      fillBetween: `laser_minus${i.toString()}`,\r\n      color: laser_color[i],\r\n      data: [[-10, -2 * (-10 - (laser[i] + 0.1))], [10, -2 * (10 - (laser[i] + 0.1))]], // 200 meV\r\n      lines: {\r\n        fill: 0.3,\r\n        lineWidth: 0\r\n      }\r\n    }]);\r\n  }\r\n\r\n  for (let i = 0; i < params.all.length; i++) {\r\n    let mod_i = (params.allLabel[i][0][0] * 2 + params.allLabel[i][0][1]) % 3;\r\n    series.push({\r\n      color: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\r\n      data: params.all[i],\r\n      points: {\r\n        show: true,\r\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2  : defaultRadius, //15 meV\r\n        symbol: params.isMetal ? 'circle' : mod_i === 2 ? 'square' : 'triangle'\r\n      },\r\n      lines: {\r\n        show: true\r\n      },\r\n      point_labels: params.allLabel[i],\r\n      hoverable: true\r\n    });\r\n  }\r\n  for (let i = 0; i < params.result.length; i++) {\r\n    let mod_i = (params.resultLabel[i][0] * 2 + params.resultLabel[i][1]) % 3;\r\n    series.push({\r\n      color: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\r\n      data: [params.result[i]],\r\n      points: {\r\n        show: true,\r\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2 : defaultRadius,\r\n        symbol: params.isMetal ? 'circle' : mod_i === 2 ? 'square' : 'triangle',\r\n        fill: true,\r\n        fillColor: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)'\r\n      },\r\n      point_labels: [params.resultLabel[i]],\r\n      hoverable: true\r\n    });\r\n  }\r\n\r\n\r\n  // blue point is diamond, otherwise square\r\n  if (params.pointType !== 'none') {\r\n    series.push({\r\n      color: params.pointType === 'green' ? 'rgb(12, 180, 15)' : 'rgb(255, 0, 0)',\r\n      data: [params.point],\r\n      points: {\r\n        show: true,\r\n        symbol: params.pointType === 'green' ? 'diamond' : 'square',\r\n        radius: defaultRadius,\r\n        fill: true,\r\n        fillColor: params.pointType === 'green' ? 'rgba(0, 0, 0, 0)' : 'rgb(255, 0, 0)'\r\n      },\r\n      hoverable: false\r\n    });\r\n  }\r\n  if (params.bluePoint !== null)\r\n    series.push({\r\n      color: 'rgb(0, 0, 255)',\r\n      data: [params.bluePoint],\r\n      points: {\r\n        show: true,\r\n        symbol: 'diamond',\r\n        radius: defaultRadius,\r\n        fill: true,\r\n        fillColor: 'rgba(0, 0, 0, 0)'\r\n      },\r\n      hoverable: false,\r\n      shadowSize: 0\r\n    });\r\n\r\n  let $placeholder = $(`#${placeholder}`);\r\n  let plot = $.plot($placeholder, series, options);\r\n\r\n  let previousPoint = null;\r\n  $placeholder.bind('plothover', function(event, pos, item) {\r\n    if (item) {\r\n      if (previousPoint !== item.dataIndex) {\r\n        previousPoint = item.dataIndex;\r\n        $('#tooltip').remove();\r\n        showTooltip(item.pageX, item.pageY,\r\n          `(${item.series.point_labels[item.dataIndex][0]}, ${item.series.point_labels[item.dataIndex][1]})`);\r\n      }\r\n    } else {\r\n      $('#tooltip').remove();\r\n      previousPoint = null;\r\n    }\r\n  });\r\n\r\n  if (params.isMetal) {\r\n    for (let i = 0; i < params.all.length; i++) {\r\n      let s = Math.floor(params.all.length / 2);\r\n      let p = params.all[i][params.all[i].length - 1];\r\n      let p1 = params.allLabel[i][params.all[i].length - 1];\r\n      let o = plot.pointOffset({ x: p[0], y: p[1] });\r\n      let axes = plot.getAxes();\r\n      let xaxis = axes.xaxis, yaxis = axes.yaxis;\r\n      if (i % 2 === s % 2 && p[0] <= xaxis.max && p[0] >= xaxis.min &&\r\n        p[1] <= yaxis.max - 0.05 && p[1] >= yaxis.min + 0.05)\r\n        $placeholder.append(`\r\n                    <div class=\"series_label\" style=\"left: ${o.left - (i === s ? 60 : 10)}px; top: ${o.top - 30}px;\">\r\n                        <p>${i === s ? '2<i>n</i>+<i>m</i>=' : ''}${p1[0] * 2 + p1[1]}</p>\r\n                    </div>\r\n                `);\r\n    }\r\n  } else {\r\n    let mid = Math.round(params.all.length / 2);\r\n    let pMid = params.allLabel[mid][params.all[mid].length - 1];\r\n    let divMid = Math.floor((pMid[0] * 2 + pMid[1]) / 3); //use ceil, for right is scattered, left is dense\r\n\r\n    for (let i = 0; i < params.all.length; i++) {\r\n      let p = params.all[i][params.all[i].length - 1];\r\n      let p1 = params.allLabel[i][params.all[i].length - 1];\r\n      let o = plot.pointOffset({ x: p[0], y: p[1] });\r\n      let axes = plot.getAxes();\r\n      let xaxis = axes.xaxis, yaxis = axes.yaxis;\r\n      let div = Math.round((p1[0] * 2 + p1[1]) / 3);\r\n      let mod = (p1[0] * 2 + p1[1]) % 3;\r\n      if (divMid % 2 === div % 2) {\r\n        if (p[0] <= xaxis.max - 0.02 && p[0] >= xaxis.min + 0.02 && p[1] <= yaxis.max - 0.1 &&\r\n          p[1] >= yaxis.min + 0.1) {\r\n          let dA = {\r\n            color: mod === 1 ? '#FF0000' : '#000000',\r\n            left: o.left - (divMid === div ? 60 : 10),\r\n            top: o.top - (mod === 1 ? -15 : (\r\n                divMid === div && p[1] <= yaxis.max - 0.15 && p[1] >= yaxis.min + 0.18 ? 60 : 30\r\n              )\r\n            ),\r\n            c1: divMid !== div\r\n              ? ''\r\n              : ((mod === 2 && p[1] <= yaxis.max - 0.15\r\n                ? '<b>MOD2</b><br/>'\r\n                : '') + '2<i>n</i>+<i>m</i>='),\r\n            c2: p1[0] * 2 + p1[1],\r\n            c3: divMid === div && mod === 1 && p[1] >= yaxis.min + 0.12\r\n              ? '<br/><b>MOD1</b>'\r\n              : ''\r\n          };\r\n          $placeholder.append(`\r\n                        <div class=\"series_label\" style=\"color:${dA.color};left:${dA.left}px;top:${dA.top}px;\">\r\n                            <p>${dA.c1}${dA.c2}${dA.c3}</p>\r\n                        </div>\r\n                    `);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < params.rbm.length; i++) {\r\n    if (i % 2 === 0 || params.rbm.length === 1) {\r\n      let o1 = plot.pointOffset({ x: params.rbmPos[i], y: yMax });\r\n      $placeholder.append(`\r\n                <div class=\"rbm_label\" style=\"left:${o1.left - 15}px;top:${o1.top - 30}px;\">\r\n                    <p>${params.rbmLabel[i]}</p>\r\n                </div>\r\n            `);\r\n    }\r\n  }\r\n}\r\n\r\nfunction showTooltip(x, y, contents) {\r\n  $(`\r\n        <div id=\"tooltip\" class=\"tooltip right in\">\r\n            <div class=\"tooltip-arrow\" style=\"top: 50%;\"></div>\r\n            <div class=\"tooltip-inner\">${contents}</div>\r\n        </div>\r\n    `)\r\n    .css({\r\n      display: 'block',\r\n      top: y,\r\n      left: x\r\n    }).appendTo('body').fadeIn(200);\r\n}\r\n\r\n","\n'use strict';\n\nlet timeLoad = performance.now(); // before load\nlet timeStartup;\n\n$.getScript(\"https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js\"\n  + \"?config=TeX-AMS_SVG-full,Safe&locale=en\", function () {\n  timeStartup = performance.now();\n  console.log(\"MathJax load takes \" + (timeStartup - timeLoad).toFixed(2));\n});\n\nlet urlParams = {};\n(window.onpopstate = function () {\n  let match,\n    pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n    search = /([^&=]+)=?([^&]*)/g,\n    decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n    query  = window.location.search.substring(1);\n\n  urlParams = {};\n  while (match = search.exec(query))\n    urlParams[decode(match[1])] = decode(match[2]);\n})();\n\nlet $body = $(\"body\");\n\n/*\n * Step 1\n */\n\nif ($body.hasClass(\"Step1\")) {\n\n  let $selectType = $(\"#slType\");\n  for (let i = 0; i < typeName.length; i++)\n    $selectType.append(`<option value=\"${i}\">${typeName[i]}</option>`);\n\n  $selectType.selectpicker('val', 0)\n    .selectpicker('refresh')\n    .on(\"loaded.bs.select\", clearTitle)\n    .on('changed.bs.select', clearTitle);\n\n}\n\n/*\n * Step 2\n */\n\nif ($body.hasClass('Step2')) {\n\n  let type = parseInt(urlParams['Type']); // '', ' ' will be converted to NaN in this process.\n  if (isNaN(type) || type > 5 || type < 0)\n    location.href = 'Step1.html';\n\n  let $selectP1 = $('#slP1'), $selectP2 = $('#slP2'), $selectType = $('#slType');\n  let $selectP1P2 = $('#slP1, #slP2');\n\n  $('#title')[0].innerHTML += ' <small>' + typeName[type] + '</small>';\n\n  let $dataTables = $('#dataTables');\n  $dataTables.find(`.type${type}`).removeClass('hidden');\n  for (let i = 0; i < 6; i++) {\n    if (i === type) continue;\n    $dataTables.find(`.type${i}.hidden`).remove(); // MathJax will process hidden elements if not removed\n  }\n\n  // generate options\n\n  for (let i = 0; i < p1Name.length; i++) {\n    if (type >= 3) {\n      let threshold = (type === 3 ? 8 : 2);\n      if (i >= threshold) break;\n    }\n    $selectP1P2.append(`<option value=\"${i}\">${p1Name[i]}</option>`);\n  }\n  for (let i = 0; i < typeName.length; i++)\n    $selectType.append(`<option value=\"${i}\">${typeName[i]}</option>`);\n\n  // start recovering\n\n  if ((['P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined ))) {\n\n    let params = {\n      p1: parseInt(urlParams['P1']), // int\n      p2: parseInt(urlParams['P2']), // int\n      val1: urlParams['Val1'], // empty-able str\n      val2: urlParams['Val2'], // empty-able str\n      rbm: urlParams['RBM'] // empty-able str\n    };\n\n    let valueBetween = (xy, a, b) => (xy >= a && xy <= b);\n    let val1_ = parseFloat(params.val1), val2_ = parseFloat(params.val2), rbm_ = parseFloat(params.rbm);\n\n    let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n    if (emptyNum >= 2 || isNaN(params.p1) || isNaN(params.p2) ||\n      !isNaN(val1_) && !valueBetween(val1_, 0, 4) || !isNaN(val2_) && !valueBetween(val2_, 0, 4) ||\n      !isNaN(rbm_) && !valueBetween(rbm_, 30, 500) ||\n      !valueBetween(params.p1, 0, 11) || !valueBetween(params.p2, 0, 11)\n    )\n      location.href = 'Step1.html';\n\n    $selectP1.selectpicker('val', params.p1);\n    $selectP2.selectpicker('val', params.p2);\n    $('#edVal1').val(params.val1);\n    $('#edVal2').val(params.val2);\n    $('#edRBM').val(params.rbm);\n\n\n  } else if ((['P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined )))\n    location.href = 'Step1.html';\n\n  // end validation and recovering\n\n  $selectType.selectpicker('val', type);\n  $('.selectpicker').selectpicker('refresh');\n\n  $('select').on('loaded.bs.select', clearTitle);\n  $selectP1.on('changed.bs.select', function (e, index) {\n    console.log('changed fired');\n    let i = index - 1;\n    clearTitle(); // only when slP1 changes the title have to be cleared; only active select\n    $selectP2.find('option').each(function () {\n      let value = parseInt($(this).val());\n      if (i % 2 === 0 && value === i + 1 || i % 2 === 1 && value === i - 1)\n        $selectP2.selectpicker('val', value);\n    });\n    $('.selectpicker').selectpicker('refresh');\n  });\n\n}\n\n\n/*\n * Step 3\n */\n\nif ($body.hasClass('Step3')) {\n\n  // check integrity\n  if (!(['Type', 'P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined )))\n    location.href = 'Step1.html';\n\n  let inputParams = {\n    type: parseInt(urlParams['Type']), // int\n    p1: parseInt(urlParams['P1']), // int\n    p2: parseInt(urlParams['P2']), // int\n    val1: urlParams['Val1'], // empty-able str\n    val2: urlParams['Val2'], // empty-able str\n    rbm: urlParams['RBM'] // empty-able str\n  };\n\n  let valueBetween = (xy, a, b) => (xy >= a && xy <= b);\n  let val1_ = parseFloat(inputParams.val1), val2_ = parseFloat(inputParams.val2), rbm_ = parseFloat(inputParams.rbm);\n  // also, '' and ' ' will be converted to NaN in this process.\n\n  let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n  if (emptyNum >= 2 || isNaN(inputParams.type) || isNaN(inputParams.p1) || isNaN(inputParams.p2) ||\n    !isNaN(val1_) && !valueBetween(val1_, 0, 4) || !isNaN(val2_) && !valueBetween(val2_, 0, 4) ||\n    !isNaN(rbm_) && !valueBetween(rbm_, 30, 500) || !valueBetween(inputParams.type, 0, 5) ||\n    !valueBetween(inputParams.p1, 0, 11) || !valueBetween(inputParams.p2, 0, 11)\n  )\n    location.href = 'Step1.html';\n\n\n  $('#title')[0].innerHTML += ' <small>' + typeName[inputParams.type] + '</small>';\n\n  let plotParams = processOutput(getPlotParams(inputParams));\n\n  $('#resultDiv')\n    .addClass(plotParams.ar !== AssignResult.error ? 'alert-success' : 'alert-danger')\n    .html(plotParams.resultString);\n  $('#yAxisLabel').html(plotParams.yAxisLabel);\n  $('#xAxisLabel').html(plotParams.xAxisLabel);\n  $('#' + plotParams.pointType + 'Legend').css('display', '');\n  if (plotParams.bluePoint !== null)\n    $('#blueLegend').css('display', '');\n\n  $(drawPlot('plot-placeholder', plotParams));\n\n}\n\n// functions\n\nfunction clearTitle() { // used in Step1 and Step2\n\n  $('.bootstrap-select').find('button').removeAttr('title');\n}\n\nfunction validate(form) { // used in Step2\n\n  let $hint = $('#hint');\n  let invokeError = (msg) => {\n    $hint.addClass('alert-danger')\n      .html(`<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span> ${msg}`);\n    return false;\n  };\n  let val1_ = parseFloat(form.Val1.value);\n  let val2_ = parseFloat(form.Val2.value);\n  let rbm_ = parseInt(form.RBM.value);\n  let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n  if (emptyNum >= 2) return invokeError('At least 2 values are required.');\n  else {\n    if (!isNaN(val1_) && (val1_ < 0 || val1_ > 4) ||\n      !isNaN(val2_) && (val2_ < 0 || val2_ > 4) ||\n      !isNaN(rbm_) && (rbm_ < 30 || rbm_ > 500))\n      return invokeError('Please input valid value.');\n    if ($(\"#slP1\").selectpicker('val') === '')\n      return invokeError('Please select the type of transition energy.');\n\n    $(\".selectpicker\").removeAttr('disabled');\n\n    history.replaceState(null, null,\n      'Step2.html?' + ['Type', 'P1', 'Val1', 'P2', 'Val2', 'RBM'].map((e) => e + '=' + form[e].value).join('&'));\n    return true;\n  }\n}\n\nfunction changeEdit(p1_lesser, val1, val2) { // used in Step2\n  $(\"#slP1\").selectpicker('val', p1_lesser);\n  $(\"#slP2\").selectpicker('val', p1_lesser + 1);\n  $(\"#edVal1\").val(val1);\n  $(\"#edVal2\").val(val2);\n}\n\nfunction calculate(form) { // used in Step2\n\n  let $calcHint = $('#calculatorHint');\n  let $calcResult = $('#calcResult');\n\n  let invokeError = () => {\n    $calcHint.html(`\n      <div class=\"alert-danger hint\">\n        <span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n        No valid result.\n      </div>\n    `);\n    $calcResult.html('');\n  };\n\n  let n = parseInt(form.NCalc.value), m = parseInt(form.MCalc.value), t = parseInt(urlParams['Type']);\n  if (n < m) [n, m] = [m, n];\n  if (isNaN(n) || isNaN(m) || n <= 6 || m < 0 || 2 * n + m > seriesThreshold) {\n    invokeError();\n    return false;\n  }\n\n  $calcHint.html('');\n  let $resultList = $(`<tbody></tbody>`);\n  let $plotList = $('<div></div>'); // empty wrapper\n  $calcResult.html('')\n    .append($('<table class=\"table table-striped math\" id=\"calcResultList\"></table>').append($resultList))\n    .append($plotList);\n\n  $resultList.append(`<tr><td>\\\\(d_t\\\\)</td><td>\\\\( ${Dt(n, m, t).toFixed(3).toString()} \\\\ \\\\mathrm{nm}\\\\)</td></tr>`);\n\n  // generate d_t and RBM information\n\n  generateRBMCalculationResult(n, m, t, $resultList);\n\n  // do energy calculation\n\n  let calculatedEnergy = new Array(12);\n  for (let p1 = 0; p1 < 12; p1++) {\n    if (isMetal(p1ToP(p1)) !== isMetal(n, m)) {\n      calculatedEnergy[p1] = -1;\n      continue;\n    }\n    try {\n      calculatedEnergy[p1] = getEnergy(Dt(n, m, t), Theta(n, m), p1ToP(p1), t, isMetal(n, m) ? p1 % 2 - 1 : Mod(n, m))\n        .toFixed(3).toString();\n    }\n    catch (err) {\n      calculatedEnergy[p1] = -1;\n    }\n  }\n\n  // apply results to plot\n\n  let validResultNumber = 0;\n\n  for (let p1 = 0; p1 < 12; p1 += 2) {\n\n    // assert that there are results for both P1 = 2k and (2k + 1).\n    // note that for (9,7) the S66 doesn't work due to too small d_t which\n    // caused 1st derivative issue, but S55 is valid.\n\n    if (calculatedEnergy[p1] === -1 || calculatedEnergy[p1 + 1] === -1)\n      continue;\n\n    validResultNumber++;\n\n    $resultList.append(\n      $(`<tr><td>${p1Name[p1]}</td><td>\\\\(${calculatedEnergy[p1]}\\\\ \\\\mathrm{eV}\\\\)</td></tr>`)\n        .click(() => changeEdit(p1, calculatedEnergy[p1], calculatedEnergy[p1 + 1]))\n        .css('cursor', 'pointer')\n    ).append(\n      $(`<tr><td>${p1Name[p1 + 1]}</td><td>\\\\(${calculatedEnergy[p1 + 1]}\\\\ \\\\mathrm{eV}\\\\)</td></tr>`)\n        .click(() => changeEdit(p1, calculatedEnergy[p1], calculatedEnergy[p1 + 1]))\n        .css('cursor', 'pointer')\n    );\n\n    let inputParams = {\n      type: t, // int\n      p1: p1, // int\n      p2: p1 + 1, // int\n      val1: calculatedEnergy[p1], // empty-able str\n      val2: calculatedEnergy[p1 + 1], // empty-able str\n      rbm: '' // empty-able str\n    };\n\n    let plotParams = processOutput(getPlotParams(inputParams));\n    let plotId = `calcPlot${Math.round(p1 / 2)}`;\n\n    let $plot = $(`\n      <div class=\"math calc-plot-container\" \n           oncontextmenu=\"return false\" onmousedown=\"return false\">\n        <div class=\"row\">\n          <div class=\"col-lg-offset-2 col-md-offset-6 rbmAxisLabel\">\n            \\\\(\\\\omega_{\\\\mathrm{RBM}}\\\\ (\\\\mathrm{cm^{-1}})\\\\)\n          </div>\n        </div>\n        <br />\n        <div class=\"row\" style=\"position: relative;\">\n          <div class=\"yAxisLabel\">${plotParams.yAxisLabel}</div>\n          <div id=\"${plotId}\" style=\"width: 400px; height: 290px; font-family: 'Times New Roman', serif;\"\n               class=\"col-md-offset-1 col-xs-offset-1\"></div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-lg-offset-2 col-md-offset-5 xAxisLabel\">\n               ${plotParams.xAxisLabel}\n          </div>\n        </div>\n      </div>\n    `);\n\n    $plotList.append($plot);\n    drawPlot(plotId, plotParams);\n  }\n\n  if (validResultNumber === 0) {\n    invokeError();\n  }\n\n  MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\n  return false;\n}\n\nfunction generateRBMCalculationResult(n, m, t, $resultList) { // separated function to reduce complexity\n\n  let isAirSuspended = (t === 0);\n  let editRBM = (e) => $('#edRBM').val(e);\n  if (isAirSuspended) {\n    let rbmAS = dt2RBM(Dt(n, m, t), isMetal(n, m) ? 2 : 0, t).toFixed(1).toString();\n    $resultList.append(\n      $(`\n        <tr>\n            <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ ${isMetal(n, m) ? \"(p=3)\" : \"(p=1,2)\"} \\\\)</td>\n            <td>\\\\( ${rbmAS} \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\n        </tr>\n      `)\n        .click(() => editRBM(rbmAS))\n        .css('cursor', 'pointer')\n    );\n  }\n\n  let rbmGeneral = dt2RBM(Dt(n, m, t), isAirSuspended ? 3 : 0, t).toFixed(1).toString();\n  $resultList.append(\n    $(`\n      <tr>\n          <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ ${isAirSuspended ? \"(p>3)\" : \"\"} \\\\)</td>\n          <td>\\\\( ${rbmGeneral} \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\n      </tr>\n    `)\n      .click(() => editRBM(rbmGeneral))\n      .css('cursor', 'pointer')\n  );\n}\n"]}