{"version":3,"sources":["Energy.js","app.min.js","Assign.js","Plot.js","main.js"],"names":["_classCallCheck","instance","Constructor","TypeError","getRBMParameters","p","type","Param","a","b","this","Error","wRBM2Dt","wRBM","ab","dt2RBM","dt","getEnergyFromCos3Theta","cos3Theta","mod","r","isMetal","derivative","paramType0","c","sgE","extMod","Math","log10","betaP","getCos3Theta","val","calc","parseFloat","toFixed","getAverage","splitting","pLesser","cos3ThetaMax","pLarger","err","message","delta","x","getList","li","nMin","nMax","n","m","seriesThreshold","dl","getEnergy","Dt","Theta","dh","push","Mod","getRBMArray","d","rbmLabel","rbm","wRBMMin","wRBMMax","t","plus","minus","getPlotParams","inputParams","decimalDigits","split","length","isUnparsable","val1","val2","uncertainty","pow","E1R1","min","E2","p1","p2","p1ToP","cos","resultString","error","Assign","bluePoint","point","pToLesser","pointType","p1Lesser","p1ToLesser","pAnother","modAnother","p1Arr","valAnother","_ref","_ref2","y","p_1","p_2","_ref3","_ref4","_ref5","average","params","setBounds","dxMin_","dxMax_","dyMin_","dyMax_","dxMin","dxMax","dyMin","dyMax","processOutput","result","query","orderBy","Dist_","toArray","i","round","arguments","undefined","Dist","x1","y1","x2","y2","sqrt","e","deltaX","maxY","minY","all","Enumerable","from","where","uc","ar","AssignResult","count","accurate","union","possible","tmp","impossible","yMax","xMin","xMax","s","rbmPos","between","xy","r1","r2","u","q","groupBy","key","group","value","select","map","ee","allLabel","resultLabel","yAxisLabel","p1Arr_raw","xAxisLabel","drawPlot","placeholder","defaultRadius","yMin","font","size","lineHeight","family","options","xaxis","show","position","max","tickLength","tickColor","color","yaxis","series","hoverable","grid","borderColor","top","bottom","left","right","minBorderMargin","data","shadowSize","laser","laser_color","concat","id","toString","fillBetween","lines","fill","lineWidth","mod_i","points","radius","symbol","point_labels","fillColor","$placeholder","$","plot","previousPoint","bind","event","pos","item","dataIndex","remove","showTooltip","pageX","pageY","floor","o","pointOffset","axes","getAxes","append","mid","pMid","divMid","div","dA","c1","c2","c3","o1","contents","css","display","appendTo","fadeIn","clearTitle","find","removeAttr","validate","form","$hint","invokeError","msg","addClass","html","val1_","Val1","val2_","Val2","rbm_","parseInt","RBM","emptyNum","Number","isNaN","selectpicker","history","replaceState","join","changeEdit","p1_lesser","calculate","$calcHint","$calcResult","NCalc","MCalc","urlParams","$resultList","$plotList","generateRBMCalculationResult","calculatedEnergy","Array","validResultNumber","_loop","click","plotParams","plotId","$plot","MathJax","Hub","Queue","isAirSuspended","editRBM","rbmAS","rbmGeneral","typeArr","PI","atan","isMetalP","isMetalNM","theta","timeLoad","performance","now","timeStartup","getScript","navigator","language","substr","toLowerCase","console","log","window","onpopstate","match","pl","search","decode","decodeURIComponent","replace","location","substring","exec","test","userAgent","$body","hasClass","$selectType","on","href","$selectP1","$selectP2","$selectP1P2","innerHTML","removeClass","threshold","every","valueBetween","index","each"],"mappings":"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","file":"app.min.js","sourcesContent":["\n'use strict';\n\nconst seriesThreshold = 90; // max processable (2n + m) limit\n\nconst AssignResult = {\n  accurate : 0,\n  possible : 1,\n  impossible : 2,\n  error : 3\n};\n\nconst typeArr = [\n  'Air-suspended SWNTs', 'SWNTs on \\\\(\\\\mathrm{SiO_2}/\\\\mathrm{Si}\\\\) substrates', 'SWNT arrays on quartz substrates',\n  '\"Super-growth\" SWNTs', 'SDS-dispersed SWNTs', 'ssDNA-dispersed SWNTs'\n];\nconst paramType0 = [\n  [ 1.194, 0.179, 0.053 ],\n  [ 2.110, 0.388, 0.154 ],\n  [ 3.170, 0.764, 0.286 ], //M11\n  [ 4.286, 1.230, 0.412 ],\n  [ 5.380, 1.922, 0.644 ],\n  [ 6.508, 2.768, 0.928 ], //M22\n  [ 7.624, 3.768, 1.024 ], //S55\n  [ 8.734, 4.921, 1.479 ], //S66\n  [ 9.857, 6.228, 1.692 ]  //M33\n]; // (a, b, c) of type 0\nconst betaP =[\n  [ 0.09, -0.07 ],\n  [ -0.18, 0.14 ],\n  [ -0.19, 0.29 ],\n  [ 0.49, -0.33 ],\n  [ -0.43, 0.59 ],\n  [ -0.6, 0.57 ]\n]; // type 3\n\nconst p1Arr = [\n  '\\\\(S_{11}\\\\)', '\\\\(S_{22}\\\\)', '\\\\(M_{11}^-\\\\)', '\\\\(M_{11}^+\\\\)', '\\\\(S_{33}\\\\)', '\\\\(S_{44}\\\\)',\n  '\\\\(M_{22}^-\\\\)', '\\\\(M_{22}^+\\\\)', '\\\\(S_{55}\\\\)', '\\\\(S_{66}\\\\)', '\\\\(M_{33}^-\\\\)', '\\\\(M_{33}^+\\\\)'\n];\n\nconst p1Arr_raw = [\n  'S_{11}', 'S_{22}', 'M_{11}^-', 'M_{11}^+', 'S_{33}', 'S_{44}', 'M_{22}^-', 'M_{22}^+', 'S_{55}', 'S_{66}',\n  'M_{33}^-', 'M_{33}^+'\n];\n\nconst p1ToP = [ 0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8 ];\nconst pToLesser = [ 0, 0, 2, 3, 3, 5, 6, 6, 9 ];\nconst p1ToLesser = (p1) => p1 % 2 === 0 ? p1 : p1 - 1;\n\nconst Dt = (n, m, type) => ((type !== 4) ? 0.142 : 0.144) * Math.sqrt(3 * (n * n + n * m + m * m)) / Math.PI;\nconst Theta = (n, m) => Math.atan(Math.sqrt(3) * m / (2 * n + m));\nconst Mod = (n, m) => (2 * n + m) % 3;\nconst isMetalP = (p) => (p + 1) % 3 === 0;\nconst isMetalNM = (n, m) => Mod(n, m) === 0;\nconst isMetal = function () { return arguments.length === 2 ?\n  isMetalNM(arguments[0], arguments[1]) :\n  isMetalP(arguments[0]); };\n\nfunction getRBMParameters(p, type) {\n  class Param {\n    constructor(a, b) { this.a = a; this.b = b; }\n  }\n  switch (type) {\n    case 0: switch (p) {\n      case 0: case 1: return new Param(204, 27);\n      case 2: return new Param(200, 26);\n      default: return new Param(228, 0);\n    }\n    case 1: return new Param(235.9, 5.5);\n    case 2: return new Param(217.8, 15.7);\n    case 3: return new Param(227.0, 0.3);\n    case 4: return new Param(223.5, 12.5);\n    case 5: return new Param(218, 18.3);\n    default: throw new Error('invalid type');\n  }\n}\n\nfunction wRBM2Dt(wRBM, p, type) {\n  let ab = getRBMParameters(p, type);\n  return ab.a / (wRBM - ab.b);\n}\n\nfunction dt2RBM(dt, p, type) {\n  let ab = getRBMParameters(p, type);\n  return ab.a / dt + ab.b;\n}\n\nconst getEnergy = (dt, theta, p, type, mod) => getEnergyFromCos3Theta(dt, Math.cos(3 * theta), p, type, mod);\n\nfunction getEnergyFromCos3Theta(dt, cos3Theta, p, type, mod)\n{\n  let r; // return value\n  if (isMetal(p) && mod > 0)\n    throw new Error('mod should be in accordance with p');\n  if (type <= 2) {\n\n    if (p >= 9)\n      throw new Error('higher than S66 not available');\n    let derivative = -paramType0[p][0] / (dt * dt) + 2 * paramType0[p][1] / (dt * dt * dt);\n    if (derivative > 0) // 1st derivative\n      throw new Error('dt');\n    if (isMetal(p))\n      r = paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) + paramType0[p][2] / (dt * dt) * cos3Theta * (mod * 2 + 1);\n    // mod * 2 + 1 <==> mod === 0 ? 1 : -1\n    else\n      r = paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) +\n        paramType0[p][2] / (dt * dt) * cos3Theta * (((p % 3) === (mod % 2)) ? -1 : 1);\n    r -= (type === 1) ? 0.04 : ((type === 2) ? 0.1 : 0);\n\n  } else if (type === 3) {\n\n    if (p >= 6)\n      throw new Error('higher than M22 not available for Super-Growth');\n    let a = 1.074, b = 0.467, c = 0.812;\n    let sgE = (extMod) => a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt)))\n      + betaP[p][extMod] / (dt * dt) * cos3Theta\n      + ((p > 2) ? 0.059 * (p + 1) / dt : 0); // extra for larger than M11; warning: p + 1\n    if (isMetal(p))\n      r = sgE(mod + 1); // 0(Mii+) -> 1, -1(Mii-) -> 0\n    else\n      r = sgE(mod - 1); // 1(MOD1) -> 0, 2(MOD2) -> 1\n\n  } else if (type === 4 || type === 5) {\n\n    if (p === 0)\n      r = 1 / (0.1270 + 0.8606 * dt) + ((mod === 1) ? 0.04575 : -0.08802) / (dt * dt) * cos3Theta;\n    else if (p === 1)\n      r = 1 / (0.1174 + 0.4644 * dt) + ((mod === 1) ? -0.1829 : 0.1705) / (dt * dt) * cos3Theta;\n    else\n      throw new Error('only S11 and S22 are available for SDS-dispersed or ssDNA dispersed');\n    r -= (type === 5) ? 0.02 : 0;\n\n  } else throw new Error('invalid type');\n\n  return r;\n}\n\nfunction getCos3Theta(val, dt, p, type) {\n\n  // returns cos3Theta as [val_modLesser, val_modLarger]\n\n  let r = [-1, -1];\n\n  if (type <= 2) {\n\n    if (p >= 9)\n      throw new Error('higher than S66 not available');\n    val += (type === 1) ? 0.04 : ((type === 2) ? 0.1 : 0);\n    if (isMetal(p)) {\n      r[0] = (paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) - val) / paramType0[p][2] * (dt * dt); // Mii-\n      r[1] = (-(paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) - val)) / paramType0[p][2] * (dt * dt); // Mii+\n    } else {\n      r[0] = (-(paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) - val))\n        / paramType0[p][2] * (dt * dt) * (((p % 3) === (1 % 2)) ? -1 : 1); //mod1\n      r[1] = (-(paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) - val))\n        / paramType0[p][2] * (dt * dt) * (((p % 3) === (2 % 2)) ? -1 : 1); //mod2\n    }\n\n  } else if (type === 3) {\n\n    if (p >= 6)\n      throw new Error('higher than M22 not available for Super-Growth');\n    let a = 1.074, b = 0.467, c = 0.812;\n    let calc = (extMod) => (val - a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) -\n      ((p > 2) ? 0.059 * (p + 1) / dt : 0)) / betaP[p][extMod] * (dt * dt);\n    r[0] = calc(0); //Mii- or MOD1\n    r[1] = calc(1);\n\n  } else if (type === 4 || type === 5) {\n\n    val += (type === 5) ? 0.02 : 0;\n    if (p === 0) {\n      r[0] = (val - 1 / (0.1270 + 0.8606 * dt)) / 0.04575 * (dt * dt); // MOD1\n      r[1] = (val - 1 / (0.1270 + 0.8606 * dt)) / (-0.08802) * (dt * dt);\n    } else if (p === 1) {\n      r[0] = (val - 1 / (0.1174 + 0.4644 * dt)) / (-0.1829) * (dt * dt); // MOD1\n      r[1] = (val - 1 / (0.1174 + 0.4644 * dt)) / 0.1705 * (dt * dt);\n    } else throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\n\n  } else throw new Error('invalid type');\n\n  r[0] = parseFloat(r[0].toFixed(4)); // 4 digits\n  r[1] = parseFloat(r[1].toFixed(4));\n  if (r[0] > 1 || r[0] < 0)\n    r[0] = -1;\n  if (r[1] > 1 || r[1] < 0)\n    r[1] = -1;\n  return r;\n\n}\n\nfunction getAverage(splitting, wRBM, pLesser, type) {\n\n  let cos3ThetaMax = 1.5;\n  // returns null-able average\n\n  let dt = wRBM2Dt(wRBM, pLesser, type);\n\n  if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one');\n  if (type <= 2) {\n    if (pLesser >= 9)\n      throw new Error('higher than S66 not available');\n\n    if (isMetal(pLesser)) {\n\n      let cos3Theta = dt * dt * splitting / 2 * paramType0[pLesser][2];\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax) return null;\n      try {\n        return (\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, -1) +\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, 0)\n        ) / 2;\n      } catch (err) {\n        if (err.message === 'dt')\n          return null;\n        else throw err;\n      }\n    } else {\n      let pLarger = pLesser + 1;\n      let delta = (x) => paramType0[pLarger][x] - paramType0[pLesser][x];\n      let mod = 1;\n      let cos3Theta = (splitting * dt * dt - delta(0) * dt + delta(1)) / (\n        paramType0[pLarger][2] * (((pLarger % 3) === (mod % 2)) ? -1 : 1) -\n        paramType0[pLesser][2] * (((pLesser % 3) === (mod % 2)) ? -1 : 1)\n      );\n      if (cos3Theta < 0) {\n        mod = 2;\n        cos3Theta = -cos3Theta;\n      }\n      if (cos3Theta > cos3ThetaMax) return null;\n      try {\n        return (\n          getEnergyFromCos3Theta(dt, cos3Theta, pLarger, type, mod) +\n          getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, mod)\n        ) / 2;\n      } catch (err) {\n        if (err.message === 'dt')\n          return null;\n        else throw err;\n      }\n    }\n  } else if (type === 3) {\n    let a = 1.074, b = 0.467, c = 0.812;\n    let sgE = (p) => a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) +\n      ((p > 2) ? 0.059 * (p + 1) / dt : 0);\n\n    if (isMetal(pLesser)) {\n\n      let cos3Theta = (splitting) * dt * dt / (betaP[pLesser][1] - betaP[pLesser][0]);\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax)\n        return null;\n      return (\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, -1) +\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, 0)\n      ) / 2;\n\n    } else {\n\n      let pLarger = pLesser + 1;\n      let mod = 1;\n      if (pLesser >= 6)\n        throw new Error('higher than M22 not available for Super-Growth');\n      let cos3Theta = (splitting + sgE(pLesser) - sgE(pLarger)) * dt * dt / (\n        betaP[pLarger][mod - 1] - betaP[pLesser][mod - 1]\n      );\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax) {\n        mod = 2;\n        cos3Theta = (splitting + sgE(pLesser) - sgE(pLarger)) * dt * dt / (\n          betaP[pLarger][mod - 1] - betaP[pLesser][mod - 1]);\n      }\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax)\n        return null;\n      return (\n        getEnergyFromCos3Theta(dt, cos3Theta, pLarger, type, mod) +\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, mod)\n      ) / 2;\n    }\n\n  } else if (type === 4 || type === 5) {\n\n    if (pLesser !== 0)\n      throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\n    let mod = 1;\n    let cos3Theta = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt)))\n      * dt * dt / (-0.1829 - 0.04575);\n\n    if (cos3Theta > cos3ThetaMax || cos3Theta < 0) {\n      mod = 2;\n      cos3Theta = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt)))\n        * dt * dt / (0.1705 - -0.08802);\n    }\n    if (cos3Theta > cos3ThetaMax || cos3Theta < 0)\n      return null;\n\n    return (\n      getEnergyFromCos3Theta(dt, cos3Theta, 1, type, mod) +\n      getEnergyFromCos3Theta(dt, cos3Theta, 0, type, mod)\n    ) / 2;\n  }\n  else throw new Error('invalid type');\n}\n\nfunction getList(pLesser, type) {\n\n  let li = [];\n  const nMin = 5, nMax = 50;\n\n  if (!isMetal(pLesser)) {\n    if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one, e.g. S11 rather than S22');\n    for (let n = nMin; n < nMax; n++)\n      for (let m = 0; m <= n; m++) {\n\n        if (2 * n + m > seriesThreshold) break;\n        try {\n          if (!isMetal(n, m)) {\n            let dl = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, Mod(n, m));\n            let dh = getEnergy(Dt(n, m, type), Theta(n, m), pLesser + 1, type, Mod(n, m));\n            li.push([ n, m, (dh + dl) / 2, (dh - dl) ]);\n          }\n        } catch (err) {\n          if (err.message !== 'dt') throw err;\n        }\n      }\n  } else {\n    for (let n = nMin; n < nMax; n++)\n      for (let m = 0; m <= n; m++) {\n\n        if (2 * n + m > seriesThreshold) break;\n        try {\n          if (isMetal(n, m)) {\n            let dl = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, -1);\n            let dh = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, 0);\n            li.push([ n, m, (dh + dl) / 2, (dh - dl) ]);\n          }\n        } catch (err) {\n          if (err.message !== 'dt') throw err;\n        }\n      }\n  }\n  return li;\n}\n\nfunction getRBMArray(pLesser, type) {\n\n  let d = { rbmLabel: [], rbm: [] }; // return\n\n  const cos3ThetaMax = 60;\n  const wRBMMin = 70, wRBMMax = 350;\n  if (!isMetal(pLesser) && isMetal(pLesser + 1))\n    throw new Error('p should be the smaller one, e.g. S11 rather than S22');\n\n  for (let rbm = wRBMMin; rbm <= wRBMMax; rbm += 10) {\n\n    let dt = wRBM2Dt(rbm, pLesser, type);\n    let t = [];\n    try {\n      if (isMetal(pLesser)) {\n        let plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 0);\n        let minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, -1);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        plus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, 0);\n        minus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, -1);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        d.rbmLabel.push(rbm);\n        d.rbm.push(t);\n      } else {\n        let plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 1); //should it be higher?\n        let minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 1);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        plus = getEnergyFromCos3Theta(dt, 0, pLesser + 1, type, 2);\n        minus = getEnergyFromCos3Theta(dt, 0, pLesser, type, 2);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 2);\n        minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 2);\n        t.push([ (plus + minus) / 2, plus - minus ]);\n        d.rbmLabel.push(rbm);\n        d.rbm.push(t);\n      }\n    }\n    catch (err)\n    {\n      if (err.message === 'dt') break;\n      else throw err;\n    }\n  }\n\n  return d;\n}\n","\n'use strict';function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}\n\nvar seriesThreshold = 90; // max processable (2n + m) limit\n\nvar AssignResult = {\n  accurate: 0,\n  possible: 1,\n  impossible: 2,\n  error: 3 };\n\n\nvar typeArr = [\n'Air-suspended SWNTs', 'SWNTs on \\\\(\\\\mathrm{SiO_2}/\\\\mathrm{Si}\\\\) substrates', 'SWNT arrays on quartz substrates',\n'\"Super-growth\" SWNTs', 'SDS-dispersed SWNTs', 'ssDNA-dispersed SWNTs'];\n\nvar paramType0 = [\n[1.194, 0.179, 0.053],\n[2.110, 0.388, 0.154],\n[3.170, 0.764, 0.286], //M11\n[4.286, 1.230, 0.412],\n[5.380, 1.922, 0.644],\n[6.508, 2.768, 0.928], //M22\n[7.624, 3.768, 1.024], //S55\n[8.734, 4.921, 1.479], //S66\n[9.857, 6.228, 1.692] //M33\n]; // (a, b, c) of type 0\nvar betaP = [\n[0.09, -0.07],\n[-0.18, 0.14],\n[-0.19, 0.29],\n[0.49, -0.33],\n[-0.43, 0.59],\n[-0.6, 0.57]];\n// type 3\n\nvar p1Arr = [\n'\\\\(S_{11}\\\\)', '\\\\(S_{22}\\\\)', '\\\\(M_{11}^-\\\\)', '\\\\(M_{11}^+\\\\)', '\\\\(S_{33}\\\\)', '\\\\(S_{44}\\\\)',\n'\\\\(M_{22}^-\\\\)', '\\\\(M_{22}^+\\\\)', '\\\\(S_{55}\\\\)', '\\\\(S_{66}\\\\)', '\\\\(M_{33}^-\\\\)', '\\\\(M_{33}^+\\\\)'];\n\n\nvar p1Arr_raw = [\n'S_{11}', 'S_{22}', 'M_{11}^-', 'M_{11}^+', 'S_{33}', 'S_{44}', 'M_{22}^-', 'M_{22}^+', 'S_{55}', 'S_{66}',\n'M_{33}^-', 'M_{33}^+'];\n\n\nvar p1ToP = [0, 1, 2, 2, 3, 4, 5, 5, 6, 7, 8, 8];\nvar pToLesser = [0, 0, 2, 3, 3, 5, 6, 6, 9];\nvar p1ToLesser = function p1ToLesser(p1) {return p1 % 2 === 0 ? p1 : p1 - 1;};\n\nvar Dt = function Dt(n, m, type) {return (type !== 4 ? 0.142 : 0.144) * Math.sqrt(3 * (n * n + n * m + m * m)) / Math.PI;};\nvar Theta = function Theta(n, m) {return Math.atan(Math.sqrt(3) * m / (2 * n + m));};\nvar Mod = function Mod(n, m) {return (2 * n + m) % 3;};\nvar isMetalP = function isMetalP(p) {return (p + 1) % 3 === 0;};\nvar isMetalNM = function isMetalNM(n, m) {return Mod(n, m) === 0;};\nvar isMetal = function isMetal() {return arguments.length === 2 ?\n  isMetalNM(arguments[0], arguments[1]) :\n  isMetalP(arguments[0]);};\n\nfunction getRBMParameters(p, type) {var\n  Param =\n  function Param(a, b) {_classCallCheck(this, Param);this.a = a;this.b = b;};\n\n  switch (type) {\n    case 0:switch (p) {\n        case 0:case 1:return new Param(204, 27);\n        case 2:return new Param(200, 26);\n        default:return new Param(228, 0);}\n\n    case 1:return new Param(235.9, 5.5);\n    case 2:return new Param(217.8, 15.7);\n    case 3:return new Param(227.0, 0.3);\n    case 4:return new Param(223.5, 12.5);\n    case 5:return new Param(218, 18.3);\n    default:throw new Error('invalid type');}\n\n}\n\nfunction wRBM2Dt(wRBM, p, type) {\n  var ab = getRBMParameters(p, type);\n  return ab.a / (wRBM - ab.b);\n}\n\nfunction dt2RBM(dt, p, type) {\n  var ab = getRBMParameters(p, type);\n  return ab.a / dt + ab.b;\n}\n\nvar getEnergy = function getEnergy(dt, theta, p, type, mod) {return getEnergyFromCos3Theta(dt, Math.cos(3 * theta), p, type, mod);};\n\nfunction getEnergyFromCos3Theta(dt, cos3Theta, p, type, mod)\n{\n  var r = void 0; // return value\n  if (isMetal(p) && mod > 0)\n  throw new Error('mod should be in accordance with p');\n  if (type <= 2) {\n\n    if (p >= 9)\n    throw new Error('higher than S66 not available');\n    var derivative = -paramType0[p][0] / (dt * dt) + 2 * paramType0[p][1] / (dt * dt * dt);\n    if (derivative > 0) // 1st derivative\n      throw new Error('dt');\n    if (isMetal(p))\n    r = paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) + paramType0[p][2] / (dt * dt) * cos3Theta * (mod * 2 + 1);\n    // mod * 2 + 1 <==> mod === 0 ? 1 : -1\n    else\n      r = paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) +\n      paramType0[p][2] / (dt * dt) * cos3Theta * (p % 3 === mod % 2 ? -1 : 1);\n    r -= type === 1 ? 0.04 : type === 2 ? 0.1 : 0;\n\n  } else if (type === 3) {\n\n    if (p >= 6)\n    throw new Error('higher than M22 not available for Super-Growth');\n    var a = 1.074,b = 0.467,c = 0.812;\n    var sgE = function sgE(extMod) {return a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) +\n      betaP[p][extMod] / (dt * dt) * cos3Theta + (\n      p > 2 ? 0.059 * (p + 1) / dt : 0);}; // extra for larger than M11; warning: p + 1\n    if (isMetal(p))\n    r = sgE(mod + 1); // 0(Mii+) -> 1, -1(Mii-) -> 0\n    else\n      r = sgE(mod - 1); // 1(MOD1) -> 0, 2(MOD2) -> 1\n\n  } else if (type === 4 || type === 5) {\n\n    if (p === 0)\n    r = 1 / (0.1270 + 0.8606 * dt) + (mod === 1 ? 0.04575 : -0.08802) / (dt * dt) * cos3Theta;else\n    if (p === 1)\n    r = 1 / (0.1174 + 0.4644 * dt) + (mod === 1 ? -0.1829 : 0.1705) / (dt * dt) * cos3Theta;else\n\n    throw new Error('only S11 and S22 are available for SDS-dispersed or ssDNA dispersed');\n    r -= type === 5 ? 0.02 : 0;\n\n  } else throw new Error('invalid type');\n\n  return r;\n}\n\nfunction getCos3Theta(val, dt, p, type) {\n\n  // returns cos3Theta as [val_modLesser, val_modLarger]\n\n  var r = [-1, -1];\n\n  if (type <= 2) {\n\n    if (p >= 9)\n    throw new Error('higher than S66 not available');\n    val += type === 1 ? 0.04 : type === 2 ? 0.1 : 0;\n    if (isMetal(p)) {\n      r[0] = (paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) - val) / paramType0[p][2] * (dt * dt); // Mii-\n      r[1] = -(paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) - val) / paramType0[p][2] * (dt * dt); // Mii+\n    } else {\n      r[0] = -(paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) - val) /\n      paramType0[p][2] * (dt * dt) * (p % 3 === 1 % 2 ? -1 : 1); //mod1\n      r[1] = -(paramType0[p][0] / dt - paramType0[p][1] / (dt * dt) - val) /\n      paramType0[p][2] * (dt * dt) * (p % 3 === 2 % 2 ? -1 : 1); //mod2\n    }\n\n  } else if (type === 3) {\n\n    if (p >= 6)\n    throw new Error('higher than M22 not available for Super-Growth');\n    var a = 1.074,b = 0.467,c = 0.812;\n    var calc = function calc(extMod) {return (val - a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) - (\n      p > 2 ? 0.059 * (p + 1) / dt : 0)) / betaP[p][extMod] * (dt * dt);};\n    r[0] = calc(0); //Mii- or MOD1\n    r[1] = calc(1);\n\n  } else if (type === 4 || type === 5) {\n\n    val += type === 5 ? 0.02 : 0;\n    if (p === 0) {\n      r[0] = (val - 1 / (0.1270 + 0.8606 * dt)) / 0.04575 * (dt * dt); // MOD1\n      r[1] = (val - 1 / (0.1270 + 0.8606 * dt)) / -0.08802 * (dt * dt);\n    } else if (p === 1) {\n      r[0] = (val - 1 / (0.1174 + 0.4644 * dt)) / -0.1829 * (dt * dt); // MOD1\n      r[1] = (val - 1 / (0.1174 + 0.4644 * dt)) / 0.1705 * (dt * dt);\n    } else throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\n\n  } else throw new Error('invalid type');\n\n  r[0] = parseFloat(r[0].toFixed(4)); // 4 digits\n  r[1] = parseFloat(r[1].toFixed(4));\n  if (r[0] > 1 || r[0] < 0)\n  r[0] = -1;\n  if (r[1] > 1 || r[1] < 0)\n  r[1] = -1;\n  return r;\n\n}\n\nfunction getAverage(splitting, wRBM, pLesser, type) {\n\n  var cos3ThetaMax = 1.5;\n  // returns null-able average\n\n  var dt = wRBM2Dt(wRBM, pLesser, type);\n\n  if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one');\n  if (type <= 2) {\n    if (pLesser >= 9)\n    throw new Error('higher than S66 not available');\n\n    if (isMetal(pLesser)) {\n\n      var cos3Theta = dt * dt * splitting / 2 * paramType0[pLesser][2];\n      if (cos3Theta < 0 || cos3Theta > cos3ThetaMax) return null;\n      try {\n        return (\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, -1) +\n        getEnergyFromCos3Theta(dt, cos3Theta, pLesser, type, 0)) /\n        2;\n      } catch (err) {\n        if (err.message === 'dt')\n        return null;else\n        throw err;\n      }\n    } else {\n      var pLarger = pLesser + 1;\n      var delta = function delta(x) {return paramType0[pLarger][x] - paramType0[pLesser][x];};\n      var mod = 1;\n      var _cos3Theta = (splitting * dt * dt - delta(0) * dt + delta(1)) / (\n      paramType0[pLarger][2] * (pLarger % 3 === mod % 2 ? -1 : 1) -\n      paramType0[pLesser][2] * (pLesser % 3 === mod % 2 ? -1 : 1));\n\n      if (_cos3Theta < 0) {\n        mod = 2;\n        _cos3Theta = -_cos3Theta;\n      }\n      if (_cos3Theta > cos3ThetaMax) return null;\n      try {\n        return (\n        getEnergyFromCos3Theta(dt, _cos3Theta, pLarger, type, mod) +\n        getEnergyFromCos3Theta(dt, _cos3Theta, pLesser, type, mod)) /\n        2;\n      } catch (err) {\n        if (err.message === 'dt')\n        return null;else\n        throw err;\n      }\n    }\n  } else if (type === 3) {\n    var a = 1.074,b = 0.467,c = 0.812;\n    var sgE = function sgE(p) {return a * (p + 1) / dt * (1 + b * Math.log10(c / ((p + 1) / dt))) + (\n      p > 2 ? 0.059 * (p + 1) / dt : 0);};\n\n    if (isMetal(pLesser)) {\n\n      var _cos3Theta2 = splitting * dt * dt / (betaP[pLesser][1] - betaP[pLesser][0]);\n      if (_cos3Theta2 < 0 || _cos3Theta2 > cos3ThetaMax)\n      return null;\n      return (\n      getEnergyFromCos3Theta(dt, _cos3Theta2, pLesser, type, -1) +\n      getEnergyFromCos3Theta(dt, _cos3Theta2, pLesser, type, 0)) /\n      2;\n\n    } else {\n\n      var _pLarger = pLesser + 1;\n      var _mod = 1;\n      if (pLesser >= 6)\n      throw new Error('higher than M22 not available for Super-Growth');\n      var _cos3Theta3 = (splitting + sgE(pLesser) - sgE(_pLarger)) * dt * dt / (\n      betaP[_pLarger][_mod - 1] - betaP[pLesser][_mod - 1]);\n\n      if (_cos3Theta3 < 0 || _cos3Theta3 > cos3ThetaMax) {\n        _mod = 2;\n        _cos3Theta3 = (splitting + sgE(pLesser) - sgE(_pLarger)) * dt * dt / (\n        betaP[_pLarger][_mod - 1] - betaP[pLesser][_mod - 1]);\n      }\n      if (_cos3Theta3 < 0 || _cos3Theta3 > cos3ThetaMax)\n      return null;\n      return (\n      getEnergyFromCos3Theta(dt, _cos3Theta3, _pLarger, type, _mod) +\n      getEnergyFromCos3Theta(dt, _cos3Theta3, pLesser, type, _mod)) /\n      2;\n    }\n\n  } else if (type === 4 || type === 5) {\n\n    if (pLesser !== 0)\n    throw new Error('only S11 and S22 are available for SDS-disp. or ssDNA disp.');\n    var _mod2 = 1;\n    var _cos3Theta4 = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt))) *\n    dt * dt / (-0.1829 - 0.04575);\n\n    if (_cos3Theta4 > cos3ThetaMax || _cos3Theta4 < 0) {\n      _mod2 = 2;\n      _cos3Theta4 = (splitting - (1 / (0.1174 + 0.4644 * dt) - 1 / (0.1270 + 0.8606 * dt))) *\n      dt * dt / (0.1705 - -0.08802);\n    }\n    if (_cos3Theta4 > cos3ThetaMax || _cos3Theta4 < 0)\n    return null;\n\n    return (\n    getEnergyFromCos3Theta(dt, _cos3Theta4, 1, type, _mod2) +\n    getEnergyFromCos3Theta(dt, _cos3Theta4, 0, type, _mod2)) /\n    2;\n  } else\n  throw new Error('invalid type');\n}\n\nfunction getList(pLesser, type) {\n\n  var li = [];\n  var nMin = 5,nMax = 50;\n\n  if (!isMetal(pLesser)) {\n    if (isMetal(pLesser + 1)) throw new Error('p should be the smaller one, e.g. S11 rather than S22');\n    for (var n = nMin; n < nMax; n++) {\n      for (var m = 0; m <= n; m++) {\n\n        if (2 * n + m > seriesThreshold) break;\n        try {\n          if (!isMetal(n, m)) {\n            var dl = getEnergy(Dt(n, m, type), Theta(n, m), pLesser, type, Mod(n, m));\n            var dh = getEnergy(Dt(n, m, type), Theta(n, m), pLesser + 1, type, Mod(n, m));\n            li.push([n, m, (dh + dl) / 2, dh - dl]);\n          }\n        } catch (err) {\n          if (err.message !== 'dt') throw err;\n        }\n      }}\n  } else {\n    for (var _n = nMin; _n < nMax; _n++) {\n      for (var _m = 0; _m <= _n; _m++) {\n\n        if (2 * _n + _m > seriesThreshold) break;\n        try {\n          if (isMetal(_n, _m)) {\n            var _dl = getEnergy(Dt(_n, _m, type), Theta(_n, _m), pLesser, type, -1);\n            var _dh = getEnergy(Dt(_n, _m, type), Theta(_n, _m), pLesser, type, 0);\n            li.push([_n, _m, (_dh + _dl) / 2, _dh - _dl]);\n          }\n        } catch (err) {\n          if (err.message !== 'dt') throw err;\n        }\n      }}\n  }\n  return li;\n}\n\nfunction getRBMArray(pLesser, type) {\n\n  var d = { rbmLabel: [], rbm: [] }; // return\n\n  var cos3ThetaMax = 60;\n  var wRBMMin = 70,wRBMMax = 350;\n  if (!isMetal(pLesser) && isMetal(pLesser + 1))\n  throw new Error('p should be the smaller one, e.g. S11 rather than S22');\n\n  for (var rbm = wRBMMin; rbm <= wRBMMax; rbm += 10) {\n\n    var dt = wRBM2Dt(rbm, pLesser, type);\n    var t = [];\n    try {\n      if (isMetal(pLesser)) {\n        var plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 0);\n        var minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, -1);\n        t.push([(plus + minus) / 2, plus - minus]);\n        plus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, 0);\n        minus = getEnergyFromCos3Theta(dt, -cos3ThetaMax, pLesser, type, -1);\n        t.push([(plus + minus) / 2, plus - minus]);\n        d.rbmLabel.push(rbm);\n        d.rbm.push(t);\n      } else {\n        var _plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 1); //should it be higher?\n        var _minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 1);\n        t.push([(_plus + _minus) / 2, _plus - _minus]);\n        _plus = getEnergyFromCos3Theta(dt, 0, pLesser + 1, type, 2);\n        _minus = getEnergyFromCos3Theta(dt, 0, pLesser, type, 2);\n        t.push([(_plus + _minus) / 2, _plus - _minus]);\n        _plus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser + 1, type, 2);\n        _minus = getEnergyFromCos3Theta(dt, cos3ThetaMax, pLesser, type, 2);\n        t.push([(_plus + _minus) / 2, _plus - _minus]);\n        d.rbmLabel.push(rbm);\n        d.rbm.push(t);\n      }\n    }\n    catch (err)\n    {\n      if (err.message === 'dt') break;else\n      throw err;\n    }\n  }\n\n  return d;\n}\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkVuZXJneS5qcyJdLCJuYW1lcyI6WyJzZXJpZXNUaHJlc2hvbGQiLCJBc3NpZ25SZXN1bHQiLCJhY2N1cmF0ZSIsInBvc3NpYmxlIiwiaW1wb3NzaWJsZSIsImVycm9yIiwidHlwZUFyciIsInBhcmFtVHlwZTAiLCJiZXRhUCIsInAxQXJyIiwicDFBcnJfcmF3IiwicDFUb1AiLCJwVG9MZXNzZXIiLCJwMVRvTGVzc2VyIiwicDEiLCJEdCIsIm4iLCJtIiwidHlwZSIsIk1hdGgiLCJzcXJ0IiwiUEkiLCJUaGV0YSIsImF0YW4iLCJNb2QiLCJpc01ldGFsUCIsInAiLCJpc01ldGFsTk0iLCJpc01ldGFsIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwiZ2V0UkJNUGFyYW1ldGVycyIsIlBhcmFtIiwiYSIsImIiLCJFcnJvciIsIndSQk0yRHQiLCJ3UkJNIiwiYWIiLCJkdDJSQk0iLCJkdCIsImdldEVuZXJneSIsInRoZXRhIiwibW9kIiwiZ2V0RW5lcmd5RnJvbUNvczNUaGV0YSIsImNvcyIsImNvczNUaGV0YSIsInIiLCJkZXJpdmF0aXZlIiwiYyIsInNnRSIsImV4dE1vZCIsImxvZzEwIiwiZ2V0Q29zM1RoZXRhIiwidmFsIiwiY2FsYyIsInBhcnNlRmxvYXQiLCJ0b0ZpeGVkIiwiZ2V0QXZlcmFnZSIsInNwbGl0dGluZyIsInBMZXNzZXIiLCJjb3MzVGhldGFNYXgiLCJlcnIiLCJtZXNzYWdlIiwicExhcmdlciIsImRlbHRhIiwieCIsImdldExpc3QiLCJsaSIsIm5NaW4iLCJuTWF4IiwiZGwiLCJkaCIsInB1c2giLCJnZXRSQk1BcnJheSIsImQiLCJyYm1MYWJlbCIsInJibSIsIndSQk1NaW4iLCJ3UkJNTWF4IiwidCIsInBsdXMiLCJtaW51cyJdLCJtYXBwaW5ncyI6IjtBQUNBLGE7O0FBRUEsSUFBTUEsa0JBQWtCLEVBQXhCLEMsQ0FBNEI7O0FBRTVCLElBQU1DLGVBQWU7QUFDbkJDLFlBQVcsQ0FEUTtBQUVuQkMsWUFBVyxDQUZRO0FBR25CQyxjQUFhLENB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RUFBa0QxQyxJQUFsRCxFQUF3RCxDQUF4RCxDQUFSO0FBQ0E4RCxVQUFFUCxJQUFGLENBQU8sQ0FBRSxDQUFDUSxRQUFPQyxNQUFSLElBQWlCLENBQW5CLEVBQXNCRCxRQUFPQyxNQUE3QixDQUFQO0FBQ0FQLFVBQUVDLFFBQUYsQ0FBV0gsSUFBWCxDQUFnQkksR0FBaEI7QUFDQUYsVUFBRUUsR0FBRixDQUFNSixJQUFOLENBQVdPLENBQVg7QUFDRDtBQUNGO0FBQ0QsV0FBT2xCLEdBQVA7QUFDQTtBQUNFLFVBQUlBLElBQUlDLE9BQUosS0FBZ0IsSUFBcEIsRUFBMEIsTUFBMUI7QUFDSyxZQUFNRCxHQUFOO0FBQ047QUFDRjs7QUFFRCxTQUFPYSxDQUFQO0FBQ0QiLCJmaWxlIjoiRW5lcmd5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4ndXNlIHN0cmljdCc7XG5cbmNvbnN0IHNlcmllc1RocmVzaG9sZCA9IDkwOyAvLyBtYXggcHJvY2Vzc2FibGUgKDJuICsgbSkgbGltaXRcblxuY29uc3QgQXNzaWduUmVzdWx0ID0ge1xuICBhY2N1cmF0ZSA6IDAsXG4gIHBvc3NpYmxlIDogMSxcbiAgaW1wb3NzaWJsZSA6IDIsXG4gIGVycm9yIDogM1xufTtcblxuY29uc3QgdHlwZUFyciA9IFtcbiAgJ0Fpci1zdXNwZW5kZWQgU1dOVHMnLCAnU1dOVHMgb24gXFxcXChcXFxcbWF0aHJte1NpT18yfS9cXFxcbWF0aHJte1NpfVxcXFwpIHN1YnN0cmF0ZXMnLCAnU1dOVCBhcnJheXMgb24gcXVhcnR6IHN1YnN0cmF0ZXMnLFxuICAnXCJTdXBlci1ncm93dGhcIiBTV05UcycsICdTRFMtZGlzcGVyc2VkIFNXTlRzJywgJ3NzRE5BLWRpc3BlcnNlZCBTV05Ucydcbl07XG5jb25zdCBwYXJhbVR5cGUwID0gW1xuICBbIDEuMTk0LCAwLjE3OSwgMC4wNTMgXSxcbiAgWyAyLjExMCwgMC4zODgsIDAuMTU0IF0sXG4gIFsgMy4xNzAsIDAuNzY0LCAwLjI4NiBdLCAvL00xMVxuICBbIDQuMjg2LCAxLjIzMCwgMC40MTIgXSxcbiAgWyA1LjM4MCwgMS45MjIsIDAuNjQ0IF0sXG4gIFsgNi41MDgsIDIuNzY4LCAwLjkyOCBdLCAvL00yMlxuICBbIDcuNjI0LCAzLjc2OCwgMS4wMjQgXSwgLy9TNTVcbiAgWyA4LjczNCwgNC45MjEsIDEuNDc5IF0sIC8vUzY2XG4gIFsgOS44NTcsIDYuMjI4LCAxLjY5MiBdICAvL00zM1xuXTsgLy8gKGEsIGIsIGMpIG9mIHR5cGUgMFxuY29uc3QgYmV0YVAgPVtcbiAgWyAwLjA5LCAtMC4wNyBdLFxuICBbIC0wLjE4LCAwLjE0IF0sXG4gIFsgLTAuMTksIDAuMjkgXSxcbiAgWyAwLjQ5LCAtMC4zMyBdLFxuICBbIC0wLjQzLCAwLjU5IF0sXG4gIFsgLTAuNiwgMC41NyBdXG5dOyAvLyB0eXBlIDNcblxuY29uc3QgcDFBcnIgPSBbXG4gICdcXFxcKFNfezExfVxcXFwpJywgJ1xcXFwoU197MjJ9XFxcXCknLCAnXFxcXChNX3sxMX1eLVxcXFwpJywgJ1xcXFwoTV97MTF9XitcXFxcKScsICdcXFxcKFNfezMzfVxcXFwpJywgJ1xcXFwoU197NDR9XFxcXCknLFxuICAnXFxcXChNX3syMn1eLVxcXFwpJywgJ1xcXFwoTV97MjJ9XitcXFxcKScsICdcXFxcKFNfezU1fVxcXFwpJywgJ1xcXFwoU197NjZ9XFxcXCknLCAnXFxcXChNX3szM31eLVxcXFwpJywgJ1xcXFwoTV97MzN9XitcXFxcKSdcbl07XG5cbmNvbnN0IHAxQXJyX3JhdyA9IFtcbiAgJ1NfezExfScsICdTX3syMn0nLCAnTV97MTF9Xi0nLCAnTV97MTF9XisnLCAnU197MzN9JywgJ1NfezQ0fScsICdNX3syMn1eLScsICdNX3syMn1eKycsICdTX3s1NX0nLCAnU197NjZ9JyxcbiAgJ01fezMzfV4tJywgJ01fezMzfV4rJ1xuXTtcblxuY29uc3QgcDFUb1AgPSBbIDAsIDEsIDIsIDIsIDMsIDQsIDUsIDUsIDYsIDcsIDgsIDggXTtcbmNvbnN0IHBUb0xlc3NlciA9IFsgMCwgMCwgMiwgMywgMywgNSwgNiwgNiwgOSBdO1xuY29uc3QgcDFUb0xlc3NlciA9IChwMSkgPT4gcDEgJSAyID09PSAwID8gcDEgOiBwMSAtIDE7XG5cbmNvbnN0IER0ID0gKG4sIG0sIHR5cGUpID0+ICgodHlwZSAhPT0gNCkgPyAwLjE0MiA6IDAuMTQ0KSAqIE1hdGguc3FydCgzICogKG4gKiBuICsgbiAqIG0gKyBtICogbSkpIC8gTWF0aC5QSTtcbmNvbnN0IFRoZXRhID0gKG4sIG0pID0+IE1hdGguYXRhbihNYXRoLnNxcnQoMykgKiBtIC8gKDIgKiBuICsgbSkpO1xuY29uc3QgTW9kID0gKG4sIG0pID0+ICgyICogbiArIG0pICUgMztcbmNvbnN0IGlzTWV0YWxQID0gKHApID0+IChwICsgMSkgJSAzID09PSAwO1xuY29uc3QgaXNNZXRhbE5NID0gKG4sIG0pID0+IE1vZChuLCBtKSA9PT0gMDtcbmNvbnN0IGlzTWV0YWwgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAyID9cbiAgaXNNZXRhbE5NKGFyZ3VtZW50c1swXSwgYXJndW1lbnRzWzFdKSA6XG4gIGlzTWV0YWxQKGFyZ3VtZW50c1swXSk7IH07XG5cbmZ1bmN0aW9uIGdldFJCTVBhcmFtZXRlcnMocCwgdHlwZSkge1xuICBjbGFzcyBQYXJhbSB7XG4gICAgY29uc3RydWN0b3IoYSwgYikgeyB0aGlzLmEgPSBhOyB0aGlzLmIgPSBiOyB9XG4gIH1cbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAwOiBzd2l0Y2ggKHApIHtcbiAgICAgIGNhc2UgMDogY2FzZSAxOiByZXR1cm4gbmV3IFBhcmFtKDIwNCwgMjcpO1xuICAgICAgY2FzZSAyOiByZXR1cm4gbmV3IFBhcmFtKDIwMCwgMjYpO1xuICAgICAgZGVmYXVsdDogcmV0dXJuIG5ldyBQYXJhbSgyMjgsIDApO1xuICAgIH1cbiAgICBjYXNlIDE6IHJldHVybiBuZXcgUGFyYW0oMjM1LjksIDUuNSk7XG4gICAgY2FzZSAyOiByZXR1cm4gbmV3IFBhcmFtKDIxNy44LCAxNS43KTtcbiAgICBjYXNlIDM6IHJldHVybiBuZXcgUGFyYW0oMjI3LjAsIDAuMyk7XG4gICAgY2FzZSA0OiByZXR1cm4gbmV3IFBhcmFtKDIyMy41LCAxMi41KTtcbiAgICBjYXNlIDU6IHJldHVybiBuZXcgUGFyYW0oMjE4LCAxOC4zKTtcbiAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ2ludmFsaWQgdHlwZScpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdSQk0yRHQod1JCTSwgcCwgdHlwZSkge1xuICBsZXQgYWIgPSBnZXRSQk1QYXJhbWV0ZXJzKHAsIHR5cGUpO1xuICByZXR1cm4gYWIuYSAvICh3UkJNIC0gYWIuYik7XG59XG5cbmZ1bmN0aW9uIGR0MlJCTShkdCwgcCwgdHlwZSkge1xuICBsZXQgYWIgPSBnZXRSQk1QYXJhbWV0ZXJzKHAsIHR5cGUpO1xuICByZXR1cm4gYWIuYSAvIGR0ICsgYWIuYjtcbn1cblxuY29uc3QgZ2V0RW5lcmd5ID0gKGR0LCB0aGV0YSwgcCwgdHlwZSwgbW9kKSA9PiBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBNYXRoLmNvcygzICogdGhldGEpLCBwLCB0eXBlLCBtb2QpO1xuXG5mdW5jdGlvbiBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGEsIHAsIHR5cGUsIG1vZClcbntcbiAgbGV0IHI7IC8vIHJldHVybiB2YWx1ZVxuICBpZiAoaXNNZXRhbChwKSAmJiBtb2QgPiAwKVxuICAgIHRocm93IG5ldyBFcnJvcignbW9kIHNob3VsZCBiZSBpbiBhY2NvcmRhbmNlIHdpdGggcCcpO1xuICBpZiAodHlwZSA8PSAyKSB7XG5cbiAgICBpZiAocCA+PSA5KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdoaWdoZXIgdGhhbiBTNjYgbm90IGF2YWlsYWJsZScpO1xuICAgIGxldCBkZXJpdmF0aXZlID0gLXBhcmFtVHlwZTBbcF1bMF0gLyAoZHQgKiBkdCkgKyAyICogcGFyYW1UeXBlMFtwXVsxXSAvIChkdCAqIGR0ICogZHQpO1xuICAgIGlmIChkZXJpdmF0aXZlID4gMCkgLy8gMXN0IGRlcml2YXRpdmVcbiAgICAgIHRocm93IG5ldyBFcnJvcignZHQnKTtcbiAgICBpZiAoaXNNZXRhbChwKSlcbiAgICAgIHIgPSBwYXJhbVR5cGUwW3BdWzBdIC8gZHQgLSBwYXJhbVR5cGUwW3BdWzFdIC8gKGR0ICogZHQpICsgcGFyYW1UeXBlMFtwXVsyXSAvIChkdCAqIGR0KSAqIGNvczNUaGV0YSAqIChtb2QgKiAyICsgMSk7XG4gICAgLy8gbW9kICogMiArIDEgPD09PiBtb2QgPT09IDAgPyAxIDogLTFcbiAgICBlbHNlXG4gICAgICByID0gcGFyYW1UeXBlMFtwXVswXSAvIGR0IC0gcGFyYW1UeXBlMFtwXVsxXSAvIChkdCAqIGR0KSArXG4gICAgICAgIHBhcmFtVHlwZTBbcF1bMl0gLyAoZHQgKiBkdCkgKiBjb3MzVGhldGEgKiAoKChwICUgMykgPT09IChtb2QgJSAyKSkgPyAtMSA6IDEpO1xuICAgIHIgLT0gKHR5cGUgPT09IDEpID8gMC4wNCA6ICgodHlwZSA9PT0gMikgPyAwLjEgOiAwKTtcblxuICB9IGVsc2UgaWYgKHR5cGUgPT09IDMpIHtcblxuICAgIGlmIChwID49IDYpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hpZ2hlciB0aGFuIE0yMiBub3QgYXZhaWxhYmxlIGZvciBTdXBlci1Hcm93dGgnKTtcbiAgICBsZXQgYSA9IDEuMDc0LCBiID0gMC40NjcsIGMgPSAwLjgxMjtcbiAgICBsZXQgc2dFID0gKGV4dE1vZCkgPT4gYSAqIChwICsgMSkgLyBkdCAqICgxICsgYiAqIE1hdGgubG9nMTAoYyAvICgocCArIDEpIC8gZHQpKSlcbiAgICAgICsgYmV0YVBbcF1bZXh0TW9kXSAvIChkdCAqIGR0KSAqIGNvczNUaGV0YVxuICAgICAgKyAoKHAgPiAyKSA/IDAuMDU5ICogKHAgKyAxKSAvIGR0IDogMCk7IC8vIGV4dHJhIGZvciBsYXJnZXIgdGhhbiBNMTE7IHdhcm5pbmc6IHAgKyAxXG4gICAgaWYgKGlzTWV0YWwocCkpXG4gICAgICByID0gc2dFKG1vZCArIDEpOyAvLyAwKE1paSspIC0+IDEsIC0xKE1paS0pIC0+IDBcbiAgICBlbHNlXG4gICAgICByID0gc2dFKG1vZCAtIDEpOyAvLyAxKE1PRDEpIC0+IDAsIDIoTU9EMikgLT4gMVxuXG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gNCB8fCB0eXBlID09PSA1KSB7XG5cbiAgICBpZiAocCA9PT0gMClcbiAgICAgIHIgPSAxIC8gKDAuMTI3MCArIDAuODYwNiAqIGR0KSArICgobW9kID09PSAxKSA/IDAuMDQ1NzUgOiAtMC4wODgwMikgLyAoZHQgKiBkdCkgKiBjb3MzVGhldGE7XG4gICAgZWxzZSBpZiAocCA9PT0gMSlcbiAgICAgIHIgPSAxIC8gKDAuMTE3NCArIDAuNDY0NCAqIGR0KSArICgobW9kID09PSAxKSA/IC0wLjE4MjkgOiAwLjE3MDUpIC8gKGR0ICogZHQpICogY29zM1RoZXRhO1xuICAgIGVsc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcignb25seSBTMTEgYW5kIFMyMiBhcmUgYXZhaWxhYmxlIGZvciBTRFMtZGlzcGVyc2VkIG9yIHNzRE5BIGRpc3BlcnNlZCcpO1xuICAgIHIgLT0gKHR5cGUgPT09IDUpID8gMC4wMiA6IDA7XG5cbiAgfSBlbHNlIHRocm93IG5ldyBFcnJvcignaW52YWxpZCB0eXBlJyk7XG5cbiAgcmV0dXJuIHI7XG59XG5cbmZ1bmN0aW9uIGdldENvczNUaGV0YSh2YWwsIGR0LCBwLCB0eXBlKSB7XG5cbiAgLy8gcmV0dXJucyBjb3MzVGhldGEgYXMgW3ZhbF9tb2RMZXNzZXIsIHZhbF9tb2RMYXJnZXJdXG5cbiAgbGV0IHIgPSBbLTEsIC0xXTtcblxuICBpZiAodHlwZSA8PSAyKSB7XG5cbiAgICBpZiAocCA+PSA5KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdoaWdoZXIgdGhhbiBTNjYgbm90IGF2YWlsYWJsZScpO1xuICAgIHZhbCArPSAodHlwZSA9PT0gMSkgPyAwLjA0IDogKCh0eXBlID09PSAyKSA/IDAuMSA6IDApO1xuICAgIGlmIChpc01ldGFsKHApKSB7XG4gICAgICByWzBdID0gKHBhcmFtVHlwZTBbcF1bMF0gLyBkdCAtIHBhcmFtVHlwZTBbcF1bMV0gLyAoZHQgKiBkdCkgLSB2YWwpIC8gcGFyYW1UeXBlMFtwXVsyXSAqIChkdCAqIGR0KTsgLy8gTWlpLVxuICAgICAgclsxXSA9ICgtKHBhcmFtVHlwZTBbcF1bMF0gLyBkdCAtIHBhcmFtVHlwZTBbcF1bMV0gLyAoZHQgKiBkdCkgLSB2YWwpKSAvIHBhcmFtVHlwZTBbcF1bMl0gKiAoZHQgKiBkdCk7IC8vIE1paStcbiAgICB9IGVsc2Uge1xuICAgICAgclswXSA9ICgtKHBhcmFtVHlwZTBbcF1bMF0gLyBkdCAtIHBhcmFtVHlwZTBbcF1bMV0gLyAoZHQgKiBkdCkgLSB2YWwpKVxuICAgICAgICAvIHBhcmFtVHlwZTBbcF1bMl0gKiAoZHQgKiBkdCkgKiAoKChwICUgMykgPT09ICgxICUgMikpID8gLTEgOiAxKTsgLy9tb2QxXG4gICAgICByWzFdID0gKC0ocGFyYW1UeXBlMFtwXVswXSAvIGR0IC0gcGFyYW1UeXBlMFtwXVsxXSAvIChkdCAqIGR0KSAtIHZhbCkpXG4gICAgICAgIC8gcGFyYW1UeXBlMFtwXVsyXSAqIChkdCAqIGR0KSAqICgoKHAgJSAzKSA9PT0gKDIgJSAyKSkgPyAtMSA6IDEpOyAvL21vZDJcbiAgICB9XG5cbiAgfSBlbHNlIGlmICh0eXBlID09PSAzKSB7XG5cbiAgICBpZiAocCA+PSA2KVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdoaWdoZXIgdGhhbiBNMjIgbm90IGF2YWlsYWJsZSBmb3IgU3VwZXItR3Jvd3RoJyk7XG4gICAgbGV0IGEgPSAxLjA3NCwgYiA9IDAuNDY3LCBjID0gMC44MTI7XG4gICAgbGV0IGNhbGMgPSAoZXh0TW9kKSA9PiAodmFsIC0gYSAqIChwICsgMSkgLyBkdCAqICgxICsgYiAqIE1hdGgubG9nMTAoYyAvICgocCArIDEpIC8gZHQpKSkgLVxuICAgICAgKChwID4gMikgPyAwLjA1OSAqIChwICsgMSkgLyBkdCA6IDApKSAvIGJldGFQW3BdW2V4dE1vZF0gKiAoZHQgKiBkdCk7XG4gICAgclswXSA9IGNhbGMoMCk7IC8vTWlpLSBvciBNT0QxXG4gICAgclsxXSA9IGNhbGMoMSk7XG5cbiAgfSBlbHNlIGlmICh0eXBlID09PSA0IHx8IHR5cGUgPT09IDUpIHtcblxuICAgIHZhbCArPSAodHlwZSA9PT0gNSkgPyAwLjAyIDogMDtcbiAgICBpZiAocCA9PT0gMCkge1xuICAgICAgclswXSA9ICh2YWwgLSAxIC8gKDAuMTI3MCArIDAuODYwNiAqIGR0KSkgLyAwLjA0NTc1ICogKGR0ICogZHQpOyAvLyBNT0QxXG4gICAgICByWzFdID0gKHZhbCAtIDEgLyAoMC4xMjcwICsgMC44NjA2ICogZHQpKSAvICgtMC4wODgwMikgKiAoZHQgKiBkdCk7XG4gICAgfSBlbHNlIGlmIChwID09PSAxKSB7XG4gICAgICByWzBdID0gKHZhbCAtIDEgLyAoMC4xMTc0ICsgMC40NjQ0ICogZHQpKSAvICgtMC4xODI5KSAqIChkdCAqIGR0KTsgLy8gTU9EMVxuICAgICAgclsxXSA9ICh2YWwgLSAxIC8gKDAuMTE3NCArIDAuNDY0NCAqIGR0KSkgLyAwLjE3MDUgKiAoZHQgKiBkdCk7XG4gICAgfSBlbHNlIHRocm93IG5ldyBFcnJvcignb25seSBTMTEgYW5kIFMyMiBhcmUgYXZhaWxhYmxlIGZvciBTRFMtZGlzcC4gb3Igc3NETkEgZGlzcC4nKTtcblxuICB9IGVsc2UgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHR5cGUnKTtcblxuICByWzBdID0gcGFyc2VGbG9hdChyWzBdLnRvRml4ZWQoNCkpOyAvLyA0IGRpZ2l0c1xuICByWzFdID0gcGFyc2VGbG9hdChyWzFdLnRvRml4ZWQoNCkpO1xuICBpZiAoclswXSA+IDEgfHwgclswXSA8IDApXG4gICAgclswXSA9IC0xO1xuICBpZiAoclsxXSA+IDEgfHwgclsxXSA8IDApXG4gICAgclsxXSA9IC0xO1xuICByZXR1cm4gcjtcblxufVxuXG5mdW5jdGlvbiBnZXRBdmVyYWdlKHNwbGl0dGluZywgd1JCTSwgcExlc3NlciwgdHlwZSkge1xuXG4gIGxldCBjb3MzVGhldGFNYXggPSAxLjU7XG4gIC8vIHJldHVybnMgbnVsbC1hYmxlIGF2ZXJhZ2VcblxuICBsZXQgZHQgPSB3UkJNMkR0KHdSQk0sIHBMZXNzZXIsIHR5cGUpO1xuXG4gIGlmIChpc01ldGFsKHBMZXNzZXIgKyAxKSkgdGhyb3cgbmV3IEVycm9yKCdwIHNob3VsZCBiZSB0aGUgc21hbGxlciBvbmUnKTtcbiAgaWYgKHR5cGUgPD0gMikge1xuICAgIGlmIChwTGVzc2VyID49IDkpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2hpZ2hlciB0aGFuIFM2NiBub3QgYXZhaWxhYmxlJyk7XG5cbiAgICBpZiAoaXNNZXRhbChwTGVzc2VyKSkge1xuXG4gICAgICBsZXQgY29zM1RoZXRhID0gZHQgKiBkdCAqIHNwbGl0dGluZyAvIDIgKiBwYXJhbVR5cGUwW3BMZXNzZXJdWzJdO1xuICAgICAgaWYgKGNvczNUaGV0YSA8IDAgfHwgY29zM1RoZXRhID4gY29zM1RoZXRhTWF4KSByZXR1cm4gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgZ2V0RW5lcmd5RnJvbUNvczNUaGV0YShkdCwgY29zM1RoZXRhLCBwTGVzc2VyLCB0eXBlLCAtMSkgK1xuICAgICAgICAgIGdldEVuZXJneUZyb21Db3MzVGhldGEoZHQsIGNvczNUaGV0YSwgcExlc3NlciwgdHlwZSwgMClcbiAgICAgICAgKSAvIDI7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyci5tZXNzYWdlID09PSAnZHQnKVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBlbHNlIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IHBMYXJnZXIgPSBwTGVzc2VyICsgMTtcbiAgICAgIGxldCBkZWx0YSA9ICh4KSA9PiBwYXJhbVR5cGUwW3BMYXJnZXJdW3hdIC0gcGFyYW1UeXBlMFtwTGVzc2VyXVt4XTtcbiAgICAgIGxldCBtb2QgPSAxO1xuICAgICAgbGV0IGNvczNUaGV0YSA9IChzcGxpdHRpbmcgKiBkdCAqIGR0IC0gZGVsdGEoMCkgKiBkdCArIGRlbHRhKDEpKSAvIChcbiAgICAgICAgcGFyYW1UeXBlMFtwTGFyZ2VyXVsyXSAqICgoKHBMYXJnZXIgJSAzKSA9PT0gKG1vZCAlIDIpKSA/IC0xIDogMSkgLVxuICAgICAgICBwYXJhbVR5cGUwW3BMZXNzZXJdWzJdICogKCgocExlc3NlciAlIDMpID09PSAobW9kICUgMikpID8gLTEgOiAxKVxuICAgICAgKTtcbiAgICAgIGlmIChjb3MzVGhldGEgPCAwKSB7XG4gICAgICAgIG1vZCA9IDI7XG4gICAgICAgIGNvczNUaGV0YSA9IC1jb3MzVGhldGE7XG4gICAgICB9XG4gICAgICBpZiAoY29zM1RoZXRhID4gY29zM1RoZXRhTWF4KSByZXR1cm4gbnVsbDtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgZ2V0RW5lcmd5RnJvbUNvczNUaGV0YShkdCwgY29zM1RoZXRhLCBwTGFyZ2VyLCB0eXBlLCBtb2QpICtcbiAgICAgICAgICBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGEsIHBMZXNzZXIsIHR5cGUsIG1vZClcbiAgICAgICAgKSAvIDI7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgaWYgKGVyci5tZXNzYWdlID09PSAnZHQnKVxuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICBlbHNlIHRocm93IGVycjtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZSA9PT0gMykge1xuICAgIGxldCBhID0gMS4wNzQsIGIgPSAwLjQ2NywgYyA9IDAuODEyO1xuICAgIGxldCBzZ0UgPSAocCkgPT4gYSAqIChwICsgMSkgLyBkdCAqICgxICsgYiAqIE1hdGgubG9nMTAoYyAvICgocCArIDEpIC8gZHQpKSkgK1xuICAgICAgKChwID4gMikgPyAwLjA1OSAqIChwICsgMSkgLyBkdCA6IDApO1xuXG4gICAgaWYgKGlzTWV0YWwocExlc3NlcikpIHtcblxuICAgICAgbGV0IGNvczNUaGV0YSA9IChzcGxpdHRpbmcpICogZHQgKiBkdCAvIChiZXRhUFtwTGVzc2VyXVsxXSAtIGJldGFQW3BMZXNzZXJdWzBdKTtcbiAgICAgIGlmIChjb3MzVGhldGEgPCAwIHx8IGNvczNUaGV0YSA+IGNvczNUaGV0YU1heClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGEsIHBMZXNzZXIsIHR5cGUsIC0xKSArXG4gICAgICAgIGdldEVuZXJneUZyb21Db3MzVGhldGEoZHQsIGNvczNUaGV0YSwgcExlc3NlciwgdHlwZSwgMClcbiAgICAgICkgLyAyO1xuXG4gICAgfSBlbHNlIHtcblxuICAgICAgbGV0IHBMYXJnZXIgPSBwTGVzc2VyICsgMTtcbiAgICAgIGxldCBtb2QgPSAxO1xuICAgICAgaWYgKHBMZXNzZXIgPj0gNilcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoaWdoZXIgdGhhbiBNMjIgbm90IGF2YWlsYWJsZSBmb3IgU3VwZXItR3Jvd3RoJyk7XG4gICAgICBsZXQgY29zM1RoZXRhID0gKHNwbGl0dGluZyArIHNnRShwTGVzc2VyKSAtIHNnRShwTGFyZ2VyKSkgKiBkdCAqIGR0IC8gKFxuICAgICAgICBiZXRhUFtwTGFyZ2VyXVttb2QgLSAxXSAtIGJldGFQW3BMZXNzZXJdW21vZCAtIDFdXG4gICAgICApO1xuICAgICAgaWYgKGNvczNUaGV0YSA8IDAgfHwgY29zM1RoZXRhID4gY29zM1RoZXRhTWF4KSB7XG4gICAgICAgIG1vZCA9IDI7XG4gICAgICAgIGNvczNUaGV0YSA9IChzcGxpdHRpbmcgKyBzZ0UocExlc3NlcikgLSBzZ0UocExhcmdlcikpICogZHQgKiBkdCAvIChcbiAgICAgICAgICBiZXRhUFtwTGFyZ2VyXVttb2QgLSAxXSAtIGJldGFQW3BMZXNzZXJdW21vZCAtIDFdKTtcbiAgICAgIH1cbiAgICAgIGlmIChjb3MzVGhldGEgPCAwIHx8IGNvczNUaGV0YSA+IGNvczNUaGV0YU1heClcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICByZXR1cm4gKFxuICAgICAgICBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGEsIHBMYXJnZXIsIHR5cGUsIG1vZCkgK1xuICAgICAgICBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGEsIHBMZXNzZXIsIHR5cGUsIG1vZClcbiAgICAgICkgLyAyO1xuICAgIH1cblxuICB9IGVsc2UgaWYgKHR5cGUgPT09IDQgfHwgdHlwZSA9PT0gNSkge1xuXG4gICAgaWYgKHBMZXNzZXIgIT09IDApXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ29ubHkgUzExIGFuZCBTMjIgYXJlIGF2YWlsYWJsZSBmb3IgU0RTLWRpc3AuIG9yIHNzRE5BIGRpc3AuJyk7XG4gICAgbGV0IG1vZCA9IDE7XG4gICAgbGV0IGNvczNUaGV0YSA9IChzcGxpdHRpbmcgLSAoMSAvICgwLjExNzQgKyAwLjQ2NDQgKiBkdCkgLSAxIC8gKDAuMTI3MCArIDAuODYwNiAqIGR0KSkpXG4gICAgICAqIGR0ICogZHQgLyAoLTAuMTgyOSAtIDAuMDQ1NzUpO1xuXG4gICAgaWYgKGNvczNUaGV0YSA+IGNvczNUaGV0YU1heCB8fCBjb3MzVGhldGEgPCAwKSB7XG4gICAgICBtb2QgPSAyO1xuICAgICAgY29zM1RoZXRhID0gKHNwbGl0dGluZyAtICgxIC8gKDAuMTE3NCArIDAuNDY0NCAqIGR0KSAtIDEgLyAoMC4xMjcwICsgMC44NjA2ICogZHQpKSlcbiAgICAgICAgKiBkdCAqIGR0IC8gKDAuMTcwNSAtIC0wLjA4ODAyKTtcbiAgICB9XG4gICAgaWYgKGNvczNUaGV0YSA+IGNvczNUaGV0YU1heCB8fCBjb3MzVGhldGEgPCAwKVxuICAgICAgcmV0dXJuIG51bGw7XG5cbiAgICByZXR1cm4gKFxuICAgICAgZ2V0RW5lcmd5RnJvbUNvczNUaGV0YShkdCwgY29zM1RoZXRhLCAxLCB0eXBlLCBtb2QpICtcbiAgICAgIGdldEVuZXJneUZyb21Db3MzVGhldGEoZHQsIGNvczNUaGV0YSwgMCwgdHlwZSwgbW9kKVxuICAgICkgLyAyO1xuICB9XG4gIGVsc2UgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIHR5cGUnKTtcbn1cblxuZnVuY3Rpb24gZ2V0TGlzdChwTGVzc2VyLCB0eXBlKSB7XG5cbiAgbGV0IGxpID0gW107XG4gIGNvbnN0IG5NaW4gPSA1LCBuTWF4ID0gNTA7XG5cbiAgaWYgKCFpc01ldGFsKHBMZXNzZXIpKSB7XG4gICAgaWYgKGlzTWV0YWwocExlc3NlciArIDEpKSB0aHJvdyBuZXcgRXJyb3IoJ3Agc2hvdWxkIGJlIHRoZSBzbWFsbGVyIG9uZSwgZS5nLiBTMTEgcmF0aGVyIHRoYW4gUzIyJyk7XG4gICAgZm9yIChsZXQgbiA9IG5NaW47IG4gPCBuTWF4OyBuKyspXG4gICAgICBmb3IgKGxldCBtID0gMDsgbSA8PSBuOyBtKyspIHtcblxuICAgICAgICBpZiAoMiAqIG4gKyBtID4gc2VyaWVzVGhyZXNob2xkKSBicmVhaztcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAoIWlzTWV0YWwobiwgbSkpIHtcbiAgICAgICAgICAgIGxldCBkbCA9IGdldEVuZXJneShEdChuLCBtLCB0eXBlKSwgVGhldGEobiwgbSksIHBMZXNzZXIsIHR5cGUsIE1vZChuLCBtKSk7XG4gICAgICAgICAgICBsZXQgZGggPSBnZXRFbmVyZ3koRHQobiwgbSwgdHlwZSksIFRoZXRhKG4sIG0pLCBwTGVzc2VyICsgMSwgdHlwZSwgTW9kKG4sIG0pKTtcbiAgICAgICAgICAgIGxpLnB1c2goWyBuLCBtLCAoZGggKyBkbCkgLyAyLCAoZGggLSBkbCkgXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBpZiAoZXJyLm1lc3NhZ2UgIT09ICdkdCcpIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgfVxuICB9IGVsc2Uge1xuICAgIGZvciAobGV0IG4gPSBuTWluOyBuIDwgbk1heDsgbisrKVxuICAgICAgZm9yIChsZXQgbSA9IDA7IG0gPD0gbjsgbSsrKSB7XG5cbiAgICAgICAgaWYgKDIgKiBuICsgbSA+IHNlcmllc1RocmVzaG9sZCkgYnJlYWs7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgaWYgKGlzTWV0YWwobiwgbSkpIHtcbiAgICAgICAgICAgIGxldCBkbCA9IGdldEVuZXJneShEdChuLCBtLCB0eXBlKSwgVGhldGEobiwgbSksIHBMZXNzZXIsIHR5cGUsIC0xKTtcbiAgICAgICAgICAgIGxldCBkaCA9IGdldEVuZXJneShEdChuLCBtLCB0eXBlKSwgVGhldGEobiwgbSksIHBMZXNzZXIsIHR5cGUsIDApO1xuICAgICAgICAgICAgbGkucHVzaChbIG4sIG0sIChkaCArIGRsKSAvIDIsIChkaCAtIGRsKSBdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGlmIChlcnIubWVzc2FnZSAhPT0gJ2R0JykgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGxpO1xufVxuXG5mdW5jdGlvbiBnZXRSQk1BcnJheShwTGVzc2VyLCB0eXBlKSB7XG5cbiAgbGV0IGQgPSB7IHJibUxhYmVsOiBbXSwgcmJtOiBbXSB9OyAvLyByZXR1cm5cblxuICBjb25zdCBjb3MzVGhldGFNYXggPSA2MDtcbiAgY29uc3Qgd1JCTU1pbiA9IDcwLCB3UkJNTWF4ID0gMzUwO1xuICBpZiAoIWlzTWV0YWwocExlc3NlcikgJiYgaXNNZXRhbChwTGVzc2VyICsgMSkpXG4gICAgdGhyb3cgbmV3IEVycm9yKCdwIHNob3VsZCBiZSB0aGUgc21hbGxlciBvbmUsIGUuZy4gUzExIHJhdGhlciB0aGFuIFMyMicpO1xuXG4gIGZvciAobGV0IHJibSA9IHdSQk1NaW47IHJibSA8PSB3UkJNTWF4OyByYm0gKz0gMTApIHtcblxuICAgIGxldCBkdCA9IHdSQk0yRHQocmJtLCBwTGVzc2VyLCB0eXBlKTtcbiAgICBsZXQgdCA9IFtdO1xuICAgIHRyeSB7XG4gICAgICBpZiAoaXNNZXRhbChwTGVzc2VyKSkge1xuICAgICAgICBsZXQgcGx1cyA9IGdldEVuZXJneUZyb21Db3MzVGhldGEoZHQsIGNvczNUaGV0YU1heCwgcExlc3NlciwgdHlwZSwgMCk7XG4gICAgICAgIGxldCBtaW51cyA9IGdldEVuZXJneUZyb21Db3MzVGhldGEoZHQsIGNvczNUaGV0YU1heCwgcExlc3NlciwgdHlwZSwgLTEpO1xuICAgICAgICB0LnB1c2goWyAocGx1cyArIG1pbnVzKSAvIDIsIHBsdXMgLSBtaW51cyBdKTtcbiAgICAgICAgcGx1cyA9IGdldEVuZXJneUZyb21Db3MzVGhldGEoZHQsIC1jb3MzVGhldGFNYXgsIHBMZXNzZXIsIHR5cGUsIDApO1xuICAgICAgICBtaW51cyA9IGdldEVuZXJneUZyb21Db3MzVGhldGEoZHQsIC1jb3MzVGhldGFNYXgsIHBMZXNzZXIsIHR5cGUsIC0xKTtcbiAgICAgICAgdC5wdXNoKFsgKHBsdXMgKyBtaW51cykgLyAyLCBwbHVzIC0gbWludXMgXSk7XG4gICAgICAgIGQucmJtTGFiZWwucHVzaChyYm0pO1xuICAgICAgICBkLnJibS5wdXNoKHQpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IHBsdXMgPSBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGFNYXgsIHBMZXNzZXIgKyAxLCB0eXBlLCAxKTsgLy9zaG91bGQgaXQgYmUgaGlnaGVyP1xuICAgICAgICBsZXQgbWludXMgPSBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGFNYXgsIHBMZXNzZXIsIHR5cGUsIDEpO1xuICAgICAgICB0LnB1c2goWyAocGx1cyArIG1pbnVzKSAvIDIsIHBsdXMgLSBtaW51cyBdKTtcbiAgICAgICAgcGx1cyA9IGdldEVuZXJneUZyb21Db3MzVGhldGEoZHQsIDAsIHBMZXNzZXIgKyAxLCB0eXBlLCAyKTtcbiAgICAgICAgbWludXMgPSBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCAwLCBwTGVzc2VyLCB0eXBlLCAyKTtcbiAgICAgICAgdC5wdXNoKFsgKHBsdXMgKyBtaW51cykgLyAyLCBwbHVzIC0gbWludXMgXSk7XG4gICAgICAgIHBsdXMgPSBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGFNYXgsIHBMZXNzZXIgKyAxLCB0eXBlLCAyKTtcbiAgICAgICAgbWludXMgPSBnZXRFbmVyZ3lGcm9tQ29zM1RoZXRhKGR0LCBjb3MzVGhldGFNYXgsIHBMZXNzZXIsIHR5cGUsIDIpO1xuICAgICAgICB0LnB1c2goWyAocGx1cyArIG1pbnVzKSAvIDIsIHBsdXMgLSBtaW51cyBdKTtcbiAgICAgICAgZC5yYm1MYWJlbC5wdXNoKHJibSk7XG4gICAgICAgIGQucmJtLnB1c2godCk7XG4gICAgICB9XG4gICAgfVxuICAgIGNhdGNoIChlcnIpXG4gICAge1xuICAgICAgaWYgKGVyci5tZXNzYWdlID09PSAnZHQnKSBicmVhaztcbiAgICAgIGVsc2UgdGhyb3cgZXJyO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkO1xufVxuIl19\n\n\n'use strict';\n\nvar isUnparsable = function isUnparsable(e) {return isNaN(parseFloat(e));};\n\nfunction getPlotParams(inputParams) {\n  var decimalDigits = function decimalDigits(d) {return d.split('.')[1].length;};\n\n  if (isUnparsable(inputParams.val1) && isUnparsable(inputParams.val2)) {\n    throw new Error('Unauthorized Access');\n  } else if (isUnparsable(inputParams.val1) || isUnparsable(inputParams.val2)) {\n    if (isUnparsable(inputParams.rbm)) throw new Error('Unauthorized Access');\n    inputParams.uncertainty = 2.0 / Math.pow(10, decimalDigits(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1));\n    return E1R1(inputParams);\n  } else {\n    inputParams.uncertainty = 2.0 / Math.pow(10,\n    Math.min(decimalDigits(inputParams.val1), decimalDigits(inputParams.val2)));\n\n    return E2(inputParams);\n  }\n}\n\nfunction E1R1(inputParams) {\n\n  var p1 = isUnparsable(inputParams.val1) ? inputParams.p2 : inputParams.p1,type = inputParams.type,p = p1ToP[p1]; // int\n  var val = parseFloat(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1); // float\n  var wRBM = parseFloat(inputParams.rbm); // float, integrity checked in getPlotParam\n\n  var dt = wRBM2Dt(wRBM, p, type);\n  var cos = getCos3Theta(val, dt, p, type);\n  var resultString = '';\n  var error = function error() {return Assign({\n      bluePoint: null,\n      point: [val, 0.23],\n      pLesser: pToLesser[p],\n      type: type,\n      pointType: 'none',\n      p1Lesser: p1ToLesser(p1),\n      resultString: resultString });};\n\n\n  if (cos[0] === -1 && cos[1] === -1) {\n    resultString += 'Invalid input: out of range.';\n    return error();\n  }\n\n  var pAnother = void 0,modAnother = void 0;\n  if (isMetal(p)) {\n    if (p1 % 4 - 3 !== (cos[0] === -1 ? 0 : -1)) {\n      resultString += 'Invalid input: You may have mistaken ' + p1Arr[p1 + 5 - p1 % 4 * 2] + ' for ' + p1Arr[p1] + '.';\n      return error();\n    }\n    pAnother = p;\n    modAnother = cos[0] === -1 ? -1 : 0;\n  } else\n  {\n    pAnother = isMetal(p + 1) ? p - 1 : p + 1;\n    modAnother = cos[0] === -1 ? 2 : 1; // === mod1\n  }\n\n  var valAnother = void 0;\n  try {\n    valAnother = getEnergyFromCos3Theta(dt, cos[0] === -1 ? cos[1] : cos[0], pAnother, type, modAnother);\n  }\n  catch (err) {\n    if (err.message === 'dt') {\n      resultString += 'Invalid input: out of range, diameter too small.';\n      return error();\n    }\n    throw err;\n  }\n  if (isMetal(p) && modAnother === -1 || !isMetal(p) && p > pAnother) {var _ref =\n    [pAnother, p];p = _ref[0];pAnother = _ref[1];var _ref2 =\n    [valAnother, val];val = _ref2[0];valAnother = _ref2[1];\n  }\n  var x = (val + valAnother) / 2,y = valAnother - val;\n  return Assign({\n    bluePoint: null,\n    point: [x, y],\n    pLesser: p,\n    type: type,\n    pointType: 'green',\n    p1Lesser: p1ToLesser(p1),\n    resultString: resultString },\n  modAnother);\n\n}\n\n\nfunction E2(inputParams) {\n\n  var resultString = '';\n  var p1 = inputParams.p1,p2 = inputParams.p2,type = inputParams.type; // int\n  var val1 = parseFloat(inputParams.val1),val2 = parseFloat(inputParams.val2); // float, integrity checked in getPlotParams\n  var p_1 = p1ToP[p1],p_2 = p1ToP[p2]; // int\n  var rbm = inputParams.rbm; // string\n\n  // don't use 'with' block\n  if (p1 > p2) {var _ref3 =\n    [p_2, p_1];p_1 = _ref3[0];p_2 = _ref3[1];var _ref4 =\n    [val2, val1];val1 = _ref4[0];val2 = _ref4[1];var _ref5 =\n    [p2, p1];p1 = _ref5[0];p2 = _ref5[1];\n  }\n\n  if (isMetal(p_2) !== isMetal(p_1)) {\n    throw new Error('invalid form submission');\n  }\n\n  if (p2 - p1 === 1) {\n    var bluePoint = null;\n    if (!isUnparsable(rbm)) {\n      var average = getAverage(val2 - val1, parseFloat(rbm), p_1, type);\n      if (average !== null) {\n        bluePoint = [average, val2 - val1];\n      } else\n      {\n        resultString += 'Invalid input: RBM value out of range. Only transition energies are processed. <br/ >';\n      }\n    }\n    return Assign({\n      point: [(val1 + val2) / 2, val2 - val1],\n      pLesser: p_1,\n      type: type,\n      pointType: 'red',\n      bluePoint: bluePoint,\n      p1Lesser: p1,\n      resultString: resultString });\n\n  }\n\n}\n\nfunction Assign(params) {var mod = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : -1;\n\n  // params: plotParams\n  // x: average y: splitting\n\n  var uncertainty = params.uncertainty;\n  var dxMin = -1,dxMax = -1,dyMin = -1,dyMax = -1;\n  var Dist = function Dist(x1, y1, x2, y2) {return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) * 25);};\n  var Dist_ = function Dist_(e) {return Dist(e[2], e[3], params.point[0], params.point[1]);};\n  var deltaX = 0.6,\n  maxY = isMetal(params.pLesser) ? 0.6 : params.point[1] + 0.6,\n  minY = isMetal(params.pLesser) ? -0.1 : params.point[1] - 0.6;\n\n  function setBounds(dxMin_, dxMax_, dyMin_, dyMax_) {\n    dxMin = dxMin_;\n    dxMax = dxMax_;\n    dyMin = dyMin_;\n    dyMax = dyMax_;\n  }\n\n  // https://github.com/mihaifm/linq, many thanks to you!\n\n  params.all = Enumerable.from(getList(params.pLesser, params.type)).\n  where(function (e) {return e[2] >= params.point[0] - deltaX && e[2] <= params.point[0] + deltaX &&\n    e[3] <= maxY && e[3] >= minY;}).\n  toArray();\n\n  var query = Enumerable.from(params.all).\n  where(function (e) {return (\n      (mod === -1 || isMetal(params.pLesser) || mod === Mod(e[0], e[1])) &&\n      params.point[0] - e[2] >= dxMin && params.point[0] - e[2] <= dxMax &&\n      params.point[1] - e[3] >= dyMin && params.point[1] - e[3] <= dyMax);});\n\n\n  setBounds(-uncertainty, uncertainty, -uncertainty, uncertainty);\n  var uc = query.toArray(); // query once to get uncertainty range\n\n  function processOutput() {\n    params.result = query.orderBy(Dist_).toArray();\n    for (var i = 0; i < params.result.length; i++) {\n      params.resultString += '\\n        <b>(' +\n      Math.round(params.result[i][0]) + ',' + Math.round(params.result[i][1]) + ')</b>\\n        ' + (\n      i !== params.result.length - 1 ? ', ' : '');}\n    params.resultString += '</span>';\n  }\n\n  if (params.pointType === 'none') {\n    params.ar = AssignResult.error;\n    params.result = [];\n    return params;\n  }\n\n  if (uncertainty > 0.2) {\n    params.resultString = 'Input uncertainty too large. Please give more significant figures.';\n    params.ar = AssignResult.error;\n    params.result = [];\n    return params;\n  }\n\n  if (params.pointType === 'red') {\n    if (params.bluePoint != null) {\n      if (params.bluePoint[0] - params.point[0] < 0.02) setBounds(-0.008, 0.008, -0.015, 0.015);else\n      setBounds(-0.030, -0.005, -0.015, 0.015); // don't change at this moment\n    } else setBounds(-0.020, 0.008, -0.015, 0.015);\n\n    if (query.count() === 1 && uc.length <= 1) {\n      params.ar = AssignResult.accurate;\n      params.resultString += 'The assignment result is:<br /><span style=\"font-size: 28px;\">';\n      processOutput();\n      return params;\n    }\n    setBounds(-0.040, 0.0126, -0.030, 0.030);\n  } else setBounds(-0.070, 0.070, -0.040, 0.040);\n\n  query.union(uc);\n\n  if (query.count() > 0) {\n    params.ar = AssignResult.possible;\n    params.resultString += 'The likely assignments include:<br /><span style=\"font-size: 28px;\">';\n    processOutput();\n    return params;\n  }\n\n  // use the green criteria and query again for no match.\n  // and it's easy to see that green point, if not returned in the previous step,\n  // will not give results in this step.\n\n  setBounds(-0.070, 0.070, -0.040, 0.040);\n  var tmp = Enumerable.from(params.all).orderBy(Dist_).toArray();\n  if (Dist_(tmp[0]) / Dist_(tmp[1]) <= 0.5 && query.count() !== 0) {\n    params.ar = AssignResult.impossible;\n    query = Enumerable.from([tmp[0]]);\n    params.resultString += 'No match. The most possible assignment result is:<br /><span style=\"font-size: 28px;\">';\n    processOutput();\n    return params;\n  }\n\n  params.ar = AssignResult.error;\n  params.resultString = 'Invalid input: out of range. Please check your input.';\n  params.result = [];\n  return params;\n}\n\nfunction processOutput(params) {\n\n  // process RBM\n\n  var yMax = isMetal(params.pLesser) ? 0.51 : params.point[1] + 0.4;\n  var xMin = params.point[0] - 0.5,xMax = params.point[0] + 0.5;\n  var s = getRBMArray(params.pLesser, params.type); // {rbm, rbmLabel}\n  var rbm = [];\n  var rbmLabel = [];\n  var rbmPos = [];\n  var between = function between(xy, r1, r2) {return xy >= r1 && xy <= r2 || xy >= r2 && xy <= r1;};\n  for (var i = 0; i < s.rbm.length; i++) {\n    var a = s.rbm[i];\n    var t = void 0;\n    if (a.length === 2)\n    t = (a[0][0] - a[1][0]) * (yMax - a[1][1]) / (a[0][1] - a[1][1]) + a[1][0];else\n    {\n      var u = void 0;\n      if (between(yMax, a[1][1], a[0][1]))\n      u = 0;else\n        // if between(a[1][1], a[2][1])\n        u = 2;\n      t = (a[u][0] - a[1][0]) * (yMax - a[1][1]) / (a[u][1] - a[1][1]) + a[1][0];\n    }\n    if (between(t, xMax, xMin)) {\n      rbm.push(s.rbm[i]);\n      rbmLabel.push(s.rbmLabel[i]);\n      rbmPos.push(t);\n    }\n  }\n  params.rbm = rbm;\n  params.rbmLabel = rbmLabel;\n  params.rbmPos = rbmPos;\n\n  // process all\n\n  var all = params.all; // you know, lazy evaluation\n  var q = Enumerable.from(all).\n  groupBy(\n  function (e) {return 2 * e[0] + e[1];}, // key\n  function (e) {return e;}, // group element\n  function (key, group) {return { key: key, value: group.orderBy(function (e) {return e[0];}).toArray() };});\n  // use default compare method\n\n  params.all = q.select(function (e) {return e.value.map(function (ee) {return [ee[2], ee[3]];});}).toArray();\n  params.allLabel = q.select(function (e) {return e.value.map(function (ee) {return [ee[0], ee[1]];});}).toArray();\n\n  // process result\n\n  var result = params.result;\n  params.result = result.map(function (e) {return [e[2], e[3]];});\n  params.resultLabel = result.map(function (e) {return [e[0], e[1]];});\n\n  params.isMetal = isMetal(params.pLesser);\n  params.yAxisLabel = '\\\\(' + p1Arr_raw[params.p1Lesser + 1] + '-' + p1Arr_raw[params.p1Lesser] + '\\\\ (\\\\mathrm{eV})\\\\)';\n  params.xAxisLabel = '\\\\((' + p1Arr_raw[params.p1Lesser + 1] + '+' + p1Arr_raw[params.p1Lesser] + ')/2\\\\ (\\\\mathrm{eV})\\\\)';\n\n\n  // select g.OrderBy(elem => elem[0]);\n  // note that average energy may not increase monotonously as n in (n,m) increases.\n  // thus elem => elem[2] is wrong.\n  // test: S11 = 1.420, S22 = 2.134 as (6,4), see branch 2n + m = 16\n\n\n  return params;\n}\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n'use strict';\n\nfunction drawPlot(placeholder, params) {\n\n  var defaultRadius = 4,xMin = params.point[0] - 0.5,xMax = params.point[0] + 0.5;\n  var yMin = params.isMetal ? -0.01 : params.point[1] - 0.4,yMax = params.isMetal ? 0.45 : params.point[1] + 0.4;\n  var font = {\n    size: 20,\n    lineHeight: 20,\n    family: 'serif' };\n\n  var options = {\n    xaxis: {\n      // aver\n      show: true,\n      position: 'bottom',\n      min: xMin,\n      max: xMax,\n      font: font,\n      tickLength: 10,\n      tickColor: 'rgb(255, 0, 0)',\n      color: 'rgb(255, 0, 0)' },\n\n    yaxis: {\n      show: true,\n      min: yMin,\n      max: yMax,\n      font: font,\n      tickLength: 10,\n      tickColor: 'rgb(0, 0, 0)',\n      color: 'rgb(0, 0, 0)' },\n\n    series: {\n      hoverable: true\n      // shadowSize: 0\n    },\n    grid: {\n      borderColor: {\n        top: 'rgb(0, 0, 255)',\n        bottom: 'rgb(255, 0, 0)',\n        left: 'rgb(0, 0, 0)',\n        right: 'rgb(0, 0, 0)' },\n\n      hoverable: true,\n      minBorderMargin: 0 } };\n\n\n\n  var series = [];\n  for (var i = 0; i < params.rbm.length; i++) {\n    series.push({\n      color: 'rgb(208, 208, 208)', // use the shadow\n      data: params.rbm[i],\n      shadowSize: 5,\n      hoverable: false });}\n\n  var laser = [1240 / 785, 1240 / 633, 1240 / 532];\n  var laser_color = ['rgb(136, 136, 136)', 'rgb(245, 0, 0)', 'rgb(12, 127, 15)'];\n\n  for (var _i = 0; _i < laser.length; _i++) {\n    series = series.concat([{\n      id: 'laser' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, 2 * (-10 - laser[_i])], [10, 2 * (10 - laser[_i])]],\n      shadowSize: 0 },\n    {\n      id: 'laser_minus' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, -2 * (-10 - laser[_i])], [10, -2 * (10 - laser[_i])]],\n      shadowSize: 0 },\n    {\n      fillBetween: 'laser' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, 2 * (-10 - (laser[_i] - 0.1))], [10, 2 * (10 - (laser[_i] - 0.1))]], // 100 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0 } },\n\n    {\n      fillBetween: 'laser_minus' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, -2 * (-10 - (laser[_i] - 0.1))], [10, -2 * (10 - (laser[_i] - 0.1))]], // 100 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0 } },\n\n    {\n      fillBetween: 'laser' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, 2 * (-10 - (laser[_i] + 0.1))], [10, 2 * (10 - (laser[_i] + 0.1))]], // 200 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0 } },\n\n    {\n      fillBetween: 'laser_minus' + _i.toString(),\n      color: laser_color[_i],\n      data: [[-10, -2 * (-10 - (laser[_i] + 0.1))], [10, -2 * (10 - (laser[_i] + 0.1))]], // 200 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0 } }]);\n\n\n  }\n\n  for (var _i2 = 0; _i2 < params.all.length; _i2++) {\n    var mod_i = (params.allLabel[_i2][0][0] * 2 + params.allLabel[_i2][0][1]) % 3;\n    series.push({\n      color: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\n      data: params.all[_i2],\n      points: {\n        show: true,\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2 : defaultRadius, //15 meV\n        symbol: params.isMetal ? 'circle' : mod_i === 2 ? 'square' : 'triangle' },\n\n      lines: {\n        show: true },\n\n      point_labels: params.allLabel[_i2],\n      hoverable: true });\n\n  }\n  for (var _i3 = 0; _i3 < params.result.length; _i3++) {\n    var _mod_i = (params.resultLabel[_i3][0] * 2 + params.resultLabel[_i3][1]) % 3;\n    series.push({\n      color: params.isMetal || _mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\n      data: [params.result[_i3]],\n      points: {\n        show: true,\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2 : defaultRadius,\n        symbol: params.isMetal ? 'circle' : _mod_i === 2 ? 'square' : 'triangle',\n        fill: true,\n        fillColor: params.isMetal || _mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)' },\n\n      point_labels: [params.resultLabel[_i3]],\n      hoverable: true });\n\n  }\n\n\n  // blue point is diamond, otherwise square\n  if (params.pointType !== 'none') {\n    series.push({\n      color: params.pointType === 'green' ? 'rgb(12, 180, 15)' : 'rgb(255, 0, 0)',\n      data: [params.point],\n      points: {\n        show: true,\n        symbol: params.pointType === 'green' ? 'diamond' : 'square',\n        radius: defaultRadius,\n        fill: true,\n        fillColor: params.pointType === 'green' ? 'rgba(0, 0, 0, 0)' : 'rgb(255, 0, 0)' },\n\n      hoverable: false });\n\n  }\n  if (params.bluePoint !== null)\n  series.push({\n    color: 'rgb(0, 0, 255)',\n    data: [params.bluePoint],\n    points: {\n      show: true,\n      symbol: 'diamond',\n      radius: defaultRadius,\n      fill: true,\n      fillColor: 'rgba(0, 0, 0, 0)' },\n\n    hoverable: false,\n    shadowSize: 0 });\n\n\n  var $placeholder = $('#' + placeholder);\n  var plot = $.plot($placeholder, series, options);\n\n  var previousPoint = null;\n  $placeholder.bind('plothover', function (event, pos, item) {\n    if (item) {\n      if (previousPoint !== item.dataIndex) {\n        previousPoint = item.dataIndex;\n        $('#tooltip').remove();\n        showTooltip(item.pageX, item.pageY, '(' +\n        item.series.point_labels[item.dataIndex][0] + ', ' + item.series.point_labels[item.dataIndex][1] + ')');\n      }\n    } else {\n      $('#tooltip').remove();\n      previousPoint = null;\n    }\n  });\n\n  if (params.isMetal) {\n    for (var _i4 = 0; _i4 < params.all.length; _i4++) {\n      var s = Math.floor(params.all.length / 2);\n      var p = params.all[_i4][params.all[_i4].length - 1];\n      var p1 = params.allLabel[_i4][params.all[_i4].length - 1];\n      var o = plot.pointOffset({ x: p[0], y: p[1] });\n      var axes = plot.getAxes();\n      var xaxis = axes.xaxis,yaxis = axes.yaxis;\n      if (_i4 % 2 === s % 2 && p[0] <= xaxis.max && p[0] >= xaxis.min &&\n      p[1] <= yaxis.max - 0.05 && p[1] >= yaxis.min + 0.05)\n      $placeholder.append('\\n                    <div class=\"series_label\" style=\"left: ' + (\n      o.left - (_i4 === s ? 60 : 10)) + 'px; top: ' + (o.top - 30) + 'px;\">\\n                        <p>' + (\n      _i4 === s ? '2<i>n</i>+<i>m</i>=' : '') + (p1[0] * 2 + p1[1]) + '</p>\\n                    </div>\\n                ');\n\n\n    }\n  } else {\n    var mid = Math.round(params.all.length / 2);\n    var pMid = params.allLabel[mid][params.all[mid].length - 1];\n    var divMid = Math.floor((pMid[0] * 2 + pMid[1]) / 3); //use ceil, for right is scattered, left is dense\n\n    for (var _i5 = 0; _i5 < params.all.length; _i5++) {\n      var _p = params.all[_i5][params.all[_i5].length - 1];\n      var _p2 = params.allLabel[_i5][params.all[_i5].length - 1];\n      var _o = plot.pointOffset({ x: _p[0], y: _p[1] });\n      var _axes = plot.getAxes();\n      var _xaxis = _axes.xaxis,_yaxis = _axes.yaxis;\n      var div = Math.round((_p2[0] * 2 + _p2[1]) / 3);\n      var mod = (_p2[0] * 2 + _p2[1]) % 3;\n      if (divMid % 2 === div % 2) {\n        if (_p[0] <= _xaxis.max - 0.02 && _p[0] >= _xaxis.min + 0.02 && _p[1] <= _yaxis.max - 0.1 &&\n        _p[1] >= _yaxis.min + 0.1) {\n          var dA = {\n            color: mod === 1 ? '#FF0000' : '#000000',\n            left: _o.left - (divMid === div ? 60 : 10),\n            top: _o.top - (mod === 1 ? -15 :\n            divMid === div && _p[1] <= _yaxis.max - 0.15 && _p[1] >= _yaxis.min + 0.18 ? 60 : 30),\n\n\n            c1: divMid !== div ?\n            '' :\n            (mod === 2 && _p[1] <= _yaxis.max - 0.15 ?\n            '<b>MOD2</b><br/>' :\n            '') + '2<i>n</i>+<i>m</i>=',\n            c2: _p2[0] * 2 + _p2[1],\n            c3: divMid === div && mod === 1 && _p[1] >= _yaxis.min + 0.12 ?\n            '<br/><b>MOD1</b>' :\n            '' };\n\n          $placeholder.append('\\n                        <div class=\"series_label\" style=\"color:' +\n          dA.color + ';left:' + dA.left + 'px;top:' + (dA.top - 0) + 'px;\">\\n                            <p>' +\n          dA.c1 + dA.c2 + dA.c3 + '</p>\\n                        </div>\\n                    ');\n\n          // workaround to let editor know that dA.top is integer\n        }\n      }\n    }\n  }\n\n  for (var _i6 = 0; _i6 < params.rbm.length; _i6++) {\n    if (_i6 % 2 === 0 || params.rbm.length === 1) {\n      var o1 = plot.pointOffset({ x: params.rbmPos[_i6], y: yMax });\n      $placeholder.append('\\n                <div class=\"rbm_label\" style=\"left:' + (\n      o1.left - 15) + 'px;top:' + (o1.top - 30) + 'px;\">\\n                    <p>' +\n      params.rbmLabel[_i6] + '</p>\\n                </div>\\n            ');\n\n\n    }\n  }\n}\n\nfunction showTooltip(x, y, contents) {\n  $('\\n        <div id=\"tooltip\" class=\"tooltip right in\">\\n            <div class=\"tooltip-arrow\" style=\"top: 50%;\"></div>\\n            <div class=\"tooltip-inner\">' +\n\n\n  contents + '</div>\\n        </div>\\n    ').\n\n\n  css({\n    display: 'block',\n    top: y,\n    left: x }).\n  appendTo('body').fadeIn(200);\n}\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n\n\n'use strict';\n\nvar timeLoad = performance.now(); // before load\nvar timeStartup = void 0;\n\n$.getScript(navigator.language.substr(0, 2).toLowerCase() !== \"zh\" ?\n\"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/MathJax.js\" :\n\"https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js\" +\n\"?config=TeX-AMS_SVG-full,Safe&locale=en\", function () {\n  timeStartup = performance.now();\n  console.log(\"MathJax load takes \" + (timeStartup - timeLoad).toFixed(2));\n});\n\nvar urlParams = {};\n(window.onpopstate = function () {\n  var match = void 0,\n  pl = /\\+/g, // Regex for replacing addition symbol with a space\n  search = /([^&=]+)=?([^&]*)/g,\n  decode = function decode(s) {return decodeURIComponent(s.replace(pl, \" \"));},\n  query = window.location.search.substring(1);\n\n  urlParams = {};\n  while (match = search.exec(query)) {\n    urlParams[decode(match[1])] = decode(match[2]);}\n})();\n\nif (/Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent)) {\n  $('.selectpicker').selectpicker('mobile');\n}\n\nvar $body = $(\"body\");\n\n/*\n                        * Step 1\n                        */\n\nif ($body.hasClass(\"Step1\")) {\n\n  var $selectType = $(\"#slType\");\n  for (var i = 0; i < typeArr.length; i++) {\n    $selectType.append(\"<option value=\\\"\" + i + \"\\\">\" + typeArr[i] + \"</option>\");}\n\n  $selectType.selectpicker('val', 0).\n  selectpicker('refresh').\n  on(\"loaded.bs.select\", clearTitle).\n  on('changed.bs.select', clearTitle);\n\n}\n\n/*\n   * Step 2\n   */\n\nif ($body.hasClass('Step2')) {\n\n  var type = parseInt(urlParams['Type']); // '', ' ' will be converted to NaN in this process.\n  if (isNaN(type) || type > 5 || type < 0)\n  location.href = 'Step1.html';\n\n  var $selectP1 = $('#slP1'),$selectP2 = $('#slP2'),_$selectType = $('#slType');\n  var $selectP1P2 = $('#slP1, #slP2');\n\n  $('#title')[0].innerHTML += ' <small>' + typeArr[type] + '</small>';\n\n  $('#dataTables').find(\".type\" + type).removeClass('hidden');\n\n  // generate options\n\n  for (var _i = 0; _i < p1Arr.length; _i++) {\n    if (type >= 3) {\n      var threshold = type === 3 ? 8 : 2;\n      if (_i >= threshold) break;\n    }\n    $selectP1P2.append(\"<option value=\\\"\" + _i + \"\\\">\" + p1Arr[_i] + \"</option>\");\n  }\n  for (var _i2 = 0; _i2 < typeArr.length; _i2++) {\n    _$selectType.append(\"<option value=\\\"\" + _i2 + \"\\\">\" + typeArr[_i2] + \"</option>\");}\n\n  // start recovering\n\n  if (['P1', 'P2', 'Val1', 'Val2', 'RBM'].every(function (e) {return urlParams[e] !== undefined;})) {\n\n    var params = {\n      p1: parseInt(urlParams['P1']), // int\n      p2: parseInt(urlParams['P2']), // int\n      val1: urlParams['Val1'], // empty-able str\n      val2: urlParams['Val2'], // empty-able str\n      rbm: urlParams['RBM'] // empty-able str\n    };\n\n    var valueBetween = function valueBetween(xy, a, b) {return xy >= a && xy <= b;};\n    var val1_ = parseFloat(params.val1),val2_ = parseFloat(params.val2),rbm_ = parseFloat(params.rbm);\n\n    var emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n    if (emptyNum >= 2 || isNaN(params.p1) || isNaN(params.p2) ||\n    !isNaN(val1_) && !valueBetween(val1_, 0, 4) || !isNaN(val2_) && !valueBetween(val2_, 0, 4) ||\n    !isNaN(rbm_) && !valueBetween(rbm_, 30, 500) ||\n    !valueBetween(params.p1, 0, 11) || !valueBetween(params.p2, 0, 11))\n\n    location.href = 'Step1.html';\n\n    $selectP1.selectpicker('val', params.p1);\n    $selectP2.selectpicker('val', params.p2);\n    $('#edVal1').val(params.val1);\n    $('#edVal2').val(params.val2);\n    $('#edRBM').val(params.rbm);\n\n\n  } else if (['P1', 'P2', 'Val1', 'Val2', 'RBM'].every(function (e) {return urlParams[e] !== undefined;}))\n  location.href = 'Step1.html';\n\n  // end validation and recovering\n\n  _$selectType.selectpicker('val', type);\n  $('.selectpicker').selectpicker('refresh');\n\n  $('select').on('loaded.bs.select', clearTitle);\n  $selectP1.on('changed.bs.select', function (e, index) {\n    var i = index - 1;\n    clearTitle(); // only when slP1 changes the title have to be cleared; only active select\n    $selectP2.find('option').each(function () {\n      var value = parseInt($(this).val());\n      if (i % 2 === 0 && value === i + 1 || i % 2 === 1 && value === i - 1)\n      $selectP2.selectpicker('val', value);\n    });\n  });\n\n}\n\n\n/*\n   * Step 3\n   */\n\nif ($body.hasClass('Step3')) {\n\n  // check integrity\n  if (!['Type', 'P1', 'P2', 'Val1', 'Val2', 'RBM'].every(function (e) {return urlParams[e] !== undefined;}))\n  location.href = 'Step1.html';\n\n  var inputParams = {\n    type: parseInt(urlParams['Type']), // int\n    p1: parseInt(urlParams['P1']), // int\n    p2: parseInt(urlParams['P2']), // int\n    val1: urlParams['Val1'], // empty-able str\n    val2: urlParams['Val2'], // empty-able str\n    rbm: urlParams['RBM'] // empty-able str\n  };\n\n  var _valueBetween = function _valueBetween(xy, a, b) {return xy >= a && xy <= b;};\n  var _val1_ = parseFloat(inputParams.val1),_val2_ = parseFloat(inputParams.val2),_rbm_ = parseFloat(inputParams.rbm);\n  // also, '' and ' ' will be converted to NaN in this process.\n\n  var _emptyNum = Number(isNaN(_val1_)) + Number(isNaN(_val2_)) + Number(isNaN(_rbm_));\n  if (_emptyNum >= 2 || isNaN(inputParams.type) || isNaN(inputParams.p1) || isNaN(inputParams.p2) ||\n  !isNaN(_val1_) && !_valueBetween(_val1_, 0, 4) || !isNaN(_val2_) && !_valueBetween(_val2_, 0, 4) ||\n  !isNaN(_rbm_) && !_valueBetween(_rbm_, 30, 500) || !_valueBetween(inputParams.type, 0, 5) ||\n  !_valueBetween(inputParams.p1, 0, 11) || !_valueBetween(inputParams.p2, 0, 11))\n\n  location.href = 'Step1.html';\n\n\n  $('#title')[0].innerHTML += ' <small>' + typeArr[inputParams.type] + '</small>';\n\n  var plotParams = processOutput(getPlotParams(inputParams));\n\n  $('#resultDiv').\n  addClass(plotParams.ar !== AssignResult.error ? 'alert-success' : 'alert-danger').\n  html(plotParams.resultString);\n  $('#yAxisLabel').html(plotParams.yAxisLabel);\n  $('#xAxisLabel').html(plotParams.xAxisLabel);\n  $('#' + plotParams.pointType + 'Legend').css('display', '');\n  if (plotParams.bluePoint !== null)\n  $('#blueLegend').css('display', '');\n\n  $(drawPlot('plot-placeholder', plotParams));\n\n}\n\n// functions\n\nfunction clearTitle() {// used in Step1 and Step2\n\n  $('.bootstrap-select').find('button').removeAttr('title');\n}\n\nfunction validate(form) {// used in Step2\n\n  var $hint = $('#hint');\n  var invokeError = function invokeError(msg) {\n    $hint.addClass('alert-danger').\n    html(\"<span class=\\\"glyphicon glyphicon-exclamation-sign\\\" aria-hidden=\\\"true\\\"></span> \" + msg);\n    return false;\n  };\n  var val1_ = parseFloat(form.Val1.value);\n  var val2_ = parseFloat(form.Val2.value);\n  var rbm_ = parseInt(form.RBM.value);\n  var emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n  if (emptyNum >= 2) return invokeError('At least 2 values are required.');else\n  {\n    if (!isNaN(val1_) && (val1_ < 0 || val1_ > 4) ||\n    !isNaN(val2_) && (val2_ < 0 || val2_ > 4) ||\n    !isNaN(rbm_) && (rbm_ < 30 || rbm_ > 500))\n    return invokeError('Please input valid value.');\n    if ($(\"#slP1\").selectpicker('val') === '')\n    return invokeError('Please select the type of transition energy.');\n\n    $(\".selectpicker\").removeAttr('disabled');\n\n    history.replaceState(null, null,\n    'Step2.html?' + ['Type', 'P1', 'Val1', 'P2', 'Val2', 'RBM'].map(function (e) {return e + '=' + form[e].value;}).join('&'));\n    return true;\n  }\n}\n\nfunction changeEdit(p1_lesser, val1, val2) {// used in Step2\n  $(\"#slP1\").selectpicker('val', p1_lesser);\n  $(\"#slP2\").selectpicker('val', p1_lesser + 1);\n  $(\"#edVal1\").val(val1);\n  $(\"#edVal2\").val(val2);\n}\n\nfunction calculate(form) {// used in Step2\n\n  var $calcHint = $('#calculatorHint');\n  var $calcResult = $('#calcResult');\n\n  var invokeError = function invokeError() {\n    $calcHint.html(\"\\n      <div class=\\\"alert-danger hint\\\">\\n        <span class=\\\"glyphicon glyphicon-exclamation-sign\\\" aria-hidden=\\\"true\\\"></span>\\n        No valid result.\\n      </div>\\n    \");\n\n\n\n\n\n    $calcResult.html('');\n  };\n\n  var n = parseInt(form.NCalc.value),m = parseInt(form.MCalc.value),t = parseInt(urlParams['Type']);\n  if (n < m) {;var _ref = [m, n];n = _ref[0];m = _ref[1];}\n  if (isNaN(n) || isNaN(m) || n <= 6 || m <= 0 || 2 * n + m > seriesThreshold) {\n    invokeError();\n    return false;\n  }\n\n  $calcHint.html('');\n  var $resultList = $(\"<tbody></tbody>\");\n  var $plotList = $('<div></div>'); // empty wrapper\n  $calcResult.html('').\n  append($('<table class=\"table table-striped math\" id=\"calcResultList\"></table>').append($resultList)).\n  append($plotList);\n\n  $resultList.append(\"<tr><td>\\\\(d_t\\\\)</td><td>\\\\( \" + Dt(n, m, t).toFixed(3).toString() + \" \\\\ \\\\mathrm{nm}\\\\)</td></tr>\");\n\n  // generate d_t and RBM information\n\n  generateRBMCalculationResult(n, m, t, $resultList);\n\n  // do energy calculation\n\n  var calculatedEnergy = new Array(12);\n  for (var p1 = 0; p1 < 12; p1++) {\n    if (isMetal(p1ToP[p1]) !== isMetal(n, m)) {\n      calculatedEnergy[p1] = -1;\n      continue;\n    }\n    try {\n      calculatedEnergy[p1] = getEnergy(Dt(n, m, t), Theta(n, m), p1ToP[p1], t, isMetal(n, m) ? p1 % 2 - 1 : Mod(n, m)).\n      toFixed(3).toString();\n    }\n    catch (err) {\n      calculatedEnergy[p1] = -1;\n    }\n  }\n\n  // apply results to plot\n\n  var validResultNumber = 0;var _loop = function _loop(\n\n  _p) {\n\n    // assert that there are results for both P1 = 2k and (2k + 1).\n    // note that for (9,7) the S66 doesn't work due to too small d_t which\n    // caused 1st derivative issue, but S55 is valid.\n\n    if (calculatedEnergy[_p] === -1 || calculatedEnergy[_p + 1] === -1)\n      return \"continue\";\n\n    validResultNumber++;\n\n    $resultList.append(\n    $(\"<tr><td>\" + p1Arr[_p] + \"</td><td>\\\\(\" + calculatedEnergy[_p] + \"\\\\ \\\\mathrm{eV}\\\\)</td></tr>\").\n    click(function () {return changeEdit(_p, calculatedEnergy[_p], calculatedEnergy[_p + 1]);}).\n    css('cursor', 'pointer')).\n    append(\n    $(\"<tr><td>\" + p1Arr[_p + 1] + \"</td><td>\\\\(\" + calculatedEnergy[_p + 1] + \"\\\\ \\\\mathrm{eV}\\\\)</td></tr>\").\n    click(function () {return changeEdit(_p, calculatedEnergy[_p], calculatedEnergy[_p + 1]);}).\n    css('cursor', 'pointer'));\n\n\n    var inputParams = {\n      type: t, // int\n      p1: _p, // int\n      p2: _p + 1, // int\n      val1: calculatedEnergy[_p], // empty-able str\n      val2: calculatedEnergy[_p + 1], // empty-able str\n      rbm: '' // empty-able str\n    };\n\n    var plotParams = processOutput(getPlotParams(inputParams));\n    var plotId = \"calcPlot\" + Math.round(_p / 2);\n\n    var $plot = $(\"\\n      <div class=\\\"math calc-plot-container\\\" \\n           oncontextmenu=\\\"return false\\\" onmousedown=\\\"return false\\\">\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-lg-offset-2 col-md-offset-6 rbmAxisLabel\\\">\\n            \\\\(\\\\omega_{\\\\mathrm{RBM}}\\\\ (\\\\mathrm{cm^{-1}})\\\\)\\n          </div>\\n        </div>\\n        <br />\\n        <div class=\\\"row\\\" style=\\\"position: relative;\\\">\\n          <div class=\\\"yAxisLabel\\\">\" +\n\n\n\n\n\n\n\n\n\n    plotParams.yAxisLabel + \"</div>\\n          <div id=\\\"\" +\n    plotId + \"\\\" style=\\\"width: 400px; height: 290px; font-family: 'Times New Roman', serif;\\\"\\n               class=\\\"col-md-offset-1 col-xs-offset-1\\\"></div>\\n        </div>\\n        <div class=\\\"row\\\">\\n          <div class=\\\"col-lg-offset-2 col-md-offset-5 xAxisLabel\\\">\\n               \" +\n\n\n\n\n    plotParams.xAxisLabel + \"\\n          </div>\\n        </div>\\n      </div>\\n    \");\n\n\n\n\n\n    $plotList.append($plot);\n    drawPlot(plotId, plotParams);};for (var _p = 0; _p < 12; _p += 2) {var _ret = _loop(_p);if (_ret === \"continue\") continue;\n  }\n\n  if (validResultNumber === 0) {\n    invokeError();\n  }\n\n  MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\n  return false;\n}\n\nfunction generateRBMCalculationResult(n, m, t, $resultList) {// separated function to reduce complexity\n\n  var isAirSuspended = t === 0;\n  var editRBM = function editRBM(e) {return $('#edRBM').val(e);};\n  if (isAirSuspended) {\n    var rbmAS = dt2RBM(Dt(n, m, t), isMetal(n, m) ? 2 : 0, t).toFixed(1).toString();\n    $resultList.append(\n    $(\"\\n        <tr>\\n            <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ \" + (\n\n    isMetal(n, m) ? \"(p=3)\" : \"(p=1,2)\") + \" \\\\)</td>\\n            <td>\\\\( \" +\n    rbmAS + \" \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\\n        </tr>\\n      \").\n\n\n    click(function () {return editRBM(rbmAS);}).\n    css('cursor', 'pointer'));\n\n  }\n\n  var rbmGeneral = dt2RBM(Dt(n, m, t), isAirSuspended ? 3 : 0, t).toFixed(1).toString();\n  $resultList.append(\n  $(\"\\n      <tr>\\n          <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ \" + (\n\n  isAirSuspended ? \"(p>3)\" : \"\") + \" \\\\)</td>\\n          <td>\\\\( \" +\n  rbmGeneral + \" \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\\n      </tr>\\n    \").\n\n\n  click(function () {return editRBM(rbmGeneral);}).\n  css('cursor', 'pointer'));\n\n}\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","\n'use strict';\n\nlet isUnparsable = e => isNaN(parseFloat(e));\n\nfunction getPlotParams(inputParams) {\n  let decimalDigits = (d) => d.split('.')[1].length;\n\n  if (isUnparsable(inputParams.val1) && isUnparsable(inputParams.val2)) {\n    throw new Error('Unauthorized Access');\n  } else if (isUnparsable(inputParams.val1) || isUnparsable(inputParams.val2)) {\n    if (isUnparsable(inputParams.rbm)) throw new Error('Unauthorized Access');\n    inputParams.uncertainty = 2.0 / Math.pow(10, decimalDigits(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1 ));\n    return E1R1(inputParams);\n  } else {\n    inputParams.uncertainty = 2.0 / Math.pow(10,\n      Math.min(decimalDigits(inputParams.val1), decimalDigits(inputParams.val2))\n    );\n    return E2(inputParams);\n  }\n}\n\nfunction E1R1(inputParams) {\n\n  let p1 = (isUnparsable(inputParams.val1) ? inputParams.p2 : inputParams.p1), type = inputParams.type, p = p1ToP[p1]; // int\n  let val = parseFloat(isUnparsable(inputParams.val1) ? inputParams.val2 : inputParams.val1); // float\n  let wRBM = parseFloat(inputParams.rbm); // float, integrity checked in getPlotParam\n\n  let dt = wRBM2Dt(wRBM, p, type);\n  let cos = getCos3Theta(val, dt, p, type);\n  let resultString = '';\n  let error = () => Assign({\n    bluePoint: null,\n    point: [ val, 0.23 ],\n    pLesser: pToLesser[p],\n    type: type,\n    pointType: 'none',\n    p1Lesser: p1ToLesser(p1),\n    resultString: resultString\n  });\n\n  if (cos[0] === -1 && cos[1] === -1) {\n    resultString += 'Invalid input: out of range.';\n    return error();\n  }\n\n  let pAnother, modAnother;\n  if (isMetal(p)) {\n    if (p1 % 4 - 3 !== (cos[0] === -1 ? 0 : -1)) {\n      resultString += `Invalid input: You may have mistaken ${p1Arr[p1 + 5 - (p1 % 4) * 2]} for ${p1Arr[p1]}.`;\n      return error();\n    }\n    pAnother = p;\n    modAnother = cos[0] === -1 ? -1 : 0;\n  }\n  else {\n    pAnother = isMetal(p + 1) ? p - 1 : p + 1;\n    modAnother = cos[0] === -1 ? 2 : 1; // === mod1\n  }\n\n  let valAnother;\n  try {\n    valAnother = getEnergyFromCos3Theta(dt, cos[0] === -1 ? cos[1] : cos[0], pAnother, type, modAnother);\n  }\n  catch (err) {\n    if (err.message === 'dt') {\n      resultString += 'Invalid input: out of range, diameter too small.';\n      return error();\n    }\n    throw err;\n  }\n  if ((isMetal(p) && (modAnother === -1)) || (!isMetal(p) && (p > pAnother))) {\n    [p, pAnother] = [pAnother, p];\n    [val, valAnother] = [valAnother, val];\n  }\n  let x = (val + valAnother) / 2, y = valAnother - val;\n  return Assign({\n    bluePoint: null,\n    point: [x, y],\n    pLesser: p,\n    type: type,\n    pointType: 'green',\n    p1Lesser: p1ToLesser(p1),\n    resultString: resultString\n  }, modAnother);\n\n}\n\n\nfunction E2(inputParams) {\n\n  let resultString = '';\n  let p1 = inputParams.p1, p2 = inputParams.p2, type = inputParams.type; // int\n  let val1 = parseFloat(inputParams.val1), val2 = parseFloat(inputParams.val2); // float, integrity checked in getPlotParams\n  let p_1 = p1ToP[p1], p_2 = p1ToP[p2]; // int\n  let rbm = inputParams.rbm; // string\n\n  // don't use 'with' block\n  if (p1 > p2) {\n    [p_1, p_2] = [p_2, p_1];\n    [val1, val2] = [val2, val1];\n    [p1, p2] = [p2, p1];\n  }\n\n  if (isMetal(p_2) !== isMetal(p_1)) {\n    throw new Error('invalid form submission');\n  }\n\n  if (p2 - p1 === 1) {\n    let bluePoint = null;\n    if (!isUnparsable(rbm)) {\n      let average = getAverage(val2 - val1, parseFloat(rbm), p_1, type);\n      if (average !== null) {\n        bluePoint = [average, val2 - val1];\n      }\n      else {\n        resultString += 'Invalid input: RBM value out of range. Only transition energies are processed. <br/ >';\n      }\n    }\n    return Assign({\n      point: [ (val1 + val2) / 2, val2 - val1 ],\n      pLesser: p_1,\n      type: type,\n      pointType: 'red',\n      bluePoint: bluePoint,\n      p1Lesser: p1,\n      resultString: resultString\n    });\n  }\n\n}\n\nfunction Assign(params, mod = -1) {\n\n  // params: plotParams\n  // x: average y: splitting\n\n  let uncertainty = params.uncertainty;\n  let dxMin = -1, dxMax = -1, dyMin = -1, dyMax = -1;\n  let Dist = (x1, y1, x2, y2) => Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) * 25);\n  let Dist_ = (e) => Dist(e[2], e[3], params.point[0], params.point[1]);\n  let deltaX = 0.6,\n    maxY = isMetal(params.pLesser) ? 0.6 : params.point[1] + 0.6,\n    minY = isMetal(params.pLesser) ? -0.1 : params.point[1] - 0.6;\n\n  function setBounds(dxMin_, dxMax_, dyMin_, dyMax_) {\n    dxMin = dxMin_;\n    dxMax = dxMax_;\n    dyMin = dyMin_;\n    dyMax = dyMax_;\n  }\n\n  // https://github.com/mihaifm/linq, many thanks to you!\n\n  params.all = Enumerable.from(getList(params.pLesser, params.type))\n    .where(e => (e[2] >= params.point[0] - deltaX && e[2] <= params.point[0] + deltaX &&\n      e[3] <= maxY && e[3] >= minY))\n    .toArray();\n\n  let query = Enumerable.from(params.all)\n    .where(e => (\n      (mod === -1 || isMetal(params.pLesser) || mod === Mod(e[0], e[1])) &&\n      params.point[0] - e[2] >= dxMin && params.point[0] - e[2] <= dxMax &&\n      params.point[1] - e[3] >= dyMin && params.point[1] - e[3] <= dyMax\n    ));\n\n  setBounds(-uncertainty, uncertainty, -uncertainty, uncertainty);\n  let uc = query.toArray(); // query once to get uncertainty range\n\n  function processOutput() {\n    params.result = query.orderBy(Dist_).toArray();\n    for (let i = 0; i < params.result.length; i++)\n      params.resultString += `\n        <b>(${Math.round(params.result[i][0])},${Math.round(params.result[i][1])})</b>\n        ${i !== params.result.length - 1 ? ', ' : ''}`;\n    params.resultString += '</span>';\n  }\n\n  if (params.pointType === 'none') {\n    params.ar = AssignResult.error;\n    params.result = [];\n    return params;\n  }\n\n  if (uncertainty > 0.2) {\n    params.resultString = 'Input uncertainty too large. Please give more significant figures.';\n    params.ar = AssignResult.error;\n    params.result = [];\n    return params;\n  }\n\n  if (params.pointType === 'red') {\n    if (params.bluePoint != null) {\n      if (params.bluePoint[0] - params.point[0] < 0.02) setBounds(-0.008, 0.008, -0.015, 0.015);\n      else setBounds(-0.030, -0.005, -0.015, 0.015); // don't change at this moment\n    } else setBounds(-0.020, 0.008, -0.015, 0.015);\n\n    if (query.count() === 1 && uc.length <= 1) {\n      params.ar = AssignResult.accurate;\n      params.resultString += 'The assignment result is:<br /><span style=\"font-size: 28px;\">';\n      processOutput();\n      return params;\n    }\n    setBounds(-0.040, 0.0126, -0.030, 0.030);\n  } else setBounds(-0.070, 0.070, -0.040, 0.040);\n\n  query.union(uc);\n\n  if (query.count() > 0) {\n    params.ar = AssignResult.possible;\n    params.resultString += 'The likely assignments include:<br /><span style=\"font-size: 28px;\">';\n    processOutput();\n    return params;\n  }\n\n  // use the green criteria and query again for no match.\n  // and it's easy to see that green point, if not returned in the previous step,\n  // will not give results in this step.\n\n  setBounds(-0.070, 0.070, -0.040, 0.040);\n  let tmp = Enumerable.from(params.all).orderBy(Dist_).toArray();\n  if (Dist_(tmp[0]) / Dist_(tmp[1]) <= 0.5 && query.count() !== 0) {\n    params.ar = AssignResult.impossible;\n    query = Enumerable.from([ tmp[0] ]);\n    params.resultString += 'No match. The most possible assignment result is:<br /><span style=\"font-size: 28px;\">';\n    processOutput();\n    return params;\n  }\n\n  params.ar = AssignResult.error;\n  params.resultString = 'Invalid input: out of range. Please check your input.';\n  params.result = [];\n  return params;\n}\n\nfunction processOutput(params) {\n\n  // process RBM\n\n  const yMax = isMetal(params.pLesser) ? 0.51 : params.point[1] + 0.4;\n  const xMin = params.point[0] - 0.5, xMax = params.point[0] + 0.5;\n  let s = getRBMArray(params.pLesser, params.type); // {rbm, rbmLabel}\n  let rbm = [];\n  let rbmLabel = [];\n  let rbmPos = [];\n  let between = (xy, r1, r2) => (xy >= r1 && xy <= r2) || (xy >= r2 && xy <= r1);\n  for (let i = 0 ; i < s.rbm.length; i++) {\n    let a = s.rbm[i];\n    let t;\n    if (a.length === 2)\n      t = (a[0][0] - a[1][0]) * (yMax - a[1][1]) / (a[0][1] - a[1][1]) + a[1][0];\n    else {\n      let u;\n      if (between(yMax, a[1][1], a[0][1]))\n        u = 0;\n      else // if between(a[1][1], a[2][1])\n        u = 2;\n      t = (a[u][0] - a[1][0]) * (yMax - a[1][1]) / (a[u][1] - a[1][1]) + a[1][0];\n    }\n    if (between(t, xMax, xMin)) {\n      rbm.push(s.rbm[i]);\n      rbmLabel.push(s.rbmLabel[i]);\n      rbmPos.push(t);\n    }\n  }\n  params.rbm = rbm;\n  params.rbmLabel = rbmLabel;\n  params.rbmPos = rbmPos;\n\n  // process all\n\n  let all = params.all; // you know, lazy evaluation\n  let q = Enumerable.from(all)\n    .groupBy(\n      e => 2 * e[0] + e[1], // key\n      e => e, // group element\n      (key, group) => ({ key: key, value: group.orderBy(e => e[0]).toArray() })\n    ); // use default compare method\n\n  params.all = q.select(e => e.value.map(ee => [ee[2], ee[3]])).toArray();\n  params.allLabel = q.select(e => e.value.map(ee => [ee[0], ee[1]])).toArray();\n\n  // process result\n\n  let result = params.result;\n  params.result = result.map(e => [e[2], e[3]]);\n  params.resultLabel = result.map(e => [e[0], e[1]]);\n\n  params.isMetal = isMetal(params.pLesser);\n  params.yAxisLabel = `\\\\(${p1Arr_raw[params.p1Lesser + 1]}-${p1Arr_raw[params.p1Lesser]}\\\\ (\\\\mathrm{eV})\\\\)`;\n  params.xAxisLabel = `\\\\((${p1Arr_raw[params.p1Lesser + 1]}+${p1Arr_raw[params.p1Lesser]})/2\\\\ (\\\\mathrm{eV})\\\\)`;\n\n\n  // select g.OrderBy(elem => elem[0]);\n  // note that average energy may not increase monotonously as n in (n,m) increases.\n  // thus elem => elem[2] is wrong.\n  // test: S11 = 1.420, S22 = 2.134 as (6,4), see branch 2n + m = 16\n\n\n  return params;\n}\n","\n'use strict';\n\nfunction drawPlot(placeholder, params) {\n\n  let defaultRadius = 4, xMin = params.point[0] - 0.5, xMax = params.point[0] + 0.5;\n  let yMin = params.isMetal ? -0.01 : params.point[1] - 0.4, yMax = params.isMetal ? 0.45 : params.point[1] + 0.4;\n  let font = {\n    size: 20,\n    lineHeight: 20,\n    family: 'serif'\n  };\n  let options = {\n    xaxis: {\n      // aver\n      show: true,\n      position: 'bottom',\n      min: xMin,\n      max: xMax,\n      font: font,\n      tickLength: 10,\n      tickColor: 'rgb(255, 0, 0)',\n      color: 'rgb(255, 0, 0)'\n    },\n    yaxis: {\n      show: true,\n      min: yMin,\n      max: yMax,\n      font: font,\n      tickLength: 10,\n      tickColor: 'rgb(0, 0, 0)',\n      color: 'rgb(0, 0, 0)'\n    },\n    series: {\n      hoverable: true\n      // shadowSize: 0\n    },\n    grid: {\n      borderColor: {\n        top: 'rgb(0, 0, 255)',\n        bottom: 'rgb(255, 0, 0)',\n        left: 'rgb(0, 0, 0)',\n        right: 'rgb(0, 0, 0)'\n      },\n      hoverable: true,\n      minBorderMargin: 0\n    }\n  };\n\n  let series = [];\n  for (let i = 0; i < params.rbm.length; i++)\n    series.push({\n      color: 'rgb(208, 208, 208)', // use the shadow\n      data: params.rbm[i],\n      shadowSize: 5,\n      hoverable: false\n    });\n  let laser = [1240 / 785, 1240 / 633, 1240 / 532];\n  let laser_color = ['rgb(136, 136, 136)', 'rgb(245, 0, 0)', 'rgb(12, 127, 15)'];\n\n  for (let i = 0; i < laser.length; i++) {\n    series = series.concat([{\n      id: `laser${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, 2 * (-10 - laser[i])], [10, 2 * (10 - laser[i])]],\n      shadowSize: 0\n    }, {\n      id: `laser_minus${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, -2 * (-10 - laser[i])], [10, -2 * (10 - laser[i])]],\n      shadowSize: 0\n    }, {\n      fillBetween: `laser${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, 2 * (-10 - (laser[i] - 0.1))], [10, 2 * (10 - (laser[i] - 0.1))]], // 100 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0\n      }\n    }, {\n      fillBetween: `laser_minus${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, -2 * (-10 - (laser[i] - 0.1))], [10, -2 * (10 - (laser[i] - 0.1))]], // 100 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0\n      }\n    }, {\n      fillBetween: `laser${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, 2 * (-10 - (laser[i] + 0.1))], [10, 2 * (10 - (laser[i] + 0.1))]], // 200 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0\n      }\n    }, {\n      fillBetween: `laser_minus${i.toString()}`,\n      color: laser_color[i],\n      data: [[-10, -2 * (-10 - (laser[i] + 0.1))], [10, -2 * (10 - (laser[i] + 0.1))]], // 200 meV\n      lines: {\n        fill: 0.3,\n        lineWidth: 0\n      }\n    }]);\n  }\n\n  for (let i = 0; i < params.all.length; i++) {\n    let mod_i = (params.allLabel[i][0][0] * 2 + params.allLabel[i][0][1]) % 3;\n    series.push({\n      color: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\n      data: params.all[i],\n      points: {\n        show: true,\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2  : defaultRadius, //15 meV\n        symbol: params.isMetal ? 'circle' : mod_i === 2 ? 'square' : 'triangle'\n      },\n      lines: {\n        show: true\n      },\n      point_labels: params.allLabel[i],\n      hoverable: true\n    });\n  }\n  for (let i = 0; i < params.result.length; i++) {\n    let mod_i = (params.resultLabel[i][0] * 2 + params.resultLabel[i][1]) % 3;\n    series.push({\n      color: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)',\n      data: [params.result[i]],\n      points: {\n        show: true,\n        radius: params.isMetal ? 78 / 0.1 * 0.015 / 2 : defaultRadius,\n        symbol: params.isMetal ? 'circle' : mod_i === 2 ? 'square' : 'triangle',\n        fill: true,\n        fillColor: params.isMetal || mod_i === 2 ? 'rgb(0, 0, 0)' : 'rgb(255, 0, 0)'\n      },\n      point_labels: [params.resultLabel[i]],\n      hoverable: true\n    });\n  }\n\n\n  // blue point is diamond, otherwise square\n  if (params.pointType !== 'none') {\n    series.push({\n      color: params.pointType === 'green' ? 'rgb(12, 180, 15)' : 'rgb(255, 0, 0)',\n      data: [params.point],\n      points: {\n        show: true,\n        symbol: params.pointType === 'green' ? 'diamond' : 'square',\n        radius: defaultRadius,\n        fill: true,\n        fillColor: params.pointType === 'green' ? 'rgba(0, 0, 0, 0)' : 'rgb(255, 0, 0)'\n      },\n      hoverable: false\n    });\n  }\n  if (params.bluePoint !== null)\n    series.push({\n      color: 'rgb(0, 0, 255)',\n      data: [params.bluePoint],\n      points: {\n        show: true,\n        symbol: 'diamond',\n        radius: defaultRadius,\n        fill: true,\n        fillColor: 'rgba(0, 0, 0, 0)'\n      },\n      hoverable: false,\n      shadowSize: 0\n    });\n\n  let $placeholder = $(`#${placeholder}`);\n  let plot = $.plot($placeholder, series, options);\n\n  let previousPoint = null;\n  $placeholder.bind('plothover', function(event, pos, item) {\n    if (item) {\n      if (previousPoint !== item.dataIndex) {\n        previousPoint = item.dataIndex;\n        $('#tooltip').remove();\n        showTooltip(item.pageX, item.pageY,\n          `(${item.series.point_labels[item.dataIndex][0]}, ${item.series.point_labels[item.dataIndex][1]})`);\n      }\n    } else {\n      $('#tooltip').remove();\n      previousPoint = null;\n    }\n  });\n\n  if (params.isMetal) {\n    for (let i = 0; i < params.all.length; i++) {\n      let s = Math.floor(params.all.length / 2);\n      let p = params.all[i][params.all[i].length - 1];\n      let p1 = params.allLabel[i][params.all[i].length - 1];\n      let o = plot.pointOffset({ x: p[0], y: p[1] });\n      let axes = plot.getAxes();\n      let xaxis = axes.xaxis, yaxis = axes.yaxis;\n      if (i % 2 === s % 2 && p[0] <= xaxis.max && p[0] >= xaxis.min &&\n        p[1] <= yaxis.max - 0.05 && p[1] >= yaxis.min + 0.05)\n        $placeholder.append(`\n                    <div class=\"series_label\" style=\"left: ${o.left - (i === s ? 60 : 10)}px; top: ${o.top - 30}px;\">\n                        <p>${i === s ? '2<i>n</i>+<i>m</i>=' : ''}${p1[0] * 2 + p1[1]}</p>\n                    </div>\n                `);\n    }\n  } else {\n    let mid = Math.round(params.all.length / 2);\n    let pMid = params.allLabel[mid][params.all[mid].length - 1];\n    let divMid = Math.floor((pMid[0] * 2 + pMid[1]) / 3); //use ceil, for right is scattered, left is dense\n\n    for (let i = 0; i < params.all.length; i++) {\n      let p = params.all[i][params.all[i].length - 1];\n      let p1 = params.allLabel[i][params.all[i].length - 1];\n      let o = plot.pointOffset({ x: p[0], y: p[1] });\n      let axes = plot.getAxes();\n      let xaxis = axes.xaxis, yaxis = axes.yaxis;\n      let div = Math.round((p1[0] * 2 + p1[1]) / 3);\n      let mod = (p1[0] * 2 + p1[1]) % 3;\n      if (divMid % 2 === div % 2) {\n        if (p[0] <= xaxis.max - 0.02 && p[0] >= xaxis.min + 0.02 && p[1] <= yaxis.max - 0.1 &&\n          p[1] >= yaxis.min + 0.1) {\n          let dA = {\n            color: mod === 1 ? '#FF0000' : '#000000',\n            left: o.left - (divMid === div ? 60 : 10),\n            top: o.top - (mod === 1 ? -15 : (\n                divMid === div && p[1] <= yaxis.max - 0.15 && p[1] >= yaxis.min + 0.18 ? 60 : 30\n              )\n            ),\n            c1: divMid !== div\n              ? ''\n              : ((mod === 2 && p[1] <= yaxis.max - 0.15\n                ? '<b>MOD2</b><br/>'\n                : '') + '2<i>n</i>+<i>m</i>='),\n            c2: p1[0] * 2 + p1[1],\n            c3: divMid === div && mod === 1 && p[1] >= yaxis.min + 0.12\n              ? '<br/><b>MOD1</b>'\n              : ''\n          };\n          $placeholder.append(`\n                        <div class=\"series_label\" style=\"color:${dA.color};left:${dA.left}px;top:${dA.top - 0}px;\">\n                            <p>${dA.c1}${dA.c2}${dA.c3}</p>\n                        </div>\n                    `); // workaround to let editor know that dA.top is integer\n        }\n      }\n    }\n  }\n\n  for (let i = 0; i < params.rbm.length; i++) {\n    if (i % 2 === 0 || params.rbm.length === 1) {\n      let o1 = plot.pointOffset({ x: params.rbmPos[i], y: yMax });\n      $placeholder.append(`\n                <div class=\"rbm_label\" style=\"left:${o1.left - 15}px;top:${o1.top - 30}px;\">\n                    <p>${params.rbmLabel[i]}</p>\n                </div>\n            `);\n    }\n  }\n}\n\nfunction showTooltip(x, y, contents) {\n  $(`\n        <div id=\"tooltip\" class=\"tooltip right in\">\n            <div class=\"tooltip-arrow\" style=\"top: 50%;\"></div>\n            <div class=\"tooltip-inner\">${contents}</div>\n        </div>\n    `)\n    .css({\n      display: 'block',\n      top: y,\n      left: x\n    }).appendTo('body').fadeIn(200);\n}\n\n","\n'use strict';\n\nlet timeLoad = performance.now(); // before load\nlet timeStartup;\n\n$.getScript(navigator.language.substr(0, 2).toLowerCase() !== \"zh\"\n  ? \"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.3/MathJax.js\"\n  : \"https://cdn.bootcss.com/mathjax/2.7.3/MathJax.js\"\n  + \"?config=TeX-AMS_SVG-full,Safe&locale=en\", function () {\n  timeStartup = performance.now();\n  console.log(\"MathJax load takes \" + (timeStartup - timeLoad).toFixed(2));\n});\n\nlet urlParams = {};\n(window.onpopstate = function () {\n  let match,\n    pl     = /\\+/g,  // Regex for replacing addition symbol with a space\n    search = /([^&=]+)=?([^&]*)/g,\n    decode = function (s) { return decodeURIComponent(s.replace(pl, \" \")); },\n    query  = window.location.search.substring(1);\n\n  urlParams = {};\n  while (match = search.exec(query))\n    urlParams[decode(match[1])] = decode(match[2]);\n})();\n\nif( /Android|webOS|iPhone|iPad|iPod|BlackBerry/i.test(navigator.userAgent) ) {\n  $('.selectpicker').selectpicker('mobile');\n}\n\nlet $body = $(\"body\");\n\n/*\n * Step 1\n */\n\nif ($body.hasClass(\"Step1\")) {\n\n  let $selectType = $(\"#slType\");\n  for (let i = 0; i < typeArr.length; i++)\n    $selectType.append(`<option value=\"${i}\">${typeArr[i]}</option>`);\n\n  $selectType.selectpicker('val', 0)\n    .selectpicker('refresh')\n    .on(\"loaded.bs.select\", clearTitle)\n    .on('changed.bs.select', clearTitle);\n\n}\n\n/*\n * Step 2\n */\n\nif ($body.hasClass('Step2')) {\n\n  let type = parseInt(urlParams['Type']); // '', ' ' will be converted to NaN in this process.\n  if (isNaN(type) || type > 5 || type < 0)\n    location.href = 'Step1.html';\n\n  let $selectP1 = $('#slP1'), $selectP2 = $('#slP2'), $selectType = $('#slType');\n  let $selectP1P2 = $('#slP1, #slP2');\n\n  $('#title')[0].innerHTML += ' <small>' + typeArr[type] + '</small>';\n\n  $('#dataTables').find(`.type${type}`).removeClass('hidden');\n\n  // generate options\n\n  for (let i = 0; i < p1Arr.length; i++) {\n    if (type >= 3) {\n      let threshold = (type === 3 ? 8 : 2);\n      if (i >= threshold) break;\n    }\n    $selectP1P2.append(`<option value=\"${i}\">${p1Arr[i]}</option>`);\n  }\n  for (let i = 0; i < typeArr.length; i++)\n    $selectType.append(`<option value=\"${i}\">${typeArr[i]}</option>`);\n\n  // start recovering\n\n  if ((['P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined ))) {\n\n    let params = {\n      p1: parseInt(urlParams['P1']), // int\n      p2: parseInt(urlParams['P2']), // int\n      val1: urlParams['Val1'], // empty-able str\n      val2: urlParams['Val2'], // empty-able str\n      rbm: urlParams['RBM'] // empty-able str\n    };\n\n    let valueBetween = (xy, a, b) => (xy >= a && xy <= b);\n    let val1_ = parseFloat(params.val1), val2_ = parseFloat(params.val2), rbm_ = parseFloat(params.rbm);\n\n    let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n    if (emptyNum >= 2 || isNaN(params.p1) || isNaN(params.p2) ||\n      !isNaN(val1_) && !valueBetween(val1_, 0, 4) || !isNaN(val2_) && !valueBetween(val2_, 0, 4) ||\n      !isNaN(rbm_) && !valueBetween(rbm_, 30, 500) ||\n      !valueBetween(params.p1, 0, 11) || !valueBetween(params.p2, 0, 11)\n    )\n      location.href = 'Step1.html';\n\n    $selectP1.selectpicker('val', params.p1);\n    $selectP2.selectpicker('val', params.p2);\n    $('#edVal1').val(params.val1);\n    $('#edVal2').val(params.val2);\n    $('#edRBM').val(params.rbm);\n\n\n  } else if ((['P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined )))\n    location.href = 'Step1.html';\n\n  // end validation and recovering\n\n  $selectType.selectpicker('val', type);\n  $('.selectpicker').selectpicker('refresh');\n\n  $('select').on('loaded.bs.select', clearTitle);\n  $selectP1.on('changed.bs.select', function (e, index) {\n    let i = index - 1;\n    clearTitle(); // only when slP1 changes the title have to be cleared; only active select\n    $selectP2.find('option').each(function () {\n      let value = parseInt($(this).val());\n      if (i % 2 === 0 && value === i + 1 || i % 2 === 1 && value === i - 1)\n        $selectP2.selectpicker('val', value);\n    });\n  });\n\n}\n\n\n/*\n * Step 3\n */\n\nif ($body.hasClass('Step3')) {\n\n  // check integrity\n  if (!(['Type', 'P1', 'P2', 'Val1', 'Val2', 'RBM'].every((e) => urlParams[e] !== undefined )))\n    location.href = 'Step1.html';\n\n  let inputParams = {\n    type: parseInt(urlParams['Type']), // int\n    p1: parseInt(urlParams['P1']), // int\n    p2: parseInt(urlParams['P2']), // int\n    val1: urlParams['Val1'], // empty-able str\n    val2: urlParams['Val2'], // empty-able str\n    rbm: urlParams['RBM'] // empty-able str\n  };\n\n  let valueBetween = (xy, a, b) => (xy >= a && xy <= b);\n  let val1_ = parseFloat(inputParams.val1), val2_ = parseFloat(inputParams.val2), rbm_ = parseFloat(inputParams.rbm);\n  // also, '' and ' ' will be converted to NaN in this process.\n\n  let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n  if (emptyNum >= 2 || isNaN(inputParams.type) || isNaN(inputParams.p1) || isNaN(inputParams.p2) ||\n    !isNaN(val1_) && !valueBetween(val1_, 0, 4) || !isNaN(val2_) && !valueBetween(val2_, 0, 4) ||\n    !isNaN(rbm_) && !valueBetween(rbm_, 30, 500) || !valueBetween(inputParams.type, 0, 5) ||\n    !valueBetween(inputParams.p1, 0, 11) || !valueBetween(inputParams.p2, 0, 11)\n  )\n    location.href = 'Step1.html';\n\n\n  $('#title')[0].innerHTML += ' <small>' + typeArr[inputParams.type] + '</small>';\n\n  let plotParams = processOutput(getPlotParams(inputParams));\n\n  $('#resultDiv')\n    .addClass(plotParams.ar !== AssignResult.error ? 'alert-success' : 'alert-danger')\n    .html(plotParams.resultString);\n  $('#yAxisLabel').html(plotParams.yAxisLabel);\n  $('#xAxisLabel').html(plotParams.xAxisLabel);\n  $('#' + plotParams.pointType + 'Legend').css('display', '');\n  if (plotParams.bluePoint !== null)\n    $('#blueLegend').css('display', '');\n\n  $(drawPlot('plot-placeholder', plotParams));\n\n}\n\n// functions\n\nfunction clearTitle() { // used in Step1 and Step2\n\n  $('.bootstrap-select').find('button').removeAttr('title');\n}\n\nfunction validate(form) { // used in Step2\n\n  let $hint = $('#hint');\n  let invokeError = (msg) => {\n    $hint.addClass('alert-danger')\n      .html(`<span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span> ${msg}`);\n    return false;\n  };\n  let val1_ = parseFloat(form.Val1.value);\n  let val2_ = parseFloat(form.Val2.value);\n  let rbm_ = parseInt(form.RBM.value);\n  let emptyNum = Number(isNaN(val1_)) + Number(isNaN(val2_)) + Number(isNaN(rbm_));\n  if (emptyNum >= 2) return invokeError('At least 2 values are required.');\n  else {\n    if (!isNaN(val1_) && (val1_ < 0 || val1_ > 4) ||\n      !isNaN(val2_) && (val2_ < 0 || val2_ > 4) ||\n      !isNaN(rbm_) && (rbm_ < 30 || rbm_ > 500))\n      return invokeError('Please input valid value.');\n    if ($(\"#slP1\").selectpicker('val') === '')\n      return invokeError('Please select the type of transition energy.');\n\n    $(\".selectpicker\").removeAttr('disabled');\n\n    history.replaceState(null, null,\n      'Step2.html?' + ['Type', 'P1', 'Val1', 'P2', 'Val2', 'RBM'].map((e) => e + '=' + form[e].value).join('&'));\n    return true;\n  }\n}\n\nfunction changeEdit(p1_lesser, val1, val2) { // used in Step2\n  $(\"#slP1\").selectpicker('val', p1_lesser);\n  $(\"#slP2\").selectpicker('val', p1_lesser + 1);\n  $(\"#edVal1\").val(val1);\n  $(\"#edVal2\").val(val2);\n}\n\nfunction calculate(form) { // used in Step2\n\n  let $calcHint = $('#calculatorHint');\n  let $calcResult = $('#calcResult');\n\n  let invokeError = () => {\n    $calcHint.html(`\n      <div class=\"alert-danger hint\">\n        <span class=\"glyphicon glyphicon-exclamation-sign\" aria-hidden=\"true\"></span>\n        No valid result.\n      </div>\n    `);\n    $calcResult.html('');\n  };\n\n  let n = parseInt(form.NCalc.value), m = parseInt(form.MCalc.value), t = parseInt(urlParams['Type']);\n  if (n < m) [n, m] = [m, n];\n  if (isNaN(n) || isNaN(m) || n <= 6 || m <= 0 || 2 * n + m > seriesThreshold) {\n    invokeError();\n    return false;\n  }\n\n  $calcHint.html('');\n  let $resultList = $(`<tbody></tbody>`);\n  let $plotList = $('<div></div>'); // empty wrapper\n  $calcResult.html('')\n    .append($('<table class=\"table table-striped math\" id=\"calcResultList\"></table>').append($resultList))\n    .append($plotList);\n\n  $resultList.append(`<tr><td>\\\\(d_t\\\\)</td><td>\\\\( ${Dt(n, m, t).toFixed(3).toString()} \\\\ \\\\mathrm{nm}\\\\)</td></tr>`);\n\n  // generate d_t and RBM information\n\n  generateRBMCalculationResult(n, m, t, $resultList);\n\n  // do energy calculation\n\n  let calculatedEnergy = new Array(12);\n  for (let p1 = 0; p1 < 12; p1++) {\n    if (isMetal(p1ToP[p1]) !== isMetal(n, m)) {\n      calculatedEnergy[p1] = -1;\n      continue;\n    }\n    try {\n      calculatedEnergy[p1] = getEnergy(Dt(n, m, t), Theta(n, m), p1ToP[p1], t, isMetal(n, m) ? p1 % 2 - 1 : Mod(n, m))\n        .toFixed(3).toString();\n    }\n    catch (err) {\n      calculatedEnergy[p1] = -1;\n    }\n  }\n\n  // apply results to plot\n\n  let validResultNumber = 0;\n\n  for (let p1 = 0; p1 < 12; p1 += 2) {\n\n    // assert that there are results for both P1 = 2k and (2k + 1).\n    // note that for (9,7) the S66 doesn't work due to too small d_t which\n    // caused 1st derivative issue, but S55 is valid.\n\n    if (calculatedEnergy[p1] === -1 || calculatedEnergy[p1 + 1] === -1)\n      continue;\n\n    validResultNumber++;\n\n    $resultList.append(\n      $(`<tr><td>${p1Arr[p1]}</td><td>\\\\(${calculatedEnergy[p1]}\\\\ \\\\mathrm{eV}\\\\)</td></tr>`)\n        .click(() => changeEdit(p1, calculatedEnergy[p1], calculatedEnergy[p1 + 1]))\n        .css('cursor', 'pointer')\n    ).append(\n      $(`<tr><td>${p1Arr[p1 + 1]}</td><td>\\\\(${calculatedEnergy[p1 + 1]}\\\\ \\\\mathrm{eV}\\\\)</td></tr>`)\n        .click(() => changeEdit(p1, calculatedEnergy[p1], calculatedEnergy[p1 + 1]))\n        .css('cursor', 'pointer')\n    );\n\n    let inputParams = {\n      type: t, // int\n      p1: p1, // int\n      p2: p1 + 1, // int\n      val1: calculatedEnergy[p1], // empty-able str\n      val2: calculatedEnergy[p1 + 1], // empty-able str\n      rbm: '' // empty-able str\n    };\n\n    let plotParams = processOutput(getPlotParams(inputParams));\n    let plotId = `calcPlot${Math.round(p1 / 2)}`;\n\n    let $plot = $(`\n      <div class=\"math calc-plot-container\" \n           oncontextmenu=\"return false\" onmousedown=\"return false\">\n        <div class=\"row\">\n          <div class=\"col-lg-offset-2 col-md-offset-6 rbmAxisLabel\">\n            \\\\(\\\\omega_{\\\\mathrm{RBM}}\\\\ (\\\\mathrm{cm^{-1}})\\\\)\n          </div>\n        </div>\n        <br />\n        <div class=\"row\" style=\"position: relative;\">\n          <div class=\"yAxisLabel\">${plotParams.yAxisLabel}</div>\n          <div id=\"${plotId}\" style=\"width: 400px; height: 290px; font-family: 'Times New Roman', serif;\"\n               class=\"col-md-offset-1 col-xs-offset-1\"></div>\n        </div>\n        <div class=\"row\">\n          <div class=\"col-lg-offset-2 col-md-offset-5 xAxisLabel\">\n               ${plotParams.xAxisLabel}\n          </div>\n        </div>\n      </div>\n    `);\n\n    $plotList.append($plot);\n    drawPlot(plotId, plotParams);\n  }\n\n  if (validResultNumber === 0) {\n    invokeError();\n  }\n\n  MathJax.Hub.Queue(['Typeset', MathJax.Hub]);\n  return false;\n}\n\nfunction generateRBMCalculationResult(n, m, t, $resultList) { // separated function to reduce complexity\n\n  let isAirSuspended = (t === 0);\n  let editRBM = (e) => $('#edRBM').val(e);\n  if (isAirSuspended) {\n    let rbmAS = dt2RBM(Dt(n, m, t), isMetal(n, m) ? 2 : 0, t).toFixed(1).toString();\n    $resultList.append(\n      $(`\n        <tr>\n            <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ ${isMetal(n, m) ? \"(p=3)\" : \"(p=1,2)\"} \\\\)</td>\n            <td>\\\\( ${rbmAS} \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\n        </tr>\n      `)\n        .click(() => editRBM(rbmAS))\n        .css('cursor', 'pointer')\n    );\n  }\n\n  let rbmGeneral = dt2RBM(Dt(n, m, t), isAirSuspended ? 3 : 0, t).toFixed(1).toString();\n  $resultList.append(\n    $(`\n      <tr>\n          <td>\\\\(\\\\omega_\\\\mathrm{RBM}\\\\ ${isAirSuspended ? \"(p>3)\" : \"\"} \\\\)</td>\n          <td>\\\\( ${rbmGeneral} \\\\ \\\\mathrm{cm^{-1}}\\\\)</td>\n      </tr>\n    `)\n      .click(() => editRBM(rbmGeneral))\n      .css('cursor', 'pointer')\n  );\n}\n"]}